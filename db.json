{"meta":{"version":1,"warehouse":"2.2.0"},"models":{"Asset":[{"_id":"source/CNAME","path":"CNAME","modified":1,"renderable":0},{"_id":"source/assets/default.jpg","path":"assets/default.jpg","modified":1,"renderable":0},{"_id":"themes/yilia/source/slider.e37972.js","path":"slider.e37972.js","modified":1,"renderable":1},{"_id":"themes/yilia/source/main.0cf68a.css","path":"main.0cf68a.css","modified":1,"renderable":1},{"_id":"themes/yilia/source/main.0cf68a.js","path":"main.0cf68a.js","modified":1,"renderable":1},{"_id":"themes/yilia/source/mobile.992cbe.js","path":"mobile.992cbe.js","modified":1,"renderable":1},{"_id":"themes/yilia/source/img/default-skin.png","path":"img/default-skin.png","modified":1,"renderable":1},{"_id":"themes/yilia/source/img/preloader.gif","path":"img/preloader.gif","modified":1,"renderable":1},{"_id":"themes/yilia/source/img/scrollbar_arrow.png","path":"img/scrollbar_arrow.png","modified":1,"renderable":1},{"_id":"themes/yilia/source/fonts/default-skin.b257fa.svg","path":"fonts/default-skin.b257fa.svg","modified":1,"renderable":1},{"_id":"themes/yilia/source/fonts/iconfont.16acc2.ttf","path":"fonts/iconfont.16acc2.ttf","modified":1,"renderable":1},{"_id":"themes/yilia/source/fonts/iconfont.45d7ee.svg","path":"fonts/iconfont.45d7ee.svg","modified":1,"renderable":1},{"_id":"themes/yilia/source/fonts/iconfont.8c627f.woff","path":"fonts/iconfont.8c627f.woff","modified":1,"renderable":1},{"_id":"themes/yilia/source/fonts/iconfont.b322fa.eot","path":"fonts/iconfont.b322fa.eot","modified":1,"renderable":1},{"_id":"themes/yilia/source/fonts/tooltip.4004ff.svg","path":"fonts/tooltip.4004ff.svg","modified":1,"renderable":1},{"_id":"themes/yilia/source/tags/a.html","path":"tags/a.html","modified":1,"renderable":1}],"Cache":[{"_id":"source/CNAME","hash":"ec69d35c17de3d4031f1b80fbc938d5bc2504c3d","modified":1535875333523},{"_id":"themes/yilia/.babelrc","hash":"b1b76475ac17dc9e2fa50af96c9e31eea2d0f2b4","modified":1538326089971},{"_id":"themes/yilia/.editorconfig","hash":"da6d022b8f4d9c961e2f8f80677e92af8de0db4d","modified":1538326089972},{"_id":"themes/yilia/.eslintignore","hash":"df0a50b13cc00acb749226fee3cee6e0351fb1d9","modified":1538326089972},{"_id":"themes/yilia/.eslintrc.js","hash":"5696ae049de010ed3786768b0c359f14c05b5ec6","modified":1538326089973},{"_id":"themes/yilia/_config.yml","hash":"bd4e7beb72193ca0bda60fbce1892d153b94d237","modified":1546791158158},{"_id":"themes/yilia/.gitattributes","hash":"e0f24dceeb1e6878a1dd9b01a2b9df1bc037a867","modified":1538326089973},{"_id":"themes/yilia/.gitignore","hash":"9c4b7d27a1e3e5efa0c8ed143a032a85d586b03b","modified":1538326089973},{"_id":"themes/yilia/README.md","hash":"1bf755806af9d8874bd22e1abbdaaa24328ef4dc","modified":1538326089973},{"_id":"themes/yilia/_config_bak.yml","hash":"c3a1694c111e2e1f05a174bd893fe951038fbda2","modified":1538326089000},{"_id":"themes/yilia/_config_bak1.yml","hash":"a5546f042098560741ed564ce48bb6641761029d","modified":1538326663064},{"_id":"themes/yilia/package.json","hash":"367cb9579d35968a942c243ab248a5f5ebfaf462","modified":1538326089983},{"_id":"themes/yilia/webpack.config.js","hash":"05ba46a4ae744272f5312e684928910dccad3755","modified":1538326090008},{"_id":"source/photos/lazyload.min.js","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1501213868000},{"_id":"source/_posts/mybatis_01.md","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1542552718331},{"_id":"source/assets/default.jpg","hash":"d1622bc20237f95b950c67b33de25051b4588c78","modified":1539971550345},{"_id":"source/photos/index.ejs","hash":"77274cc067bcb846e30b3ec183b30df5144e49db","modified":1539973174976},{"_id":"source/photos/ins.css","hash":"8c20f68a514bb8ff9a04207cf2f7d245710973c9","modified":1501213868000},{"_id":"source/photos/ins.js","hash":"2d04d7df3b9f93237a54fa407f554822f36c0d1d","modified":1539973657913},{"_id":"source/photos/ins.json","hash":"21593d8197264fb79fb2063e9d84c4c37ae8bd70","modified":1539972231301},{"_id":"source/tags/index.md","hash":"86a46f6a14a61ad2c14e3db3a1921564b7e73bcc","modified":1539097765474},{"_id":"source/_posts/dubbo-01.md","hash":"aebf703cc107bf2e7fdc1f8fea366aba758b97a4","modified":1544630917841},{"_id":"source/_posts/dubbo-02.md","hash":"2d5581d248ca601ef54c034b219c7c100750bee1","modified":1544983757446},{"_id":"source/_posts/dubbo-03.md","hash":"b1e756cdf2ca8a092a266d0c83987df4768cbb68","modified":1545060904035},{"_id":"source/_posts/dubbo-04.md","hash":"d4e92089860958ca7af72e4cdc1b01cd7890dd6e","modified":1544983435552},{"_id":"source/_posts/dubbo-05.md","hash":"f3f4c8a21060404b0bef9bc6d1b3e449d6871087","modified":1544983562942},{"_id":"source/_posts/hello-world.md","hash":"e39200763824f53a0ffe8148585aec8fb3d03a54","modified":1543855054963},{"_id":"source/_posts/kafka-01.md","hash":"bd698f6891d4405c2a1b0151af101918d0e53b1d","modified":1544630909128},{"_id":"source/_posts/maven-01.md","hash":"a5f21a3e90dd3a596287eed7617d2bb9318345b9","modified":1544630912984},{"_id":"source/_posts/rabbitmq-01.md","hash":"13ae2e0e3c4b820568d1cff0fd3d7df04e6391dc","modified":1546143338837},{"_id":"source/_posts/rabbitmq-02.md","hash":"f83479269edf9b44b56cad2f9a4425206ac35e20","modified":1546147048090},{"_id":"source/_posts/rabbitmq-03.md","hash":"2a51b49315c11b85b51215d4b06f2ad3fe74c059","modified":1546701640944},{"_id":"source/_posts/rabbitmq-04.md","hash":"1af6181ac29fdee819b998079b70eed28a7a4712","modified":1546791550132},{"_id":"source/_posts/rabbitmq-05.md","hash":"14232b7eecb78ac92b7137471c7a97dd32268731","modified":1546791323526},{"_id":"source/_posts/rabbitmq-06.md","hash":"a190d05443bcdbbfb32a82b14385f89dfacce8be","modified":1546791326224},{"_id":"source/_posts/spring-01.md","hash":"3f47e935cf4e8cbd1b83fa19c1b83df9439049ff","modified":1544630922492},{"_id":"source/_posts/spring-02.md","hash":"4b660a815b52fcda7721607ed08b9dbce35204ef","modified":1544630921382},{"_id":"source/_posts/spring-03.md","hash":"9b49490bad9df1d6675cf16658adcc9e6db4a264","modified":1544630919299},{"_id":"source/_posts/spring-04.md","hash":"1e9e2af32de4b10f193065ad53c7d718600ba55f","modified":1550335734631},{"_id":"source/_posts/zk-01.md","hash":"02048039b66e9a5e160a0827b0a3240de481e843","modified":1550335729871},{"_id":"source/_posts/多线程-01.md","hash":"49fd4d6fd996ce0cd8a5d64b7ead92a76e62d742","modified":1551112621796},{"_id":"source/_posts/多线程-02.md","hash":"f3949163e0909ebcd363c97fc4006a6edf12fb80","modified":1551114865250},{"_id":"source/_posts/通讯协议.md","hash":"88c749b798d34103bf31645381b44588750d66c2","modified":1545150430090},{"_id":"themes/yilia/.git/HEAD","hash":"acbaef275e46a7f14c1ef456fff2c8bbe8c84724","modified":1538326089963},{"_id":"themes/yilia/.git/config","hash":"256e47c5a4386e6881318e44d2a716fdc3197863","modified":1538326089966},{"_id":"themes/yilia/.git/description","hash":"9635f1b7e12c045212819dd934d809ef07efa2f4","modified":1538325950966},{"_id":"themes/yilia/.git/index","hash":"5c08bf18e80bb23664a63e6809fb364e4df76fde","modified":1538329390281},{"_id":"themes/yilia/.git/packed-refs","hash":"76b1aa9479dd3de329935b6d94a6624c5f716d23","modified":1538326089961},{"_id":"themes/yilia/.idea/compiler.xml","hash":"bff5196ea91a033d64bb5c4d6647a2e3b71bb548","modified":1538326247887},{"_id":"themes/yilia/.idea/misc.xml","hash":"7df46872d1421797d543d0323da2e81710cc573d","modified":1538326247875},{"_id":"themes/yilia/.idea/modules.xml","hash":"17e6b364ecf89b4cbe8e761d0208fa779a8ab333","modified":1538326247895},{"_id":"themes/yilia/.idea/yilia.iml","hash":"980957b57c4f1eae5e85d664d8375f83d47d3e5a","modified":1538326247868},{"_id":"themes/yilia/languages/default.yml","hash":"3083f319b352d21d80fc5e20113ddf27889c9d11","modified":1538326089974},{"_id":"themes/yilia/.idea/vcs.xml","hash":"6f94fc1df9e8721673d47588ac444667dc9ded06","modified":1538326286619},{"_id":"themes/yilia/languages/fr.yml","hash":"84ab164b37c6abf625473e9a0c18f6f815dd5fd9","modified":1538326089974},{"_id":"themes/yilia/languages/no.yml","hash":"965a171e70347215ec726952e63f5b47930931ef","modified":1538326089975},{"_id":"themes/yilia/.idea/workspace.xml","hash":"fb69ea2d3b3da1a4f9c146bcddcae846b2176724","modified":1538379595113},{"_id":"themes/yilia/languages/ru.yml","hash":"4fda301bbd8b39f2c714e2c934eccc4b27c0a2b0","modified":1538326089975},{"_id":"themes/yilia/languages/nl.yml","hash":"12ed59faba1fc4e8cdd1d42ab55ef518dde8039c","modified":1538326089975},{"_id":"themes/yilia/languages/zh-CN.yml","hash":"ca40697097ab0b3672a80b455d3f4081292d1eed","modified":1538326089975},{"_id":"themes/yilia/languages/zh-tw.yml","hash":"53ce3000c5f767759c7d2c4efcaa9049788599c3","modified":1538326089975},{"_id":"themes/yilia/layout/archive.ejs","hash":"2703b07cc8ac64ae46d1d263f4653013c7e1666b","modified":1538326089982},{"_id":"themes/yilia/layout/category.ejs","hash":"765426a9c8236828dc34759e604cc2c52292835a","modified":1538326089982},{"_id":"themes/yilia/layout/index.ejs","hash":"a35dc900203f9d8dd863ea4c1722198d6d457ec8","modified":1538326089982},{"_id":"themes/yilia/layout/layout.ejs","hash":"63181d95394fd69f8993708d8eceffd360e712ba","modified":1539096351247},{"_id":"themes/yilia/layout/post.ejs","hash":"7d80e4e36b14d30a7cd2ac1f61376d9ebf264e8b","modified":1538326089983},{"_id":"themes/yilia/layout/page.ejs","hash":"7d80e4e36b14d30a7cd2ac1f61376d9ebf264e8b","modified":1538326089983},{"_id":"themes/yilia/layout/tag.ejs","hash":"eaa7b4ccb2ca7befb90142e4e68995fb1ea68b2e","modified":1538326089983},{"_id":"themes/yilia/source/slider.e37972.js","hash":"6dec4e220c89049037eebc44404abd8455d22ad7","modified":1538326090008},{"_id":"themes/yilia/source/main.0cf68a.css","hash":"ddf6e2c6b953c2c59a3c271e6070010a4cc81cf9","modified":1538326090004},{"_id":"themes/yilia/source-src/css.ejs","hash":"94dbdb02ca11849e415d54fb28546a598f2cffb1","modified":1538326089984},{"_id":"themes/yilia/source-src/script.ejs","hash":"c21381e1317db7bb157f1d182b8c088cb7cba411","modified":1538326089998},{"_id":"themes/yilia/layout/_partial/toc.ejs","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1538326089981},{"_id":"themes/yilia/source/main.0cf68a.js","hash":"993fadeb5f6d296e9d997a49ee20dc97333ceab7","modified":1538326090006},{"_id":"themes/yilia/source/mobile.992cbe.js","hash":"01b35e71e37aa2849664eb5daf26daede2278398","modified":1538326090006},{"_id":"themes/yilia/.git/hooks/commit-msg.sample","hash":"ee1ed5aad98a435f2020b6de35c173b75d9affac","modified":1538325950966},{"_id":"themes/yilia/.git/hooks/pre-applypatch.sample","hash":"f208287c1a92525de9f5462e905a9d31de1e2d75","modified":1538325950968},{"_id":"themes/yilia/.git/hooks/post-update.sample","hash":"b614c2f63da7dca9f1db2e7ade61ef30448fc96c","modified":1538325950967},{"_id":"themes/yilia/.git/hooks/applypatch-msg.sample","hash":"4de88eb95a5e93fd27e78b5fb3b5231a8d8917dd","modified":1538325950967},{"_id":"themes/yilia/.git/hooks/pre-commit.sample","hash":"36aed8976dcc08b5076844f0ec645b18bc37758f","modified":1538325950966},{"_id":"themes/yilia/.git/hooks/pre-push.sample","hash":"5c8518bfd1d1d3d2c1a7194994c0a16d8a313a41","modified":1538325950968},{"_id":"themes/yilia/.git/hooks/prepare-commit-msg.sample","hash":"2584806ba147152ae005cb675aa4f01d5d068456","modified":1538325950967},{"_id":"themes/yilia/.git/hooks/update.sample","hash":"e729cd61b27c128951d139de8e7c63d1a3758dde","modified":1538325950968},{"_id":"themes/yilia/.git/hooks/pre-receive.sample","hash":"705a17d259e7896f0082fe2e9f2c0c3b127be5ac","modified":1538325950967},{"_id":"themes/yilia/.git/hooks/pre-rebase.sample","hash":"288efdc0027db4cfd8b7c47c4aeddba09b6ded12","modified":1538325950966},{"_id":"themes/yilia/.git/info/exclude","hash":"c879df015d97615050afa7b9641e3352a1e701ac","modified":1538325950965},{"_id":"themes/yilia/.git/logs/HEAD","hash":"55993d119b88637b59d4a7b5f4c59cca7fcae269","modified":1538326089964},{"_id":"themes/yilia/layout/_partial/archive-post.ejs","hash":"1f7d4819b7f67602c4a1b99871808d2160b60978","modified":1538326089976},{"_id":"themes/yilia/layout/_partial/archive.ejs","hash":"a6e94061ac55b9eb55275f87b608d62f6ea35659","modified":1538326089976},{"_id":"themes/yilia/layout/_partial/baidu-analytics.ejs","hash":"f0e6e88f9f7eb08b8fe51449a8a3016273507924","modified":1538326089977},{"_id":"themes/yilia/layout/_partial/aside.ejs","hash":"8edbd7993b9b061611a193533a664e2e85eae748","modified":1538326089976},{"_id":"themes/yilia/layout/_partial/after-footer.ejs","hash":"2d7a95aa6b78d97957726e11d403849bf4f7807e","modified":1539090902130},{"_id":"themes/yilia/layout/_partial/article.ejs","hash":"630c6ec866d056657d3d91e34b4c64eb993c0654","modified":1538326089976},{"_id":"themes/yilia/layout/_partial/css.ejs","hash":"236f8a377b2e4e35754319c3029bcd4a4115431d","modified":1538326089977},{"_id":"themes/yilia/layout/_partial/footer.ejs","hash":"0f646cd2c3d7129bd84e7c45c0a8e9bcc464fc54","modified":1539090902135},{"_id":"themes/yilia/layout/_partial/google-analytics.ejs","hash":"f921e7f9223d7c95165e0f835f353b2938e40c45","modified":1538326089977},{"_id":"themes/yilia/layout/_partial/head.ejs","hash":"64f092186b5a744aa1603ce22bb1d44a34446add","modified":1538326089977},{"_id":"themes/yilia/layout/_partial/header.ejs","hash":"6387a93dad7c3d778eb91e3821852fbf6813880c","modified":1538326089977},{"_id":"themes/yilia/layout/_partial/left-col.ejs","hash":"183d7ca4ba8e7c80694ffdc8cf39957092238346","modified":1538326089978},{"_id":"themes/yilia/layout/_partial/mathjax.ejs","hash":"151a1ef2173ba7b6789d349f0f8da89616cc1394","modified":1538326089978},{"_id":"themes/yilia/layout/_partial/mobile-nav.ejs","hash":"7fbbfabf5e29525b24ada14613c21a26789132b4","modified":1538326089978},{"_id":"themes/yilia/layout/_partial/tools.ejs","hash":"c41341b9618e591538e1136a2d1637587c1bbd90","modified":1538326089982},{"_id":"themes/yilia/layout/_partial/viewer.ejs","hash":"e495790b2abe2290875817e42bd505bc611d3e26","modified":1538326089982},{"_id":"themes/yilia/source/img/default-skin.png","hash":"ed95a8e40a2c3478c5915376acb8e5f33677f24d","modified":1538326090002},{"_id":"themes/yilia/source/img/preloader.gif","hash":"6342367c93c82da1b9c620e97c84a389cc43d96d","modified":1538326090002},{"_id":"themes/yilia/source/img/scrollbar_arrow.png","hash":"d64a33c4ddfbdb89deeb6f4e3d36eb84dc4777c0","modified":1538326090003},{"_id":"themes/yilia/source/fonts/default-skin.b257fa.svg","hash":"2ac727c9e092331d35cce95af209ccfac6d4c7c7","modified":1538326089999},{"_id":"themes/yilia/source/fonts/iconfont.16acc2.ttf","hash":"f342ac8bf4d937f42a7d6a0032ad267ab47eb7f2","modified":1538326089999},{"_id":"themes/yilia/source/fonts/iconfont.45d7ee.svg","hash":"f9304e5714d20861be7d8f4d36687e88e86b9e1b","modified":1538326089999},{"_id":"themes/yilia/source/fonts/iconfont.8c627f.woff","hash":"aa9672cb097f7fd73ae5a03bcd3d9d726935bc0a","modified":1538326090000},{"_id":"themes/yilia/source/fonts/iconfont.b322fa.eot","hash":"bc8c5e88f4994a852041b4d83f126d9c4d419b4a","modified":1538326090001},{"_id":"themes/yilia/source/fonts/tooltip.4004ff.svg","hash":"397fe4b1093bf9b62457dac48aa15dac06b54a3c","modified":1538326090002},{"_id":"themes/yilia/source/tags/a.html","hash":"96caaa4874bb11a9469ce41ce6c6ae1295ba532b","modified":1538329413741},{"_id":"themes/yilia/source-src/css/_core.scss","hash":"24f347a2412abbf58318369152504da9538f8d3b","modified":1538326089984},{"_id":"themes/yilia/source-src/css/_function.scss","hash":"93a50dd19a93485712da1f8d0a1672482dd1eabc","modified":1538326089984},{"_id":"themes/yilia/source-src/css/archive.scss","hash":"7d27e22ac898e8fafec14549e940c73cbea1fba8","modified":1538326089984},{"_id":"themes/yilia/source-src/css/article-inner.scss","hash":"d79f2d35a06de83a2a226ca790b7a0a34789c115","modified":1538326089984},{"_id":"themes/yilia/source-src/css/article-main.scss","hash":"3fad68bd74260326f83090b0974dd80707e7bac7","modified":1538326089985},{"_id":"themes/yilia/source-src/css/article-nav.scss","hash":"43e507f2a48504079afd9471353337e23ca47470","modified":1538326089985},{"_id":"themes/yilia/source-src/css/article.scss","hash":"0f6d61af99ed4db87f8589db1feaea7747b55963","modified":1538326089985},{"_id":"themes/yilia/source-src/css/comment.scss","hash":"cafe3834017a3bf47420f37543725025225a2c89","modified":1538326089985},{"_id":"themes/yilia/source-src/css/aside.scss","hash":"578a67464dd0f542197f7fcee158c991db058563","modified":1538326089985},{"_id":"themes/yilia/source-src/css/fonts.scss","hash":"97b8fba41c914145710b90091f400b845879577f","modified":1538326089988},{"_id":"themes/yilia/source-src/css/footer.scss","hash":"7c995410b25baaf61dfc5e148e22ca60330abcd3","modified":1538326089990},{"_id":"themes/yilia/source-src/css/grid.scss","hash":"849a29fcd7150214fcf7b9715fa5dc71d1f9b896","modified":1538326089991},{"_id":"themes/yilia/source-src/css/global.scss","hash":"b4cb4f45a55d4250cd9056f76dab2a3c0dabcec4","modified":1538326089990},{"_id":"themes/yilia/source-src/css/highlight.scss","hash":"3719994c2c9393813cc1d42b657205c368a329cb","modified":1538326089991},{"_id":"themes/yilia/source-src/css/mobile.scss","hash":"ace041d72f95b419f6a5e443191703c2b62007f4","modified":1538326089993},{"_id":"themes/yilia/source-src/css/page.scss","hash":"bf206bb7f7d0967bc8b7fdf01b7ffc99aff9ba88","modified":1538326089993},{"_id":"themes/yilia/source-src/css/main.scss","hash":"2f86a014af93583caba78a563d9549826bf28294","modified":1538326089992},{"_id":"themes/yilia/source-src/css/left.scss","hash":"0d30c0e7cdb831c3881a017006c782f2214ac195","modified":1538326089992},{"_id":"themes/yilia/source-src/css/mobile-slider.scss","hash":"f053c609d84df0dd9eee1d11ddf0c19163a456be","modified":1538326089993},{"_id":"themes/yilia/source-src/css/scroll.scss","hash":"9c8dfd1c76854ef063494ca76fac6360b391ed6d","modified":1538326089994},{"_id":"themes/yilia/source-src/css/reward.scss","hash":"80a4fcf9171d4a33235da96ac8a2b7dcabc45dfb","modified":1538326089994},{"_id":"themes/yilia/source-src/css/share.scss","hash":"150c6425f6582e7ec78a873256ce49c9930e8805","modified":1538326089994},{"_id":"themes/yilia/source-src/css/social.scss","hash":"724162ccf3977e70a45d189abfaa20b6e2fba87b","modified":1538326089994},{"_id":"themes/yilia/source-src/css/tags-cloud.scss","hash":"c8aa84fca93862d3caae77c552873b8610f33327","modified":1538326089994},{"_id":"themes/yilia/source-src/css/tools.scss","hash":"1b1aa0908e58cf942b28e3881d07c5573c4129e1","modified":1538326089995},{"_id":"themes/yilia/source-src/css/tags.scss","hash":"ac67a3c7097849206244db9b0ba91daaba017ef5","modified":1538326089995},{"_id":"themes/yilia/source-src/js/anm.js","hash":"4a4c5d82b09a3063f91a434388e6aa064fd7fd98","modified":1538326089996},{"_id":"themes/yilia/source-src/js/aside.js","hash":"754f771264548a6c5a8ad842908e59ae4e7ed099","modified":1538326089996},{"_id":"themes/yilia/source-src/css/tooltip.scss","hash":"53d5a554bc2f38e9bb3d26400a47767013c05216","modified":1538326089995},{"_id":"themes/yilia/source-src/js/browser.js","hash":"04095b38cfd4316a23f8eb14b1ffaf95f78a4260","modified":1538326089996},{"_id":"themes/yilia/source-src/js/Q.js","hash":"d011af172064b6c6e0c7051d8f9879373ddac113","modified":1538326089996},{"_id":"themes/yilia/source-src/js/fix.js","hash":"d6782d53c992e712af39c84e804eccaf38830b94","modified":1538326089997},{"_id":"themes/yilia/source-src/js/main.js","hash":"3894e60827c817319e43c9ff3ed045fc3d7336ce","modified":1538326089997},{"_id":"themes/yilia/source-src/js/mobile.js","hash":"4d823b039fd296d24a454eae5a798b93c44560cb","modified":1538326089997},{"_id":"themes/yilia/source-src/js/report.js","hash":"4f1d9a18a936ce40b037f636a39127dd19175b6e","modified":1538326089997},{"_id":"themes/yilia/source-src/js/share.js","hash":"b090f82cf80cba7da764753906d9e2cc2acdf30d","modified":1538326089997},{"_id":"themes/yilia/source-src/js/slider.js","hash":"e846bcc5aac9c68b93f7b8de353df54d8d29f666","modified":1538326089998},{"_id":"themes/yilia/source-src/js/util.js","hash":"8456e9d6b19532742582c99b2fb9d09e146e1c58","modified":1538326089998},{"_id":"themes/yilia/source-src/js/viewer.js","hash":"2577deb6a9fe4f5436360b2ce9afcc7f9a7f0116","modified":1538326089998},{"_id":"themes/yilia/layout/_partial/script.ejs","hash":"4cb685f07e89dd5175c2a576e73a1a957aec5637","modified":1538326089981},{"_id":"themes/yilia/.git/objects/35/eb1ddfbbc029bcab630581847471d7f238ec53","hash":"3d55863c44c84e5bd27d6a8f12fd230399173996","modified":1538326333200},{"_id":"themes/yilia/.git/objects/d6/3d087d991f19c2ae2bed4324014416120940ff","hash":"683d00a233003d32fd3ac82684614e57f23446e0","modified":1538326710863},{"_id":"themes/yilia/.git/refs/heads/master","hash":"4ed77da1a2617db0e77c3e3e190a1c79c16dfb9a","modified":1538326089964},{"_id":"themes/yilia/.git/objects/pack/pack-a2d90492ccd9c1df18b7b0477e593ecbf973373b.idx","hash":"1652364786e6d28b39753dd9eaeebff8ab46eeb0","modified":1538326089936},{"_id":"themes/yilia/layout/_partial/post/category.ejs","hash":"0809a4829aabeb4e911a3ed04ec28db4df7dfe3f","modified":1538326089978},{"_id":"themes/yilia/layout/_partial/post/duoshuo.ejs","hash":"e8399025ed3b980aedb821c92855889f5f12fd5b","modified":1538326089979},{"_id":"themes/yilia/layout/_partial/post/changyan.ejs","hash":"5f99b55980da64a723a8e14d5a7daba0d6504647","modified":1538326089979},{"_id":"themes/yilia/layout/_partial/post/date.ejs","hash":"ef71c4081e866a494367575c59610e7e6339ece0","modified":1538326089979},{"_id":"themes/yilia/layout/_partial/post/gitment.ejs","hash":"e68bbac9ffb1ad27b56837c9abad6ed6bb7daa0c","modified":1538326089979},{"_id":"themes/yilia/layout/_partial/post/nav.ejs","hash":"1036c8e4e1a7bc935ba173744da735a0d6ed09cd","modified":1538326089979},{"_id":"themes/yilia/layout/_partial/post/tag.ejs","hash":"2e783e68755abb852760eb0e627a3fbb50a05a55","modified":1538326089980},{"_id":"themes/yilia/layout/_partial/post/share.ejs","hash":"5dccfbe165b23a101f1333cc65ed8efbd197453c","modified":1538326089980},{"_id":"themes/yilia/layout/_partial/post/title.ejs","hash":"2f275739b6f1193c123646a5a31f37d48644c667","modified":1538326089980},{"_id":"themes/yilia/layout/_partial/post/wangyiyun.ejs","hash":"ea41c462168d9697caef9485862e9cac718a12c1","modified":1538326089980},{"_id":"themes/yilia/source-src/css/core/_animation.scss","hash":"63a37f26276f9207405afe0f2d65339ce295bbaf","modified":1538326089986},{"_id":"themes/yilia/source-src/css/core/_media-queries.scss","hash":"491ab3378d5c11005ba65c607608bb36b368a9d5","modified":1538326089986},{"_id":"themes/yilia/source-src/css/core/_reset.scss","hash":"fab871fa93bd542e76a71a56428f2994a4aaf443","modified":1538326089987},{"_id":"themes/yilia/source-src/css/core/_variables.scss","hash":"fb511c505d1309249f21dc577d4ad2bad99a764f","modified":1538326089987},{"_id":"themes/yilia/source-src/css/core/_mixin.scss","hash":"3bba5c77bad5981eac859fe05c9561d580ba7fa9","modified":1538326089986},{"_id":"themes/yilia/source-src/css/fonts/iconfont.ttf","hash":"f342ac8bf4d937f42a7d6a0032ad267ab47eb7f2","modified":1538326089989},{"_id":"themes/yilia/source-src/css/fonts/iconfont.woff","hash":"aa9672cb097f7fd73ae5a03bcd3d9d726935bc0a","modified":1538326089989},{"_id":"themes/yilia/source-src/css/fonts/iconfont.svg","hash":"f9304e5714d20861be7d8f4d36687e88e86b9e1b","modified":1538326089989},{"_id":"themes/yilia/source-src/css/img/tooltip.svg","hash":"397fe4b1093bf9b62457dac48aa15dac06b54a3c","modified":1538326089992},{"_id":"themes/yilia/source-src/css/img/checkered-pattern.png","hash":"049262fa0886989d750637b264bed34ab51c23c8","modified":1538326089991},{"_id":"themes/yilia/source-src/css/fonts/iconfont.eot","hash":"bc8c5e88f4994a852041b4d83f126d9c4d419b4a","modified":1538326089988},{"_id":"themes/yilia/source-src/css/img/scrollbar_arrow.png","hash":"d64a33c4ddfbdb89deeb6f4e3d36eb84dc4777c0","modified":1538326089992},{"_id":"themes/yilia/.git/logs/refs/heads/master","hash":"55993d119b88637b59d4a7b5f4c59cca7fcae269","modified":1538326089965},{"_id":"themes/yilia/.git/refs/remotes/origin/HEAD","hash":"d9427cda09aba1cdde5c69c2b13c905bddb0bc51","modified":1538326089963},{"_id":"themes/yilia/.git/logs/refs/remotes/origin/HEAD","hash":"55993d119b88637b59d4a7b5f4c59cca7fcae269","modified":1538326089963},{"_id":"themes/yilia/.git/objects/pack/pack-a2d90492ccd9c1df18b7b0477e593ecbf973373b.pack","hash":"6c120207644a33983f914f1ed581253b71799f2c","modified":1538329390000},{"_id":"public/photos/lazyload.min.js","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1551114933655},{"_id":"public/photos/ins.css","hash":"8c20f68a514bb8ff9a04207cf2f7d245710973c9","modified":1551114933870},{"_id":"public/photos/ins.js","hash":"2d04d7df3b9f93237a54fa407f554822f36c0d1d","modified":1551114933915},{"_id":"public/photos/ins.json","hash":"2fac5209f2a2a4b01c7149cedf62fe87d24fc016","modified":1551114933915},{"_id":"public/content.json","hash":"64bd5e8bb5a45bb185fea1bca6608cad00a983fa","modified":1551114933916},{"_id":"public/photos/index.html","hash":"d73a7c63ce08e9bdb0beb3a1cbf23399e36b602d","modified":1551114933946},{"_id":"public/tags/index.html","hash":"849f9452e7cfa7cb39847ca2bf90530201148db5","modified":1551114933947},{"_id":"public/2019/02/26/多线程-02/index.html","hash":"7b5f4247de69f40f66447401554f3aeeef40e2e2","modified":1551114933947},{"_id":"public/2019/02/15/多线程-01/index.html","hash":"6c9527e6e1d739cdf7648c0633266491a750b926","modified":1551114933948},{"_id":"public/2019/01/13/zk-01/index.html","hash":"1a17770a083e8012be77aa304c3bd293227f3e57","modified":1551114933948},{"_id":"public/2019/01/06/rabbitmq-06/index.html","hash":"c2a153ea7818a17e0456c38c7a93e58699814b71","modified":1551114933948},{"_id":"public/2019/01/06/rabbitmq-05/index.html","hash":"efc048488f723d7ac9d8af97a1ec892f1d624895","modified":1551114933948},{"_id":"public/2019/01/05/rabbitmq-04/index.html","hash":"bcf40738232ccef29cb52f9116773007997b80ee","modified":1551114933948},{"_id":"public/2018/12/30/rabbitmq-03/index.html","hash":"bd80329ef4341edc478a37a232dc4a0628073550","modified":1551114933948},{"_id":"public/2018/12/30/rabbitmq-02/index.html","hash":"e20c510cccef5037b1aef7a444a16262d1534a87","modified":1551114933948},{"_id":"public/2018/12/20/rabbitmq-01/index.html","hash":"d414af84aa7d7b3e1936631b3f01290122758710","modified":1551114933948},{"_id":"public/2018/12/17/通讯协议/index.html","hash":"51b4d3d21b461745d72ad0829188b4d40ec814b5","modified":1551114933949},{"_id":"public/2018/12/17/dubbo-05/index.html","hash":"e4ddd661f3bfa078ec63dd2cb314890110f97ac0","modified":1551114933949},{"_id":"public/2018/12/17/dubbo-04/index.html","hash":"356745a111f48946a5424388d7ecc0196636b40c","modified":1551114933949},{"_id":"public/2018/12/16/dubbo-03/index.html","hash":"10a55d259f5833b814423c3b72e07a796e586473","modified":1551114933949},{"_id":"public/2018/12/12/dubbo-02/index.html","hash":"b46fce8acaf5646f1c983ddd7ca60f6f778013f1","modified":1551114933949},{"_id":"public/2018/12/09/kafka-01/index.html","hash":"7536caf1eadffe1c61262223598bdc0e27e64f25","modified":1551114933949},{"_id":"public/2018/12/04/maven-01/index.html","hash":"d74f99059b77a71c10a22db70b0dca80a9acb87f","modified":1551114933949},{"_id":"public/2018/12/04/dubbo-01/index.html","hash":"5472a1848f5e9a64437b7e9d204244b1d42f1c02","modified":1551114933950},{"_id":"public/2018/11/18/spring-04/index.html","hash":"ef363ceb0c0f60c5dbdbc42100858f2c67cc780e","modified":1551114933950},{"_id":"public/2018/11/18/spring-03/index.html","hash":"e072865f1c894e50deef3ee351fc6f3576db1efb","modified":1551114933950},{"_id":"public/2018/10/21/spring-01/index.html","hash":"1a6ba5c6814f690fd4cac67e1fc562f23ae13f78","modified":1551114933950},{"_id":"public/2018/10/21/spring-02/index.html","hash":"21459d4d71f62959d45db7deab4cf5dd8eb16385","modified":1551114933950},{"_id":"public/2018/10/09/hello-world/index.html","hash":"2d3b2746ec4b83072c8e9a09d8a375658f64dcc2","modified":1551114933950},{"_id":"public/2018/10/09/mybatis_01/index.html","hash":"d88a373ac6154778c5ba29d1b873be81ab5b39c1","modified":1551114933951},{"_id":"public/archives/index.html","hash":"c6cfb84ea421eb908e8e06edee9cc9d4983dbbe2","modified":1551114933951},{"_id":"public/archives/page/2/index.html","hash":"1911c9bdafb91b63d39d204de8b70e9c484e997b","modified":1551114933951},{"_id":"public/archives/page/3/index.html","hash":"1fe9062a0df0f57b295e5b51c84fc59b581af35f","modified":1551114933951},{"_id":"public/archives/2018/index.html","hash":"7156756c9fdf40501dbb7155c37b06616834611b","modified":1551114933951},{"_id":"public/archives/2018/page/2/index.html","hash":"446f08a4ee9dc770e3d1096f3d5891a325a5c231","modified":1551114933951},{"_id":"public/archives/2018/10/index.html","hash":"e5e52dcfcaa1e5a70ff72adaab8df09d75cf0d26","modified":1551114933951},{"_id":"public/archives/2018/11/index.html","hash":"62b9d041ac34325aded7624d559c1bf9d62f6243","modified":1551114933952},{"_id":"public/archives/2018/12/index.html","hash":"1ea862b44dd43f3ac56b0d61a5a94e89927d2109","modified":1551114933952},{"_id":"public/archives/2018/12/page/2/index.html","hash":"64b2b0fee043e9f57cd936379bf7d39a8d70f6b5","modified":1551114933952},{"_id":"public/archives/2019/index.html","hash":"5c859dc2e0dd0aa7b5818f8853180d74bd5ee059","modified":1551114933952},{"_id":"public/archives/2019/01/index.html","hash":"d39a719723c4e2183c5a06a8f2143b51b82cf8be","modified":1551114933952},{"_id":"public/archives/2019/02/index.html","hash":"857e09ef5157bdf63eb6c86cededf15ab8ebd06a","modified":1551114933952},{"_id":"public/categories/hexo/index.html","hash":"101e56138db7e672214c5deff65c77629501af07","modified":1551114933953},{"_id":"public/index.html","hash":"e0ffea7babb30d2b406e97f5c2b61c14317861e7","modified":1551114933953},{"_id":"public/page/2/index.html","hash":"41eee1e88c3af682c54ef773e92791884012aed3","modified":1551114933953},{"_id":"public/page/3/index.html","hash":"4ee076fde08ced00f133ae592548dc4791a09598","modified":1551114933953},{"_id":"public/tags/Dubbo/index.html","hash":"0bc5d69cbd22624e13f6408b6fe92a418c8c049b","modified":1551114933953},{"_id":"public/tags/Kafka/index.html","hash":"10449975430c0a9ca7bf6de894135fb86b612cb4","modified":1551114933953},{"_id":"public/tags/Zookeeper/index.html","hash":"1345bd7033c110c392877bf11305a43393feac9e","modified":1551114933953},{"_id":"public/tags/hexo/index.html","hash":"663b94b85ed469a4dc7fc8ec47241a2c245f82c0","modified":1551114933954},{"_id":"public/tags/Maven/index.html","hash":"bd9da78b35316ed389221e98a84cc5303cebc865","modified":1551114933954},{"_id":"public/tags/RabbitMq/index.html","hash":"49df3c9760aab701fd3f44beb0a82ba24547ad9f","modified":1551114933954},{"_id":"public/tags/Java/index.html","hash":"2352357934ccc4852ee9688bf7fc724197c72c17","modified":1551114933955},{"_id":"public/tags/Spring/index.html","hash":"8536335c71bb855e1e00a83d05e55b8ae838ab16","modified":1551114933955},{"_id":"public/tags/并发编程/index.html","hash":"a8253aae0cd3cc7bff08248735781ce914a8ed3d","modified":1551114933955},{"_id":"public/tags/通讯协议/index.html","hash":"6859b062fe76af93fefa72628701a0ab26a284ad","modified":1551114933955},{"_id":"public/CNAME","hash":"ec69d35c17de3d4031f1b80fbc938d5bc2504c3d","modified":1551114933959},{"_id":"public/assets/default.jpg","hash":"d1622bc20237f95b950c67b33de25051b4588c78","modified":1551114933960},{"_id":"public/img/default-skin.png","hash":"ed95a8e40a2c3478c5915376acb8e5f33677f24d","modified":1551114933960},{"_id":"public/img/preloader.gif","hash":"6342367c93c82da1b9c620e97c84a389cc43d96d","modified":1551114933960},{"_id":"public/img/scrollbar_arrow.png","hash":"d64a33c4ddfbdb89deeb6f4e3d36eb84dc4777c0","modified":1551114933960},{"_id":"public/fonts/default-skin.b257fa.svg","hash":"2ac727c9e092331d35cce95af209ccfac6d4c7c7","modified":1551114933960},{"_id":"public/fonts/iconfont.16acc2.ttf","hash":"f342ac8bf4d937f42a7d6a0032ad267ab47eb7f2","modified":1551114933960},{"_id":"public/fonts/iconfont.45d7ee.svg","hash":"f9304e5714d20861be7d8f4d36687e88e86b9e1b","modified":1551114933960},{"_id":"public/fonts/iconfont.8c627f.woff","hash":"aa9672cb097f7fd73ae5a03bcd3d9d726935bc0a","modified":1551114933960},{"_id":"public/fonts/iconfont.b322fa.eot","hash":"bc8c5e88f4994a852041b4d83f126d9c4d419b4a","modified":1551114933960},{"_id":"public/fonts/tooltip.4004ff.svg","hash":"397fe4b1093bf9b62457dac48aa15dac06b54a3c","modified":1551114933960},{"_id":"public/tags/a.html","hash":"96caaa4874bb11a9469ce41ce6c6ae1295ba532b","modified":1551114933967},{"_id":"public/main.0cf68a.css","hash":"ddf6e2c6b953c2c59a3c271e6070010a4cc81cf9","modified":1551114933967},{"_id":"public/slider.e37972.js","hash":"6dec4e220c89049037eebc44404abd8455d22ad7","modified":1551114933967},{"_id":"public/main.0cf68a.js","hash":"993fadeb5f6d296e9d997a49ee20dc97333ceab7","modified":1551114933967},{"_id":"public/mobile.992cbe.js","hash":"01b35e71e37aa2849664eb5daf26daede2278398","modified":1551114933967}],"Category":[{"name":"hexo","_id":"cjskls62y000l745b56s5vgcm"}],"Data":[],"Page":[{"_content":"","source":"photos/lazyload.min.js","raw":"","date":"2018-10-09T14:46:46.082Z","updated":"2017-07-28T03:51:08.000Z","path":"photos/lazyload.min.js","layout":"false","title":"","comments":1,"_id":"cjskls61x0001745b4zfby3l9","content":"","site":{"data":{}},"excerpt":"","more":""},{"layout":"post","slug":"photos","title":"相册","noDate":"true","comments":0,"_content":"<link rel=\"stylesheet\" href=\"./ins.css\">\n<div class=\"photos-btn-wrap\">\n\t<a class=\"photos-btn active\" href=\"javascript:void(0)\">photo</a>\n\t<!-- <a class=\"photos-btn\" target=\"_blank\" href=\"http://litten.me/gallery/\">摄影</a> -->\n\n\n</div>\n<div class=\"instagram itemscope\">\n\t<a href=\"https://www.instagram.com/litten225/\" target=\"_blank\" class=\"open-ins\">Waiting…</a>\n</div>\n<script>\n  (function() {\n    var loadScript = function(path) {\n      var $script = document.createElement('script')\n      document.getElementsByTagName('body')[0].appendChild($script)\n      $script.setAttribute('src', path)\n    }\n    setTimeout(function() {\n      loadScript('./ins.js')\n    }, 0)\n  })()\n</script>\n","source":"photos/index.ejs","raw":"---\nlayout: post\nslug: \"photos\"\ntitle: \"相册\"\nnoDate: \"true\"\ncomments: \"false\"\n---\n<link rel=\"stylesheet\" href=\"./ins.css\">\n<div class=\"photos-btn-wrap\">\n\t<a class=\"photos-btn active\" href=\"javascript:void(0)\">photo</a>\n\t<!-- <a class=\"photos-btn\" target=\"_blank\" href=\"http://litten.me/gallery/\">摄影</a> -->\n\n\n</div>\n<div class=\"instagram itemscope\">\n\t<a href=\"https://www.instagram.com/litten225/\" target=\"_blank\" class=\"open-ins\">Waiting…</a>\n</div>\n<script>\n  (function() {\n    var loadScript = function(path) {\n      var $script = document.createElement('script')\n      document.getElementsByTagName('body')[0].appendChild($script)\n      $script.setAttribute('src', path)\n    }\n    setTimeout(function() {\n      loadScript('./ins.js')\n    }, 0)\n  })()\n</script>\n","date":"2018-10-19T18:19:34.977Z","updated":"2018-10-19T18:19:34.976Z","path":"photos/index.html","_id":"cjskls62j0002745bknvehxwe","content":"<link rel=\"stylesheet\" href=\"./ins.css\">\n<div class=\"photos-btn-wrap\">\n\t<a class=\"photos-btn active\" href=\"javascript:void(0)\" target=\"_blank\" rel=\"noopener\">photo</a>\n\t<!-- <a class=\"photos-btn\" target=\"_blank\" href=\"http://litten.me/gallery/\">摄影</a> -->\n\n\n</div>\n<div class=\"instagram itemscope\">\n\t<a href=\"https://www.instagram.com/litten225/\" target=\"_blank\" class=\"open-ins\">Waiting…</a>\n</div>\n<script>\n  (function() {\n    var loadScript = function(path) {\n      var $script = document.createElement('script')\n      document.getElementsByTagName('body')[0].appendChild($script)\n      $script.setAttribute('src', path)\n    }\n    setTimeout(function() {\n      loadScript('./ins.js')\n    }, 0)\n  })()\n</script>\n","site":{"data":{}},"excerpt":"","more":"<link rel=\"stylesheet\" href=\"./ins.css\">\n<div class=\"photos-btn-wrap\">\n\t<a class=\"photos-btn active\" href=\"javascript:void(0)\" target=\"_blank\" rel=\"noopener\">photo</a>\n\t<!-- <a class=\"photos-btn\" target=\"_blank\" href=\"http://litten.me/gallery/\">摄影</a> -->\n\n\n</div>\n<div class=\"instagram itemscope\">\n\t<a href=\"https://www.instagram.com/litten225/\" target=\"_blank\" class=\"open-ins\">Waiting…</a>\n</div>\n<script>\n  (function() {\n    var loadScript = function(path) {\n      var $script = document.createElement('script')\n      document.getElementsByTagName('body')[0].appendChild($script)\n      $script.setAttribute('src', path)\n    }\n    setTimeout(function() {\n      loadScript('./ins.js')\n    }, 0)\n  })()\n</script>\n"},{"_content":"#post-instagram{\n\tpadding: 30px;\n}\n#post-instagram .article-entry{\n\tpadding-right: 0;\n}\n.instagram{\n\tposition: relative;\n\tmin-height: 500px;\n}\n.instagram img {\n\twidth: 100%;\n}\n.instagram .year {\n\tfont-size: 16px;\n}\n.instagram .open-ins{\n\tpadding: 10px 0;\n\tcolor: #cdcdcd;\n}\n.instagram .open-ins:hover{\n\tcolor: #657b83;\n}\n.instagram .year{\n\tdisplay: inline;\n}\n.instagram .thumb {\n\twidth: 25%;\n\theight: 0;\n\tpadding-bottom: 25%;\n\tposition: relative;\n\tdisplay: inline-block;\n\ttext-align: center;\n\tbackground: #ededed;\n}\n.instagram .thumb a {\n\tposition: relative;\n}\n.instagram .album h1 em{\n\tfont-style: normal;\n\tfont-size: 14px;\n\tmargin-left: 10px;\n}\n.instagram .album ul{\n\tdisplay: flex;\n\tflex-wrap: wrap;\n\tclear: both;\n\twidth: 100%;\n\ttext-align: left;\n}\n.instagram .album li{\n\tlist-style: none;\n\tdisplay: inline-block;\n\tbox-sizing: border-box;\n\tpadding: 0 5px;\n\tmargin-bottom: -10px;\n\theight: 0;\n\twidth: 25%;\n\tposition: relative;\n\tpadding-bottom: 25%;\n}\n.instagram .album li:before{\n\tdisplay: none;\n}\n.instagram .album div.img-box{\n\tposition: absolute;\n\twidth: 90%;\n\theight: 90%;\n\t-webkit-box-shadow: 0 1px 0 rgba(255,255,255,0.4), 0 1px 0 1px rgba(255,255,255,0.1);\n\t-moz-box-shadow: 0 1px 0 rgba(255,255,255,0.4), 0 1px 0 1px rgba(255,255,255,0.1);\n\tbox-shadow: 0 1px 0 rgba(255,255,255,0.4), 0 1px 0 1px rgba(255,255,255,0.1);\n}\n.instagram .album div.img-box img{\n\twidth: 100%;\n\theight: 100%;\n    position: absolute;\n    z-index: 2;\n}\n.instagram .album div.img-box .img-bg{\n\tposition: absolute;\n\ttop: 0;\n\tleft: 0;\n\tbottom: 0px;\n\twidth: 100%;\n\tmargin: -5px;\n\tpadding: 5px;\n\t-webkit-box-shadow: 0 0 0 1px rgba(0,0,0,.04), 0 1px 5px rgba(0,0,0,0.1);\n\t-moz-box-shadow: 0 0 0 1px rgba(0,0,0,.04), 0 1px 5px rgba(0,0,0,0.1);\n\tbox-shadow: 0 0 0 1px rgba(0,0,0,.04), 0 1px 5px rgba(0,0,0,0.1);\n\t-webkit-transition: all 0.15s ease-out 0.1s;\n\t-moz-transition: all 0.15s ease-out 0.1s;\n\t-o-transition: all 0.15s ease-out 0.1s;\n\ttransition: all 0.15s ease-out 0.1s;\n\topacity: 0.2;\n\tcursor: pointer;\n\tdisplay: block;\n\tz-index: 3;\n}\n.instagram .album div.img-box .icon {\n    font-size: 14px;\n    position: absolute;\n    left: 50%;\n    top: 50%;\n    margin-left: -7px;\n    margin-top: -7px;\n    color: #999;\n    z-index: 1;\n}\n.instagram .album div.img-box .img-bg:hover{\n\topacity: 0;\n}\n.photos-btn-wrap {\n\tborder-bottom: 1px solid #e5e5e5;\n\tmargin-bottom: 20px;\n}\n.photos-btn {\n\tfont-size: 16px;\n\tcolor: #333;\n\tmargin-bottom: -4px;\n\tpadding: 5px 8px 3px;\n}\n.photos-btn.active {\n\tcolor: #08c;\n\tborder: 1px solid #e5e5e5;\n\tborder-bottom: 5px solid #fff;\n}\n\n@media screen and (max-width:600px) {\n\t.instagram .thumb {\n\t\twidth: 50%;\n\t\tpadding-bottom: 50%;\n\t}\n\t.instagram .album li {\n\t\twidth: 100%;\n\t\tposition: relative;\n\t\tpadding-bottom: 100%;\n\t\ttext-align: center;\n\t}\n\t.instagram .album div.img-box{\n\t\tmargin: 0;\n\t\twidth: 90%;\n\t\theight: 90%;\n\t}\n}","source":"photos/ins.css","raw":"#post-instagram{\n\tpadding: 30px;\n}\n#post-instagram .article-entry{\n\tpadding-right: 0;\n}\n.instagram{\n\tposition: relative;\n\tmin-height: 500px;\n}\n.instagram img {\n\twidth: 100%;\n}\n.instagram .year {\n\tfont-size: 16px;\n}\n.instagram .open-ins{\n\tpadding: 10px 0;\n\tcolor: #cdcdcd;\n}\n.instagram .open-ins:hover{\n\tcolor: #657b83;\n}\n.instagram .year{\n\tdisplay: inline;\n}\n.instagram .thumb {\n\twidth: 25%;\n\theight: 0;\n\tpadding-bottom: 25%;\n\tposition: relative;\n\tdisplay: inline-block;\n\ttext-align: center;\n\tbackground: #ededed;\n}\n.instagram .thumb a {\n\tposition: relative;\n}\n.instagram .album h1 em{\n\tfont-style: normal;\n\tfont-size: 14px;\n\tmargin-left: 10px;\n}\n.instagram .album ul{\n\tdisplay: flex;\n\tflex-wrap: wrap;\n\tclear: both;\n\twidth: 100%;\n\ttext-align: left;\n}\n.instagram .album li{\n\tlist-style: none;\n\tdisplay: inline-block;\n\tbox-sizing: border-box;\n\tpadding: 0 5px;\n\tmargin-bottom: -10px;\n\theight: 0;\n\twidth: 25%;\n\tposition: relative;\n\tpadding-bottom: 25%;\n}\n.instagram .album li:before{\n\tdisplay: none;\n}\n.instagram .album div.img-box{\n\tposition: absolute;\n\twidth: 90%;\n\theight: 90%;\n\t-webkit-box-shadow: 0 1px 0 rgba(255,255,255,0.4), 0 1px 0 1px rgba(255,255,255,0.1);\n\t-moz-box-shadow: 0 1px 0 rgba(255,255,255,0.4), 0 1px 0 1px rgba(255,255,255,0.1);\n\tbox-shadow: 0 1px 0 rgba(255,255,255,0.4), 0 1px 0 1px rgba(255,255,255,0.1);\n}\n.instagram .album div.img-box img{\n\twidth: 100%;\n\theight: 100%;\n    position: absolute;\n    z-index: 2;\n}\n.instagram .album div.img-box .img-bg{\n\tposition: absolute;\n\ttop: 0;\n\tleft: 0;\n\tbottom: 0px;\n\twidth: 100%;\n\tmargin: -5px;\n\tpadding: 5px;\n\t-webkit-box-shadow: 0 0 0 1px rgba(0,0,0,.04), 0 1px 5px rgba(0,0,0,0.1);\n\t-moz-box-shadow: 0 0 0 1px rgba(0,0,0,.04), 0 1px 5px rgba(0,0,0,0.1);\n\tbox-shadow: 0 0 0 1px rgba(0,0,0,.04), 0 1px 5px rgba(0,0,0,0.1);\n\t-webkit-transition: all 0.15s ease-out 0.1s;\n\t-moz-transition: all 0.15s ease-out 0.1s;\n\t-o-transition: all 0.15s ease-out 0.1s;\n\ttransition: all 0.15s ease-out 0.1s;\n\topacity: 0.2;\n\tcursor: pointer;\n\tdisplay: block;\n\tz-index: 3;\n}\n.instagram .album div.img-box .icon {\n    font-size: 14px;\n    position: absolute;\n    left: 50%;\n    top: 50%;\n    margin-left: -7px;\n    margin-top: -7px;\n    color: #999;\n    z-index: 1;\n}\n.instagram .album div.img-box .img-bg:hover{\n\topacity: 0;\n}\n.photos-btn-wrap {\n\tborder-bottom: 1px solid #e5e5e5;\n\tmargin-bottom: 20px;\n}\n.photos-btn {\n\tfont-size: 16px;\n\tcolor: #333;\n\tmargin-bottom: -4px;\n\tpadding: 5px 8px 3px;\n}\n.photos-btn.active {\n\tcolor: #08c;\n\tborder: 1px solid #e5e5e5;\n\tborder-bottom: 5px solid #fff;\n}\n\n@media screen and (max-width:600px) {\n\t.instagram .thumb {\n\t\twidth: 50%;\n\t\tpadding-bottom: 50%;\n\t}\n\t.instagram .album li {\n\t\twidth: 100%;\n\t\tposition: relative;\n\t\tpadding-bottom: 100%;\n\t\ttext-align: center;\n\t}\n\t.instagram .album div.img-box{\n\t\tmargin: 0;\n\t\twidth: 90%;\n\t\theight: 90%;\n\t}\n}","date":"2018-10-09T14:46:46.084Z","updated":"2017-07-28T03:51:08.000Z","path":"photos/ins.css","layout":"false","title":"","comments":1,"_id":"cjskls62k0004745bbhqnau2k","content":"#post-instagram{\n\tpadding: 30px;\n}\n#post-instagram .article-entry{\n\tpadding-right: 0;\n}\n.instagram{\n\tposition: relative;\n\tmin-height: 500px;\n}\n.instagram img {\n\twidth: 100%;\n}\n.instagram .year {\n\tfont-size: 16px;\n}\n.instagram .open-ins{\n\tpadding: 10px 0;\n\tcolor: #cdcdcd;\n}\n.instagram .open-ins:hover{\n\tcolor: #657b83;\n}\n.instagram .year{\n\tdisplay: inline;\n}\n.instagram .thumb {\n\twidth: 25%;\n\theight: 0;\n\tpadding-bottom: 25%;\n\tposition: relative;\n\tdisplay: inline-block;\n\ttext-align: center;\n\tbackground: #ededed;\n}\n.instagram .thumb a {\n\tposition: relative;\n}\n.instagram .album h1 em{\n\tfont-style: normal;\n\tfont-size: 14px;\n\tmargin-left: 10px;\n}\n.instagram .album ul{\n\tdisplay: flex;\n\tflex-wrap: wrap;\n\tclear: both;\n\twidth: 100%;\n\ttext-align: left;\n}\n.instagram .album li{\n\tlist-style: none;\n\tdisplay: inline-block;\n\tbox-sizing: border-box;\n\tpadding: 0 5px;\n\tmargin-bottom: -10px;\n\theight: 0;\n\twidth: 25%;\n\tposition: relative;\n\tpadding-bottom: 25%;\n}\n.instagram .album li:before{\n\tdisplay: none;\n}\n.instagram .album div.img-box{\n\tposition: absolute;\n\twidth: 90%;\n\theight: 90%;\n\t-webkit-box-shadow: 0 1px 0 rgba(255,255,255,0.4), 0 1px 0 1px rgba(255,255,255,0.1);\n\t-moz-box-shadow: 0 1px 0 rgba(255,255,255,0.4), 0 1px 0 1px rgba(255,255,255,0.1);\n\tbox-shadow: 0 1px 0 rgba(255,255,255,0.4), 0 1px 0 1px rgba(255,255,255,0.1);\n}\n.instagram .album div.img-box img{\n\twidth: 100%;\n\theight: 100%;\n    position: absolute;\n    z-index: 2;\n}\n.instagram .album div.img-box .img-bg{\n\tposition: absolute;\n\ttop: 0;\n\tleft: 0;\n\tbottom: 0px;\n\twidth: 100%;\n\tmargin: -5px;\n\tpadding: 5px;\n\t-webkit-box-shadow: 0 0 0 1px rgba(0,0,0,.04), 0 1px 5px rgba(0,0,0,0.1);\n\t-moz-box-shadow: 0 0 0 1px rgba(0,0,0,.04), 0 1px 5px rgba(0,0,0,0.1);\n\tbox-shadow: 0 0 0 1px rgba(0,0,0,.04), 0 1px 5px rgba(0,0,0,0.1);\n\t-webkit-transition: all 0.15s ease-out 0.1s;\n\t-moz-transition: all 0.15s ease-out 0.1s;\n\t-o-transition: all 0.15s ease-out 0.1s;\n\ttransition: all 0.15s ease-out 0.1s;\n\topacity: 0.2;\n\tcursor: pointer;\n\tdisplay: block;\n\tz-index: 3;\n}\n.instagram .album div.img-box .icon {\n    font-size: 14px;\n    position: absolute;\n    left: 50%;\n    top: 50%;\n    margin-left: -7px;\n    margin-top: -7px;\n    color: #999;\n    z-index: 1;\n}\n.instagram .album div.img-box .img-bg:hover{\n\topacity: 0;\n}\n.photos-btn-wrap {\n\tborder-bottom: 1px solid #e5e5e5;\n\tmargin-bottom: 20px;\n}\n.photos-btn {\n\tfont-size: 16px;\n\tcolor: #333;\n\tmargin-bottom: -4px;\n\tpadding: 5px 8px 3px;\n}\n.photos-btn.active {\n\tcolor: #08c;\n\tborder: 1px solid #e5e5e5;\n\tborder-bottom: 5px solid #fff;\n}\n\n@media screen and (max-width:600px) {\n\t.instagram .thumb {\n\t\twidth: 50%;\n\t\tpadding-bottom: 50%;\n\t}\n\t.instagram .album li {\n\t\twidth: 100%;\n\t\tposition: relative;\n\t\tpadding-bottom: 100%;\n\t\ttext-align: center;\n\t}\n\t.instagram .album div.img-box{\n\t\tmargin: 0;\n\t\twidth: 90%;\n\t\theight: 90%;\n\t}\n}","site":{"data":{}},"excerpt":"","more":"#post-instagram{\n\tpadding: 30px;\n}\n#post-instagram .article-entry{\n\tpadding-right: 0;\n}\n.instagram{\n\tposition: relative;\n\tmin-height: 500px;\n}\n.instagram img {\n\twidth: 100%;\n}\n.instagram .year {\n\tfont-size: 16px;\n}\n.instagram .open-ins{\n\tpadding: 10px 0;\n\tcolor: #cdcdcd;\n}\n.instagram .open-ins:hover{\n\tcolor: #657b83;\n}\n.instagram .year{\n\tdisplay: inline;\n}\n.instagram .thumb {\n\twidth: 25%;\n\theight: 0;\n\tpadding-bottom: 25%;\n\tposition: relative;\n\tdisplay: inline-block;\n\ttext-align: center;\n\tbackground: #ededed;\n}\n.instagram .thumb a {\n\tposition: relative;\n}\n.instagram .album h1 em{\n\tfont-style: normal;\n\tfont-size: 14px;\n\tmargin-left: 10px;\n}\n.instagram .album ul{\n\tdisplay: flex;\n\tflex-wrap: wrap;\n\tclear: both;\n\twidth: 100%;\n\ttext-align: left;\n}\n.instagram .album li{\n\tlist-style: none;\n\tdisplay: inline-block;\n\tbox-sizing: border-box;\n\tpadding: 0 5px;\n\tmargin-bottom: -10px;\n\theight: 0;\n\twidth: 25%;\n\tposition: relative;\n\tpadding-bottom: 25%;\n}\n.instagram .album li:before{\n\tdisplay: none;\n}\n.instagram .album div.img-box{\n\tposition: absolute;\n\twidth: 90%;\n\theight: 90%;\n\t-webkit-box-shadow: 0 1px 0 rgba(255,255,255,0.4), 0 1px 0 1px rgba(255,255,255,0.1);\n\t-moz-box-shadow: 0 1px 0 rgba(255,255,255,0.4), 0 1px 0 1px rgba(255,255,255,0.1);\n\tbox-shadow: 0 1px 0 rgba(255,255,255,0.4), 0 1px 0 1px rgba(255,255,255,0.1);\n}\n.instagram .album div.img-box img{\n\twidth: 100%;\n\theight: 100%;\n    position: absolute;\n    z-index: 2;\n}\n.instagram .album div.img-box .img-bg{\n\tposition: absolute;\n\ttop: 0;\n\tleft: 0;\n\tbottom: 0px;\n\twidth: 100%;\n\tmargin: -5px;\n\tpadding: 5px;\n\t-webkit-box-shadow: 0 0 0 1px rgba(0,0,0,.04), 0 1px 5px rgba(0,0,0,0.1);\n\t-moz-box-shadow: 0 0 0 1px rgba(0,0,0,.04), 0 1px 5px rgba(0,0,0,0.1);\n\tbox-shadow: 0 0 0 1px rgba(0,0,0,.04), 0 1px 5px rgba(0,0,0,0.1);\n\t-webkit-transition: all 0.15s ease-out 0.1s;\n\t-moz-transition: all 0.15s ease-out 0.1s;\n\t-o-transition: all 0.15s ease-out 0.1s;\n\ttransition: all 0.15s ease-out 0.1s;\n\topacity: 0.2;\n\tcursor: pointer;\n\tdisplay: block;\n\tz-index: 3;\n}\n.instagram .album div.img-box .icon {\n    font-size: 14px;\n    position: absolute;\n    left: 50%;\n    top: 50%;\n    margin-left: -7px;\n    margin-top: -7px;\n    color: #999;\n    z-index: 1;\n}\n.instagram .album div.img-box .img-bg:hover{\n\topacity: 0;\n}\n.photos-btn-wrap {\n\tborder-bottom: 1px solid #e5e5e5;\n\tmargin-bottom: 20px;\n}\n.photos-btn {\n\tfont-size: 16px;\n\tcolor: #333;\n\tmargin-bottom: -4px;\n\tpadding: 5px 8px 3px;\n}\n.photos-btn.active {\n\tcolor: #08c;\n\tborder: 1px solid #e5e5e5;\n\tborder-bottom: 5px solid #fff;\n}\n\n@media screen and (max-width:600px) {\n\t.instagram .thumb {\n\t\twidth: 50%;\n\t\tpadding-bottom: 50%;\n\t}\n\t.instagram .album li {\n\t\twidth: 100%;\n\t\tposition: relative;\n\t\tpadding-bottom: 100%;\n\t\ttext-align: center;\n\t}\n\t.instagram .album div.img-box{\n\t\tmargin: 0;\n\t\twidth: 90%;\n\t\theight: 90%;\n\t}\n}"},{"_content":"/******/\n(function(modules) { // webpackBootstrap\n  /******/ // The module cache\n  /******/\n  var installedModules = {};\n  /******/\n  /******/ // The require function\n  /******/\n  function __webpack_require__(moduleId) {\n    /******/\n    /******/ // Check if module is in cache\n    /******/\n    if (installedModules[moduleId])\n    /******/\n      return installedModules[moduleId].exports;\n    /******/\n    /******/ // Create a new module (and put it into the cache)\n    /******/\n    var module = installedModules[moduleId] = {\n      /******/\n      exports: {},\n      /******/\n      id: moduleId,\n      /******/\n      loaded: false\n        /******/\n    };\n    /******/\n    /******/ // Execute the module function\n    /******/\n    modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n    /******/\n    /******/ // Flag the module as loaded\n    /******/\n    module.loaded = true;\n    /******/\n    /******/ // Return the exports of the module\n    /******/\n    return module.exports;\n    /******/\n  }\n  /******/\n  /******/\n  /******/ // expose the modules object (__webpack_modules__)\n  /******/\n  __webpack_require__.m = modules;\n  /******/\n  /******/ // expose the module cache\n  /******/\n  __webpack_require__.c = installedModules;\n  /******/\n  /******/ // __webpack_public_path__\n  /******/\n  __webpack_require__.p = \"/dist/\";\n  /******/\n  /******/ // Load entry module and return exports\n  /******/\n  return __webpack_require__(0);\n  /******/\n})\n/************************************************************************/\n/******/\n([\n  /* 0 */\n  /***/\n  function(module, exports, __webpack_require__) {\n\n    'use strict';\n\n    __webpack_require__(1);\n\n    var _view = __webpack_require__(2);\n\n    var _view2 = _interopRequireDefault(_view);\n\n    function _interopRequireDefault(obj) {\n      return obj && obj.__esModule ? obj : {\n        default: obj\n      };\n    }\n\n    /**\n     * @name impush-client \n     * @description 这个项目让我发家致富…\n     * @date 2016-12-1\n     */\n\n    var _collection = [];\n    var _count = 0;\n    var searchData;\n\n    function addMask(elem) {\n      var rect = elem.getBoundingClientRect();\n      var style = getComputedStyle(elem, null);\n\n      var mask = document.createElement('i');\n      mask.className = 'icon-film';\n      mask.style.color = '#fff';\n      mask.style.fontSize = '26px';\n      mask.style.position = 'absolute';\n      mask.style.right = '10px';\n      mask.style.bottom = '10px';\n      mask.style.zIndex = 1;\n      elem.parentNode.appendChild(mask);\n    }\n\n    var createVideoIncon = function createVideoIncon() {\n      var $videoImg = document.querySelectorAll('.thumb a[data-type=\"video\"]');\n      for (var i = 0, len = $videoImg.length; i < len; i++) {\n        addMask($videoImg[i]);\n      }\n    };\n    var render = function render(res) {\n      var ulTmpl = \"\";\n      for (var j = 0, len2 = res.list.length; j < len2; j++) {\n        var data = res.list[j].arr;\n        var liTmpl = \"\";\n        for (var i = 0, len = data.link.length; i < len; i++) {\n          var minSrc = 'http://tupelo.top/ins-min/' + data.link[i] + '.jpg';\n          var src = 'http://tupelo.top/ins/' + data.link[i];\n          var type = data.type[i];\n          var target = src + (type === 'video' ? '.mp4' : '.jpg');\n          src += '.jpg';\n\n          liTmpl += '<figure class=\"thumb\" itemprop=\"associatedMedia\" itemscope=\"\" itemtype=\"http://schema.org/ImageObject\">\\\n                <a href=\"' + src + '\" itemprop=\"contentUrl\" data-size=\"640x640\" data-type=\"' + type + '\" data-target=\"' + target + '\">\\\n                  <img class=\"reward-img\" data-type=\"' + type + '\" data-src=\"' + minSrc + '\" src=\"http://tupelo.top/ins/default.jpg\" itemprop=\"thumbnail\" onload=\"lzld(this)\">\\\n                </a>\\\n                <figcaption style=\"display:none\" itemprop=\"caption description\">' + data.text[i] + '</figcaption>\\\n            </figure>';\n        }\n        ulTmpl = ulTmpl + '<section class=\"archives album\"><h1 class=\"year\">' + data.year + '<em>' + data.month + '月</em></h1>\\\n        <ul class=\"img-box-ul\">' + liTmpl + '</ul>\\\n        </section>';\n      }\n      document.querySelector('.instagram').innerHTML = '<div class=\"photos\" itemscope=\"\" itemtype=\"http://schema.org/ImageGallery\">' + ulTmpl + '</div>';\n      createVideoIncon();\n      _view2.default.init();\n    };\n\n    var replacer = function replacer(str) {\n      var arr = str.split(\"/\");\n      return \"/assets/ins/\" + arr[arr.length - 1];\n    };\n\n    var ctrler = function ctrler(data) {\n      var imgObj = {};\n      for (var i = 0, len = data.length; i < len; i++) {\n        var y = data[i].y;\n        var m = data[i].m;\n        var src = replacer(data[i].src);\n        var text = data[i].text;\n        var key = y + \"\" + ((m + \"\").length == 1 ? \"0\" + m : m);\n        if (imgObj[key]) {\n          imgObj[key].srclist.push(src);\n          imgObj[key].text.push(text);\n        } else {\n          imgObj[key] = {\n            year: y,\n            month: m,\n            srclist: [src],\n            text: [text]\n          };\n        }\n      }\n      render(imgObj);\n    };\n\n    function loadData(success) {\n      if (!searchData) {\n        var xhr = new XMLHttpRequest();\n        xhr.open('GET', './ins.json?t=' + +new Date(), true);\n\n        xhr.onload = function() {\n          if (this.status >= 200 && this.status < 300) {\n            var res = JSON.parse(this.response);\n            searchData = res;\n            success(searchData);\n          } else {\n            console.error(this.statusText);\n          }\n        };\n\n        xhr.onerror = function() {\n          console.error(this.statusText);\n        };\n\n        xhr.send();\n      } else {\n        success(searchData);\n      }\n    }\n\n    var Ins = {\n      init: function init() {\n        loadData(function(data) {\n          render(data);\n        });\n      }\n    };\n\n    Ins.init();\n\n    // export default impush;\n\n    /***/\n  },\n  /* 1 */\n  /***/\n  function(module, exports, __webpack_require__) {\n\n    /* WEBPACK VAR INJECTION */\n    (function(global) {\n      'use strict';\n\n      var inViewport = __webpack_require__(3);\n      var lazyAttrs = ['data-src'];\n\n      global.lzld = lazyload();\n\n      // Provide libs using getAttribute early to get the good src\n      // and not the fake data-src\n      replaceGetAttribute('Image');\n      replaceGetAttribute('IFrame');\n\n      function registerLazyAttr(attr) {\n        if (indexOf.call(lazyAttrs, attr) === -1) {\n          lazyAttrs.push(attr);\n        }\n      }\n\n      function lazyload(opts) {\n        opts = merge({\n          'offset': 333,\n          'src': 'data-src',\n          'container': false\n        }, opts || {});\n\n        if (typeof opts.src === 'string') {\n          registerLazyAttr(opts.src);\n        }\n\n        var elts = [];\n\n        function show(elt) {\n          var src = findRealSrc(elt);\n\n          if (src) {\n            elt.src = src;\n          }\n\n          elt.setAttribute('data-lzled', true);\n          elts[indexOf.call(elts, elt)] = null;\n        }\n\n        function findRealSrc(elt) {\n          if (typeof opts.src === 'function') {\n            return opts.src(elt);\n          }\n\n          return elt.getAttribute(opts.src);\n        }\n\n        function register(elt) {\n          elt.onload = null;\n          elt.removeAttribute('onload');\n          elt.onerror = null;\n          elt.removeAttribute('onerror');\n\n          if (indexOf.call(elts, elt) === -1) {\n            inViewport(elt, opts, show);\n          }\n        }\n\n        return register;\n      }\n\n      function replaceGetAttribute(elementName) {\n        var fullname = 'HTML' + elementName + 'Element';\n        if (fullname in global === false) {\n          return;\n        }\n\n        var original = global[fullname].prototype.getAttribute;\n        global[fullname].prototype.getAttribute = function(name) {\n          if (name === 'src') {\n            var realSrc;\n            for (var i = 0, max = lazyAttrs.length; i < max; i++) {\n              realSrc = original.call(this, lazyAttrs[i]);\n              if (realSrc) {\n                break;\n              }\n            }\n\n            return realSrc || original.call(this, name);\n          }\n\n          // our own lazyloader will go through theses lines\n          // because we use getAttribute(opts.src)\n          return original.call(this, name);\n        };\n      }\n\n      function merge(defaults, opts) {\n        for (var name in defaults) {\n          if (opts[name] === undefined) {\n            opts[name] = defaults[name];\n          }\n        }\n\n        return opts;\n      }\n\n      // http://webreflection.blogspot.fr/2011/06/partial-polyfills.html\n      function indexOf(value) {\n        for (var i = this.length; i-- && this[i] !== value;) {}\n        return i;\n      }\n\n      module.exports = lazyload;\n\n      // export default impush;\n      /* WEBPACK VAR INJECTION */\n    }.call(exports, (function() {\n      return this;\n    }())))\n\n    /***/\n  },\n  /* 2 */\n  /***/\n  function(module, exports) {\n\n    'use strict';\n\n    var initPhotoSwipeFromDOM = function initPhotoSwipeFromDOM(gallerySelector) {\n\n      // parse slide data (url, title, size ...) from DOM elements \n      // (children of gallerySelector)\n      var parseThumbnailElements = function parseThumbnailElements(el) {\n        el = el.parentNode.parentNode;\n        var thumbElements = el.getElementsByClassName('thumb'),\n          numNodes = thumbElements.length,\n          items = [],\n          figureEl,\n          linkEl,\n          size,\n          type,\n          // video or not\n          target,\n          item;\n\n        for (var i = 0; i < numNodes; i++) {\n\n          figureEl = thumbElements[i]; // \n\n          // include only element nodes \n          if (figureEl.nodeType !== 1) {\n            continue;\n          }\n\n          linkEl = figureEl.children[0]; // \n\n          size = linkEl.getAttribute('data-size').split('x');\n          type = linkEl.getAttribute('data-type');\n          target = linkEl.getAttribute('data-target');\n          // create slide object\n          item = {\n            src: linkEl.getAttribute('href'),\n            w: parseInt(size[0], 10),\n            h: parseInt(size[1], 10)\n          };\n\n          if (figureEl.children.length > 1) {\n            item.title = figureEl.children[1].innerHTML;\n          }\n\n          if (linkEl.children.length > 0) {\n            item.msrc = linkEl.children[0].getAttribute('src');\n            item.type = type;\n            item.target = target;\n            item.html = '<video src=\"' + target + '\" controls=\"controls\" autoplay=\"autoplay\"></video>';\n            if (type === 'video') {\n              //item.src = null;\n            }\n          }\n\n          item.el = figureEl; // save link to element for getThumbBoundsFn\n          items.push(item);\n        }\n\n        return items;\n      };\n\n      // find nearest parent element\n      var closest = function closest(el, fn) {\n        return el && (fn(el) ? el : closest(el.parentNode, fn));\n      };\n\n      // triggers when user clicks on thumbnail\n      var onThumbnailsClick = function onThumbnailsClick(e) {\n        e = e || window.event;\n        e.preventDefault ? e.preventDefault() : e.returnValue = false;\n\n        var eTarget = e.target || e.srcElement;\n\n        // find root element of slide\n        var clickedListItem = closest(eTarget, function(el) {\n          return el.tagName && el.tagName.toUpperCase() === 'FIGURE';\n        });\n\n        if (!clickedListItem) {\n          return;\n        }\n\n        // find index of clicked item by looping through all child nodes\n        // alternatively, you may define index via data- attribute\n        var clickedGallery = clickedListItem.parentNode,\n\n          // childNodes = clickedListItem.parentNode.childNodes,\n          // numChildNodes = childNodes.length,\n          childNodes = document.getElementsByClassName('thumb'),\n          numChildNodes = childNodes.length,\n          nodeIndex = 0,\n          index;\n\n        for (var i = 0; i < numChildNodes; i++) {\n          if (childNodes[i].nodeType !== 1) {\n            continue;\n          }\n\n          if (childNodes[i] === clickedListItem) {\n            index = nodeIndex;\n            break;\n          }\n          nodeIndex++;\n        }\n\n        if (index >= 0) {\n          // open PhotoSwipe if valid index found\n          openPhotoSwipe(index, clickedGallery);\n        }\n        return false;\n      };\n\n      // parse picture index and gallery index from URL (#&pid=1&gid=2)\n      var photoswipeParseHash = function photoswipeParseHash() {\n        var hash = window.location.hash.substring(1),\n          params = {};\n\n        if (hash.length < 5) {\n          return params;\n        }\n\n        var vars = hash.split('&');\n        for (var i = 0; i < vars.length; i++) {\n          if (!vars[i]) {\n            continue;\n          }\n          var pair = vars[i].split('=');\n          if (pair.length < 2) {\n            continue;\n          }\n          params[pair[0]] = pair[1];\n        }\n\n        if (params.gid) {\n          params.gid = parseInt(params.gid, 10);\n        }\n\n        return params;\n      };\n\n      var openPhotoSwipe = function openPhotoSwipe(index, galleryElement, disableAnimation, fromURL) {\n        var pswpElement = document.querySelectorAll('.pswp')[0],\n          gallery,\n          options,\n          items;\n\n        items = parseThumbnailElements(galleryElement);\n        // define options (if needed)\n        options = {\n\n          // define gallery index (for URL)\n          galleryUID: galleryElement.getAttribute('data-pswp-uid'),\n\n          getThumbBoundsFn: function getThumbBoundsFn(index) {\n            // See Options -> getThumbBoundsFn section of documentation for more info\n            var thumbnail = items[index].el.getElementsByTagName('img')[0],\n              // find thumbnail\n              pageYScroll = window.pageYOffset || document.documentElement.scrollTop,\n              rect = thumbnail.getBoundingClientRect();\n\n            return {\n              x: rect.left,\n              y: rect.top + pageYScroll,\n              w: rect.width\n            };\n          }\n\n        };\n\n        // PhotoSwipe opened from URL\n        if (fromURL) {\n          if (options.galleryPIDs) {\n            // parse real index when custom PIDs are used \n            // http://photoswipe.com/documentation/faq.html#custom-pid-in-url\n            for (var j = 0; j < items.length; j++) {\n              if (items[j].pid == index) {\n                options.index = j;\n                break;\n              }\n            }\n          } else {\n            // in URL indexes start from 1\n            options.index = parseInt(index, 10) - 1;\n          }\n        } else {\n          options.index = parseInt(index, 10);\n        }\n\n        // exit if index not found\n        if (isNaN(options.index)) {\n          return;\n        }\n\n        if (disableAnimation) {\n          options.showAnimationDuration = 0;\n        }\n\n        // Pass data to PhotoSwipe and initialize it\n        gallery = new PhotoSwipe(pswpElement, PhotoSwipeUI_Default, items, options);\n        gallery.init();\n\n        var $tempVideo;\n        var stopVideoHandle = function stopVideoHandle() {\n          if ($tempVideo) {\n            $tempVideo.remove();\n            $tempVideo = null;\n          }\n        };\n        var changeHandle = function changeHandle() {\n          var item = gallery.currItem;\n          stopVideoHandle();\n          if (item.type === 'video') {\n            var $ctn = item.container;\n            var style = $ctn.getElementsByClassName('pswp__img')[0].style;\n            var $video = document.createElement('video');\n            $video.setAttribute('autoplay', 'autoplay');\n            $video.setAttribute('controls', 'controls');\n            $video.setAttribute('src', item.target);\n            $video.style.width = style.width;\n            $video.style.height = style.height;\n            $video.style.position = 'absolute';\n            $video.style.zIndex = 2;\n            $tempVideo = $video;\n            $ctn.appendChild($video);\n          }\n        };\n        gallery.listen('initialZoomIn', changeHandle);\n        gallery.listen('afterChange', changeHandle);\n        gallery.listen('initialZoomOut', stopVideoHandle);\n      };\n\n      // loop through all gallery elements and bind events\n      var galleryElements = document.querySelectorAll(gallerySelector);\n      for (var i = 0, l = galleryElements.length; i < l; i++) {\n        galleryElements[i].setAttribute('data-pswp-uid', i + 1);\n        galleryElements[i].onclick = onThumbnailsClick;\n      }\n\n      // Parse URL and open gallery if it contains #&pid=3&gid=1\n      var hashData = photoswipeParseHash();\n      if (hashData.pid && hashData.gid) {\n        openPhotoSwipe(hashData.pid, galleryElements[hashData.gid - 1], true, true);\n      }\n    };\n\n    var Viewer = function() {\n      function init() {\n        initPhotoSwipeFromDOM('.photos');\n      }\n      return {\n        init: init\n      };\n    }();\n\n    module.exports = Viewer;\n\n    /***/\n  },\n  /* 3 */\n  /***/\n  function(module, exports) {\n\n    /* WEBPACK VAR INJECTION */\n    (function(global) {\n      module.exports = inViewport;\n\n      var instances = [];\n      var supportsMutationObserver = typeof global.MutationObserver === 'function';\n\n      function inViewport(elt, params, cb) {\n        var opts = {\n          container: global.document.body,\n          offset: 0\n        };\n\n        if (params === undefined || typeof params === 'function') {\n          cb = params;\n          params = {};\n        }\n\n        var container = opts.container = params.container || opts.container;\n        var offset = opts.offset = params.offset || opts.offset;\n\n        for (var i = 0; i < instances.length; i++) {\n          if (instances[i].container === container) {\n            return instances[i].isInViewport(elt, offset, cb);\n          }\n        }\n\n        return instances[\n          instances.push(createInViewport(container)) - 1\n        ].isInViewport(elt, offset, cb);\n      }\n\n      function addEvent(el, type, fn) {\n        if (el.attachEvent) {\n          el.attachEvent('on' + type, fn);\n        } else {\n          el.addEventListener(type, fn, false);\n        }\n      }\n\n      function debounce(func, wait, immediate) {\n        var timeout;\n        return function() {\n          var context = this,\n            args = arguments;\n          var callNow = immediate && !timeout;\n          clearTimeout(timeout);\n          timeout = setTimeout(later, wait);\n          if (callNow) func.apply(context, args);\n\n          function later() {\n            timeout = null;\n            if (!immediate) func.apply(context, args);\n          }\n        };\n      }\n\n      // https://github.com/jquery/sizzle/blob/3136f48b90e3edc84cbaaa6f6f7734ef03775a07/sizzle.js#L708\n      var contains = function() {\n        if (!global.document) {\n          return true;\n        }\n        return global.document.documentElement.compareDocumentPosition ?\n          function(a, b) {\n            return !!(a.compareDocumentPosition(b) & 16);\n          } :\n          global.document.documentElement.contains ?\n          function(a, b) {\n            return a !== b && (a.contains ? a.contains(b) : false);\n          } :\n          function(a, b) {\n            while (b = b.parentNode) {\n              if (b === a) {\n                return true;\n              }\n            }\n            return false;\n          };\n      }\n\n      function createInViewport(container) {\n        var watches = createWatches();\n\n        var scrollContainer = container === global.document.body ? global : container;\n        var debouncedCheck = debounce(watches.checkAll(watchInViewport), 15);\n\n        addEvent(scrollContainer, 'scroll', debouncedCheck);\n\n        if (scrollContainer === global) {\n          addEvent(global, 'resize', debouncedCheck);\n        }\n\n        if (supportsMutationObserver) {\n          observeDOM(watches, container, debouncedCheck);\n        }\n\n        // failsafe check, every 200ms we check for visible images\n        // usecase: a hidden parent containing eleements\n        // when the parent becomes visible, we have no event that the children\n        // became visible\n        setInterval(debouncedCheck, 150);\n\n        function isInViewport(elt, offset, cb) {\n          if (!cb) {\n            return isVisible(elt, offset);\n          }\n\n          var remote = createRemote(elt, offset, cb);\n          remote.watch();\n          return remote;\n        }\n\n        function createRemote(elt, offset, cb) {\n          function watch() {\n            watches.add(elt, offset, cb);\n          }\n\n          function dispose() {\n            watches.remove(elt);\n          }\n\n          return {\n            watch: watch,\n            dispose: dispose\n          };\n        }\n\n        function watchInViewport(elt, offset, cb) {\n          if (isVisible(elt, offset)) {\n            watches.remove(elt);\n            cb(elt);\n          }\n        }\n\n        function isVisible(elt, offset) {\n          if (!contains(global.document.documentElement, elt) || !contains(global.document.documentElement, container)) {\n            return false;\n          }\n\n          // Check if the element is visible\n          // https://github.com/jquery/jquery/blob/740e190223d19a114d5373758127285d14d6b71e/src/css/hiddenVisibleSelectors.js\n          if (!elt.offsetWidth || !elt.offsetHeight) {\n            return false;\n          }\n\n          var eltRect = elt.getBoundingClientRect();\n          var viewport = {};\n\n          if (container === global.document.body) {\n            viewport = {\n              top: -offset,\n              left: -offset,\n              right: global.document.documentElement.clientWidth + offset,\n              bottom: global.document.documentElement.clientHeight + offset\n            };\n          } else {\n            var containerRect = container.getBoundingClientRect();\n            viewport = {\n              top: containerRect.top - offset,\n              left: containerRect.left - offset,\n              right: containerRect.right + offset,\n              bottom: containerRect.bottom + offset\n            };\n          }\n\n          // The element must overlap with the visible part of the viewport\n          var visible =\n            (\n              (eltRect.right > viewport.left) &&\n              (eltRect.left < viewport.right) &&\n              (eltRect.bottom > viewport.top) &&\n              (eltRect.top < viewport.bottom)\n            );\n\n          return visible;\n        }\n\n        return {\n          container: container,\n          isInViewport: isInViewport\n        };\n      }\n\n      function createWatches() {\n        var watches = [];\n\n        function add(elt, offset, cb) {\n          if (!isWatched(elt)) {\n            watches.push([elt, offset, cb]);\n          }\n        }\n\n        function remove(elt) {\n          var pos = indexOf(elt);\n          if (pos !== -1) {\n            watches.splice(pos, 1);\n          }\n        }\n\n        function indexOf(elt) {\n          for (var i = watches.length - 1; i >= 0; i--) {\n            if (watches[i][0] === elt) {\n              return i;\n            }\n          }\n          return -1;\n        }\n\n        function isWatched(elt) {\n          return indexOf(elt) !== -1;\n        }\n\n        function checkAll(cb) {\n          return function() {\n            for (var i = watches.length - 1; i >= 0; i--) {\n              cb.apply(this, watches[i]);\n            }\n          };\n        }\n\n        return {\n          add: add,\n          remove: remove,\n          isWatched: isWatched,\n          checkAll: checkAll\n        };\n      }\n\n      function observeDOM(watches, container, cb) {\n        var observer = new MutationObserver(watch);\n        var filter = Array.prototype.filter;\n        var concat = Array.prototype.concat;\n\n        observer.observe(container, {\n          childList: true,\n          subtree: true,\n          // changes like style/width/height/display will be catched\n          attributes: true\n        });\n\n        function watch(mutations) {\n          // some new DOM nodes where previously watched\n          // we should check their positions\n          if (mutations.some(knownNodes) === true) {\n            setTimeout(cb, 0);\n          }\n        }\n\n        function knownNodes(mutation) {\n          var nodes = concat.call([],\n            Array.prototype.slice.call(mutation.addedNodes),\n            mutation.target\n          );\n          return filter.call(nodes, watches.isWatched).length > 0;\n        }\n      }\n\n      /* WEBPACK VAR INJECTION */\n    }.call(exports, (function() {\n      return this;\n    }())))\n\n    /***/\n  }\n  /******/\n]);","source":"photos/ins.js","raw":"/******/\n(function(modules) { // webpackBootstrap\n  /******/ // The module cache\n  /******/\n  var installedModules = {};\n  /******/\n  /******/ // The require function\n  /******/\n  function __webpack_require__(moduleId) {\n    /******/\n    /******/ // Check if module is in cache\n    /******/\n    if (installedModules[moduleId])\n    /******/\n      return installedModules[moduleId].exports;\n    /******/\n    /******/ // Create a new module (and put it into the cache)\n    /******/\n    var module = installedModules[moduleId] = {\n      /******/\n      exports: {},\n      /******/\n      id: moduleId,\n      /******/\n      loaded: false\n        /******/\n    };\n    /******/\n    /******/ // Execute the module function\n    /******/\n    modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n    /******/\n    /******/ // Flag the module as loaded\n    /******/\n    module.loaded = true;\n    /******/\n    /******/ // Return the exports of the module\n    /******/\n    return module.exports;\n    /******/\n  }\n  /******/\n  /******/\n  /******/ // expose the modules object (__webpack_modules__)\n  /******/\n  __webpack_require__.m = modules;\n  /******/\n  /******/ // expose the module cache\n  /******/\n  __webpack_require__.c = installedModules;\n  /******/\n  /******/ // __webpack_public_path__\n  /******/\n  __webpack_require__.p = \"/dist/\";\n  /******/\n  /******/ // Load entry module and return exports\n  /******/\n  return __webpack_require__(0);\n  /******/\n})\n/************************************************************************/\n/******/\n([\n  /* 0 */\n  /***/\n  function(module, exports, __webpack_require__) {\n\n    'use strict';\n\n    __webpack_require__(1);\n\n    var _view = __webpack_require__(2);\n\n    var _view2 = _interopRequireDefault(_view);\n\n    function _interopRequireDefault(obj) {\n      return obj && obj.__esModule ? obj : {\n        default: obj\n      };\n    }\n\n    /**\n     * @name impush-client \n     * @description 这个项目让我发家致富…\n     * @date 2016-12-1\n     */\n\n    var _collection = [];\n    var _count = 0;\n    var searchData;\n\n    function addMask(elem) {\n      var rect = elem.getBoundingClientRect();\n      var style = getComputedStyle(elem, null);\n\n      var mask = document.createElement('i');\n      mask.className = 'icon-film';\n      mask.style.color = '#fff';\n      mask.style.fontSize = '26px';\n      mask.style.position = 'absolute';\n      mask.style.right = '10px';\n      mask.style.bottom = '10px';\n      mask.style.zIndex = 1;\n      elem.parentNode.appendChild(mask);\n    }\n\n    var createVideoIncon = function createVideoIncon() {\n      var $videoImg = document.querySelectorAll('.thumb a[data-type=\"video\"]');\n      for (var i = 0, len = $videoImg.length; i < len; i++) {\n        addMask($videoImg[i]);\n      }\n    };\n    var render = function render(res) {\n      var ulTmpl = \"\";\n      for (var j = 0, len2 = res.list.length; j < len2; j++) {\n        var data = res.list[j].arr;\n        var liTmpl = \"\";\n        for (var i = 0, len = data.link.length; i < len; i++) {\n          var minSrc = 'http://tupelo.top/ins-min/' + data.link[i] + '.jpg';\n          var src = 'http://tupelo.top/ins/' + data.link[i];\n          var type = data.type[i];\n          var target = src + (type === 'video' ? '.mp4' : '.jpg');\n          src += '.jpg';\n\n          liTmpl += '<figure class=\"thumb\" itemprop=\"associatedMedia\" itemscope=\"\" itemtype=\"http://schema.org/ImageObject\">\\\n                <a href=\"' + src + '\" itemprop=\"contentUrl\" data-size=\"640x640\" data-type=\"' + type + '\" data-target=\"' + target + '\">\\\n                  <img class=\"reward-img\" data-type=\"' + type + '\" data-src=\"' + minSrc + '\" src=\"http://tupelo.top/ins/default.jpg\" itemprop=\"thumbnail\" onload=\"lzld(this)\">\\\n                </a>\\\n                <figcaption style=\"display:none\" itemprop=\"caption description\">' + data.text[i] + '</figcaption>\\\n            </figure>';\n        }\n        ulTmpl = ulTmpl + '<section class=\"archives album\"><h1 class=\"year\">' + data.year + '<em>' + data.month + '月</em></h1>\\\n        <ul class=\"img-box-ul\">' + liTmpl + '</ul>\\\n        </section>';\n      }\n      document.querySelector('.instagram').innerHTML = '<div class=\"photos\" itemscope=\"\" itemtype=\"http://schema.org/ImageGallery\">' + ulTmpl + '</div>';\n      createVideoIncon();\n      _view2.default.init();\n    };\n\n    var replacer = function replacer(str) {\n      var arr = str.split(\"/\");\n      return \"/assets/ins/\" + arr[arr.length - 1];\n    };\n\n    var ctrler = function ctrler(data) {\n      var imgObj = {};\n      for (var i = 0, len = data.length; i < len; i++) {\n        var y = data[i].y;\n        var m = data[i].m;\n        var src = replacer(data[i].src);\n        var text = data[i].text;\n        var key = y + \"\" + ((m + \"\").length == 1 ? \"0\" + m : m);\n        if (imgObj[key]) {\n          imgObj[key].srclist.push(src);\n          imgObj[key].text.push(text);\n        } else {\n          imgObj[key] = {\n            year: y,\n            month: m,\n            srclist: [src],\n            text: [text]\n          };\n        }\n      }\n      render(imgObj);\n    };\n\n    function loadData(success) {\n      if (!searchData) {\n        var xhr = new XMLHttpRequest();\n        xhr.open('GET', './ins.json?t=' + +new Date(), true);\n\n        xhr.onload = function() {\n          if (this.status >= 200 && this.status < 300) {\n            var res = JSON.parse(this.response);\n            searchData = res;\n            success(searchData);\n          } else {\n            console.error(this.statusText);\n          }\n        };\n\n        xhr.onerror = function() {\n          console.error(this.statusText);\n        };\n\n        xhr.send();\n      } else {\n        success(searchData);\n      }\n    }\n\n    var Ins = {\n      init: function init() {\n        loadData(function(data) {\n          render(data);\n        });\n      }\n    };\n\n    Ins.init();\n\n    // export default impush;\n\n    /***/\n  },\n  /* 1 */\n  /***/\n  function(module, exports, __webpack_require__) {\n\n    /* WEBPACK VAR INJECTION */\n    (function(global) {\n      'use strict';\n\n      var inViewport = __webpack_require__(3);\n      var lazyAttrs = ['data-src'];\n\n      global.lzld = lazyload();\n\n      // Provide libs using getAttribute early to get the good src\n      // and not the fake data-src\n      replaceGetAttribute('Image');\n      replaceGetAttribute('IFrame');\n\n      function registerLazyAttr(attr) {\n        if (indexOf.call(lazyAttrs, attr) === -1) {\n          lazyAttrs.push(attr);\n        }\n      }\n\n      function lazyload(opts) {\n        opts = merge({\n          'offset': 333,\n          'src': 'data-src',\n          'container': false\n        }, opts || {});\n\n        if (typeof opts.src === 'string') {\n          registerLazyAttr(opts.src);\n        }\n\n        var elts = [];\n\n        function show(elt) {\n          var src = findRealSrc(elt);\n\n          if (src) {\n            elt.src = src;\n          }\n\n          elt.setAttribute('data-lzled', true);\n          elts[indexOf.call(elts, elt)] = null;\n        }\n\n        function findRealSrc(elt) {\n          if (typeof opts.src === 'function') {\n            return opts.src(elt);\n          }\n\n          return elt.getAttribute(opts.src);\n        }\n\n        function register(elt) {\n          elt.onload = null;\n          elt.removeAttribute('onload');\n          elt.onerror = null;\n          elt.removeAttribute('onerror');\n\n          if (indexOf.call(elts, elt) === -1) {\n            inViewport(elt, opts, show);\n          }\n        }\n\n        return register;\n      }\n\n      function replaceGetAttribute(elementName) {\n        var fullname = 'HTML' + elementName + 'Element';\n        if (fullname in global === false) {\n          return;\n        }\n\n        var original = global[fullname].prototype.getAttribute;\n        global[fullname].prototype.getAttribute = function(name) {\n          if (name === 'src') {\n            var realSrc;\n            for (var i = 0, max = lazyAttrs.length; i < max; i++) {\n              realSrc = original.call(this, lazyAttrs[i]);\n              if (realSrc) {\n                break;\n              }\n            }\n\n            return realSrc || original.call(this, name);\n          }\n\n          // our own lazyloader will go through theses lines\n          // because we use getAttribute(opts.src)\n          return original.call(this, name);\n        };\n      }\n\n      function merge(defaults, opts) {\n        for (var name in defaults) {\n          if (opts[name] === undefined) {\n            opts[name] = defaults[name];\n          }\n        }\n\n        return opts;\n      }\n\n      // http://webreflection.blogspot.fr/2011/06/partial-polyfills.html\n      function indexOf(value) {\n        for (var i = this.length; i-- && this[i] !== value;) {}\n        return i;\n      }\n\n      module.exports = lazyload;\n\n      // export default impush;\n      /* WEBPACK VAR INJECTION */\n    }.call(exports, (function() {\n      return this;\n    }())))\n\n    /***/\n  },\n  /* 2 */\n  /***/\n  function(module, exports) {\n\n    'use strict';\n\n    var initPhotoSwipeFromDOM = function initPhotoSwipeFromDOM(gallerySelector) {\n\n      // parse slide data (url, title, size ...) from DOM elements \n      // (children of gallerySelector)\n      var parseThumbnailElements = function parseThumbnailElements(el) {\n        el = el.parentNode.parentNode;\n        var thumbElements = el.getElementsByClassName('thumb'),\n          numNodes = thumbElements.length,\n          items = [],\n          figureEl,\n          linkEl,\n          size,\n          type,\n          // video or not\n          target,\n          item;\n\n        for (var i = 0; i < numNodes; i++) {\n\n          figureEl = thumbElements[i]; // \n\n          // include only element nodes \n          if (figureEl.nodeType !== 1) {\n            continue;\n          }\n\n          linkEl = figureEl.children[0]; // \n\n          size = linkEl.getAttribute('data-size').split('x');\n          type = linkEl.getAttribute('data-type');\n          target = linkEl.getAttribute('data-target');\n          // create slide object\n          item = {\n            src: linkEl.getAttribute('href'),\n            w: parseInt(size[0], 10),\n            h: parseInt(size[1], 10)\n          };\n\n          if (figureEl.children.length > 1) {\n            item.title = figureEl.children[1].innerHTML;\n          }\n\n          if (linkEl.children.length > 0) {\n            item.msrc = linkEl.children[0].getAttribute('src');\n            item.type = type;\n            item.target = target;\n            item.html = '<video src=\"' + target + '\" controls=\"controls\" autoplay=\"autoplay\"></video>';\n            if (type === 'video') {\n              //item.src = null;\n            }\n          }\n\n          item.el = figureEl; // save link to element for getThumbBoundsFn\n          items.push(item);\n        }\n\n        return items;\n      };\n\n      // find nearest parent element\n      var closest = function closest(el, fn) {\n        return el && (fn(el) ? el : closest(el.parentNode, fn));\n      };\n\n      // triggers when user clicks on thumbnail\n      var onThumbnailsClick = function onThumbnailsClick(e) {\n        e = e || window.event;\n        e.preventDefault ? e.preventDefault() : e.returnValue = false;\n\n        var eTarget = e.target || e.srcElement;\n\n        // find root element of slide\n        var clickedListItem = closest(eTarget, function(el) {\n          return el.tagName && el.tagName.toUpperCase() === 'FIGURE';\n        });\n\n        if (!clickedListItem) {\n          return;\n        }\n\n        // find index of clicked item by looping through all child nodes\n        // alternatively, you may define index via data- attribute\n        var clickedGallery = clickedListItem.parentNode,\n\n          // childNodes = clickedListItem.parentNode.childNodes,\n          // numChildNodes = childNodes.length,\n          childNodes = document.getElementsByClassName('thumb'),\n          numChildNodes = childNodes.length,\n          nodeIndex = 0,\n          index;\n\n        for (var i = 0; i < numChildNodes; i++) {\n          if (childNodes[i].nodeType !== 1) {\n            continue;\n          }\n\n          if (childNodes[i] === clickedListItem) {\n            index = nodeIndex;\n            break;\n          }\n          nodeIndex++;\n        }\n\n        if (index >= 0) {\n          // open PhotoSwipe if valid index found\n          openPhotoSwipe(index, clickedGallery);\n        }\n        return false;\n      };\n\n      // parse picture index and gallery index from URL (#&pid=1&gid=2)\n      var photoswipeParseHash = function photoswipeParseHash() {\n        var hash = window.location.hash.substring(1),\n          params = {};\n\n        if (hash.length < 5) {\n          return params;\n        }\n\n        var vars = hash.split('&');\n        for (var i = 0; i < vars.length; i++) {\n          if (!vars[i]) {\n            continue;\n          }\n          var pair = vars[i].split('=');\n          if (pair.length < 2) {\n            continue;\n          }\n          params[pair[0]] = pair[1];\n        }\n\n        if (params.gid) {\n          params.gid = parseInt(params.gid, 10);\n        }\n\n        return params;\n      };\n\n      var openPhotoSwipe = function openPhotoSwipe(index, galleryElement, disableAnimation, fromURL) {\n        var pswpElement = document.querySelectorAll('.pswp')[0],\n          gallery,\n          options,\n          items;\n\n        items = parseThumbnailElements(galleryElement);\n        // define options (if needed)\n        options = {\n\n          // define gallery index (for URL)\n          galleryUID: galleryElement.getAttribute('data-pswp-uid'),\n\n          getThumbBoundsFn: function getThumbBoundsFn(index) {\n            // See Options -> getThumbBoundsFn section of documentation for more info\n            var thumbnail = items[index].el.getElementsByTagName('img')[0],\n              // find thumbnail\n              pageYScroll = window.pageYOffset || document.documentElement.scrollTop,\n              rect = thumbnail.getBoundingClientRect();\n\n            return {\n              x: rect.left,\n              y: rect.top + pageYScroll,\n              w: rect.width\n            };\n          }\n\n        };\n\n        // PhotoSwipe opened from URL\n        if (fromURL) {\n          if (options.galleryPIDs) {\n            // parse real index when custom PIDs are used \n            // http://photoswipe.com/documentation/faq.html#custom-pid-in-url\n            for (var j = 0; j < items.length; j++) {\n              if (items[j].pid == index) {\n                options.index = j;\n                break;\n              }\n            }\n          } else {\n            // in URL indexes start from 1\n            options.index = parseInt(index, 10) - 1;\n          }\n        } else {\n          options.index = parseInt(index, 10);\n        }\n\n        // exit if index not found\n        if (isNaN(options.index)) {\n          return;\n        }\n\n        if (disableAnimation) {\n          options.showAnimationDuration = 0;\n        }\n\n        // Pass data to PhotoSwipe and initialize it\n        gallery = new PhotoSwipe(pswpElement, PhotoSwipeUI_Default, items, options);\n        gallery.init();\n\n        var $tempVideo;\n        var stopVideoHandle = function stopVideoHandle() {\n          if ($tempVideo) {\n            $tempVideo.remove();\n            $tempVideo = null;\n          }\n        };\n        var changeHandle = function changeHandle() {\n          var item = gallery.currItem;\n          stopVideoHandle();\n          if (item.type === 'video') {\n            var $ctn = item.container;\n            var style = $ctn.getElementsByClassName('pswp__img')[0].style;\n            var $video = document.createElement('video');\n            $video.setAttribute('autoplay', 'autoplay');\n            $video.setAttribute('controls', 'controls');\n            $video.setAttribute('src', item.target);\n            $video.style.width = style.width;\n            $video.style.height = style.height;\n            $video.style.position = 'absolute';\n            $video.style.zIndex = 2;\n            $tempVideo = $video;\n            $ctn.appendChild($video);\n          }\n        };\n        gallery.listen('initialZoomIn', changeHandle);\n        gallery.listen('afterChange', changeHandle);\n        gallery.listen('initialZoomOut', stopVideoHandle);\n      };\n\n      // loop through all gallery elements and bind events\n      var galleryElements = document.querySelectorAll(gallerySelector);\n      for (var i = 0, l = galleryElements.length; i < l; i++) {\n        galleryElements[i].setAttribute('data-pswp-uid', i + 1);\n        galleryElements[i].onclick = onThumbnailsClick;\n      }\n\n      // Parse URL and open gallery if it contains #&pid=3&gid=1\n      var hashData = photoswipeParseHash();\n      if (hashData.pid && hashData.gid) {\n        openPhotoSwipe(hashData.pid, galleryElements[hashData.gid - 1], true, true);\n      }\n    };\n\n    var Viewer = function() {\n      function init() {\n        initPhotoSwipeFromDOM('.photos');\n      }\n      return {\n        init: init\n      };\n    }();\n\n    module.exports = Viewer;\n\n    /***/\n  },\n  /* 3 */\n  /***/\n  function(module, exports) {\n\n    /* WEBPACK VAR INJECTION */\n    (function(global) {\n      module.exports = inViewport;\n\n      var instances = [];\n      var supportsMutationObserver = typeof global.MutationObserver === 'function';\n\n      function inViewport(elt, params, cb) {\n        var opts = {\n          container: global.document.body,\n          offset: 0\n        };\n\n        if (params === undefined || typeof params === 'function') {\n          cb = params;\n          params = {};\n        }\n\n        var container = opts.container = params.container || opts.container;\n        var offset = opts.offset = params.offset || opts.offset;\n\n        for (var i = 0; i < instances.length; i++) {\n          if (instances[i].container === container) {\n            return instances[i].isInViewport(elt, offset, cb);\n          }\n        }\n\n        return instances[\n          instances.push(createInViewport(container)) - 1\n        ].isInViewport(elt, offset, cb);\n      }\n\n      function addEvent(el, type, fn) {\n        if (el.attachEvent) {\n          el.attachEvent('on' + type, fn);\n        } else {\n          el.addEventListener(type, fn, false);\n        }\n      }\n\n      function debounce(func, wait, immediate) {\n        var timeout;\n        return function() {\n          var context = this,\n            args = arguments;\n          var callNow = immediate && !timeout;\n          clearTimeout(timeout);\n          timeout = setTimeout(later, wait);\n          if (callNow) func.apply(context, args);\n\n          function later() {\n            timeout = null;\n            if (!immediate) func.apply(context, args);\n          }\n        };\n      }\n\n      // https://github.com/jquery/sizzle/blob/3136f48b90e3edc84cbaaa6f6f7734ef03775a07/sizzle.js#L708\n      var contains = function() {\n        if (!global.document) {\n          return true;\n        }\n        return global.document.documentElement.compareDocumentPosition ?\n          function(a, b) {\n            return !!(a.compareDocumentPosition(b) & 16);\n          } :\n          global.document.documentElement.contains ?\n          function(a, b) {\n            return a !== b && (a.contains ? a.contains(b) : false);\n          } :\n          function(a, b) {\n            while (b = b.parentNode) {\n              if (b === a) {\n                return true;\n              }\n            }\n            return false;\n          };\n      }\n\n      function createInViewport(container) {\n        var watches = createWatches();\n\n        var scrollContainer = container === global.document.body ? global : container;\n        var debouncedCheck = debounce(watches.checkAll(watchInViewport), 15);\n\n        addEvent(scrollContainer, 'scroll', debouncedCheck);\n\n        if (scrollContainer === global) {\n          addEvent(global, 'resize', debouncedCheck);\n        }\n\n        if (supportsMutationObserver) {\n          observeDOM(watches, container, debouncedCheck);\n        }\n\n        // failsafe check, every 200ms we check for visible images\n        // usecase: a hidden parent containing eleements\n        // when the parent becomes visible, we have no event that the children\n        // became visible\n        setInterval(debouncedCheck, 150);\n\n        function isInViewport(elt, offset, cb) {\n          if (!cb) {\n            return isVisible(elt, offset);\n          }\n\n          var remote = createRemote(elt, offset, cb);\n          remote.watch();\n          return remote;\n        }\n\n        function createRemote(elt, offset, cb) {\n          function watch() {\n            watches.add(elt, offset, cb);\n          }\n\n          function dispose() {\n            watches.remove(elt);\n          }\n\n          return {\n            watch: watch,\n            dispose: dispose\n          };\n        }\n\n        function watchInViewport(elt, offset, cb) {\n          if (isVisible(elt, offset)) {\n            watches.remove(elt);\n            cb(elt);\n          }\n        }\n\n        function isVisible(elt, offset) {\n          if (!contains(global.document.documentElement, elt) || !contains(global.document.documentElement, container)) {\n            return false;\n          }\n\n          // Check if the element is visible\n          // https://github.com/jquery/jquery/blob/740e190223d19a114d5373758127285d14d6b71e/src/css/hiddenVisibleSelectors.js\n          if (!elt.offsetWidth || !elt.offsetHeight) {\n            return false;\n          }\n\n          var eltRect = elt.getBoundingClientRect();\n          var viewport = {};\n\n          if (container === global.document.body) {\n            viewport = {\n              top: -offset,\n              left: -offset,\n              right: global.document.documentElement.clientWidth + offset,\n              bottom: global.document.documentElement.clientHeight + offset\n            };\n          } else {\n            var containerRect = container.getBoundingClientRect();\n            viewport = {\n              top: containerRect.top - offset,\n              left: containerRect.left - offset,\n              right: containerRect.right + offset,\n              bottom: containerRect.bottom + offset\n            };\n          }\n\n          // The element must overlap with the visible part of the viewport\n          var visible =\n            (\n              (eltRect.right > viewport.left) &&\n              (eltRect.left < viewport.right) &&\n              (eltRect.bottom > viewport.top) &&\n              (eltRect.top < viewport.bottom)\n            );\n\n          return visible;\n        }\n\n        return {\n          container: container,\n          isInViewport: isInViewport\n        };\n      }\n\n      function createWatches() {\n        var watches = [];\n\n        function add(elt, offset, cb) {\n          if (!isWatched(elt)) {\n            watches.push([elt, offset, cb]);\n          }\n        }\n\n        function remove(elt) {\n          var pos = indexOf(elt);\n          if (pos !== -1) {\n            watches.splice(pos, 1);\n          }\n        }\n\n        function indexOf(elt) {\n          for (var i = watches.length - 1; i >= 0; i--) {\n            if (watches[i][0] === elt) {\n              return i;\n            }\n          }\n          return -1;\n        }\n\n        function isWatched(elt) {\n          return indexOf(elt) !== -1;\n        }\n\n        function checkAll(cb) {\n          return function() {\n            for (var i = watches.length - 1; i >= 0; i--) {\n              cb.apply(this, watches[i]);\n            }\n          };\n        }\n\n        return {\n          add: add,\n          remove: remove,\n          isWatched: isWatched,\n          checkAll: checkAll\n        };\n      }\n\n      function observeDOM(watches, container, cb) {\n        var observer = new MutationObserver(watch);\n        var filter = Array.prototype.filter;\n        var concat = Array.prototype.concat;\n\n        observer.observe(container, {\n          childList: true,\n          subtree: true,\n          // changes like style/width/height/display will be catched\n          attributes: true\n        });\n\n        function watch(mutations) {\n          // some new DOM nodes where previously watched\n          // we should check their positions\n          if (mutations.some(knownNodes) === true) {\n            setTimeout(cb, 0);\n          }\n        }\n\n        function knownNodes(mutation) {\n          var nodes = concat.call([],\n            Array.prototype.slice.call(mutation.addedNodes),\n            mutation.target\n          );\n          return filter.call(nodes, watches.isWatched).length > 0;\n        }\n      }\n\n      /* WEBPACK VAR INJECTION */\n    }.call(exports, (function() {\n      return this;\n    }())))\n\n    /***/\n  }\n  /******/\n]);","date":"2018-10-19T18:27:37.914Z","updated":"2018-10-19T18:27:37.913Z","path":"photos/ins.js","layout":"false","title":"","comments":1,"_id":"cjskls62n0007745bjewrbhq7","content":"/******/\n(function(modules) { // webpackBootstrap\n  /******/ // The module cache\n  /******/\n  var installedModules = {};\n  /******/\n  /******/ // The require function\n  /******/\n  function __webpack_require__(moduleId) {\n    /******/\n    /******/ // Check if module is in cache\n    /******/\n    if (installedModules[moduleId])\n    /******/\n      return installedModules[moduleId].exports;\n    /******/\n    /******/ // Create a new module (and put it into the cache)\n    /******/\n    var module = installedModules[moduleId] = {\n      /******/\n      exports: {},\n      /******/\n      id: moduleId,\n      /******/\n      loaded: false\n        /******/\n    };\n    /******/\n    /******/ // Execute the module function\n    /******/\n    modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n    /******/\n    /******/ // Flag the module as loaded\n    /******/\n    module.loaded = true;\n    /******/\n    /******/ // Return the exports of the module\n    /******/\n    return module.exports;\n    /******/\n  }\n  /******/\n  /******/\n  /******/ // expose the modules object (__webpack_modules__)\n  /******/\n  __webpack_require__.m = modules;\n  /******/\n  /******/ // expose the module cache\n  /******/\n  __webpack_require__.c = installedModules;\n  /******/\n  /******/ // __webpack_public_path__\n  /******/\n  __webpack_require__.p = \"/dist/\";\n  /******/\n  /******/ // Load entry module and return exports\n  /******/\n  return __webpack_require__(0);\n  /******/\n})\n/************************************************************************/\n/******/\n([\n  /* 0 */\n  /***/\n  function(module, exports, __webpack_require__) {\n\n    'use strict';\n\n    __webpack_require__(1);\n\n    var _view = __webpack_require__(2);\n\n    var _view2 = _interopRequireDefault(_view);\n\n    function _interopRequireDefault(obj) {\n      return obj && obj.__esModule ? obj : {\n        default: obj\n      };\n    }\n\n    /**\n     * @name impush-client \n     * @description 这个项目让我发家致富…\n     * @date 2016-12-1\n     */\n\n    var _collection = [];\n    var _count = 0;\n    var searchData;\n\n    function addMask(elem) {\n      var rect = elem.getBoundingClientRect();\n      var style = getComputedStyle(elem, null);\n\n      var mask = document.createElement('i');\n      mask.className = 'icon-film';\n      mask.style.color = '#fff';\n      mask.style.fontSize = '26px';\n      mask.style.position = 'absolute';\n      mask.style.right = '10px';\n      mask.style.bottom = '10px';\n      mask.style.zIndex = 1;\n      elem.parentNode.appendChild(mask);\n    }\n\n    var createVideoIncon = function createVideoIncon() {\n      var $videoImg = document.querySelectorAll('.thumb a[data-type=\"video\"]');\n      for (var i = 0, len = $videoImg.length; i < len; i++) {\n        addMask($videoImg[i]);\n      }\n    };\n    var render = function render(res) {\n      var ulTmpl = \"\";\n      for (var j = 0, len2 = res.list.length; j < len2; j++) {\n        var data = res.list[j].arr;\n        var liTmpl = \"\";\n        for (var i = 0, len = data.link.length; i < len; i++) {\n          var minSrc = 'http://tupelo.top/ins-min/' + data.link[i] + '.jpg';\n          var src = 'http://tupelo.top/ins/' + data.link[i];\n          var type = data.type[i];\n          var target = src + (type === 'video' ? '.mp4' : '.jpg');\n          src += '.jpg';\n\n          liTmpl += '<figure class=\"thumb\" itemprop=\"associatedMedia\" itemscope=\"\" itemtype=\"http://schema.org/ImageObject\">\\\n                <a href=\"' + src + '\" itemprop=\"contentUrl\" data-size=\"640x640\" data-type=\"' + type + '\" data-target=\"' + target + '\">\\\n                  <img class=\"reward-img\" data-type=\"' + type + '\" data-src=\"' + minSrc + '\" src=\"http://tupelo.top/ins/default.jpg\" itemprop=\"thumbnail\" onload=\"lzld(this)\">\\\n                </a>\\\n                <figcaption style=\"display:none\" itemprop=\"caption description\">' + data.text[i] + '</figcaption>\\\n            </figure>';\n        }\n        ulTmpl = ulTmpl + '<section class=\"archives album\"><h1 class=\"year\">' + data.year + '<em>' + data.month + '月</em></h1>\\\n        <ul class=\"img-box-ul\">' + liTmpl + '</ul>\\\n        </section>';\n      }\n      document.querySelector('.instagram').innerHTML = '<div class=\"photos\" itemscope=\"\" itemtype=\"http://schema.org/ImageGallery\">' + ulTmpl + '</div>';\n      createVideoIncon();\n      _view2.default.init();\n    };\n\n    var replacer = function replacer(str) {\n      var arr = str.split(\"/\");\n      return \"/assets/ins/\" + arr[arr.length - 1];\n    };\n\n    var ctrler = function ctrler(data) {\n      var imgObj = {};\n      for (var i = 0, len = data.length; i < len; i++) {\n        var y = data[i].y;\n        var m = data[i].m;\n        var src = replacer(data[i].src);\n        var text = data[i].text;\n        var key = y + \"\" + ((m + \"\").length == 1 ? \"0\" + m : m);\n        if (imgObj[key]) {\n          imgObj[key].srclist.push(src);\n          imgObj[key].text.push(text);\n        } else {\n          imgObj[key] = {\n            year: y,\n            month: m,\n            srclist: [src],\n            text: [text]\n          };\n        }\n      }\n      render(imgObj);\n    };\n\n    function loadData(success) {\n      if (!searchData) {\n        var xhr = new XMLHttpRequest();\n        xhr.open('GET', './ins.json?t=' + +new Date(), true);\n\n        xhr.onload = function() {\n          if (this.status >= 200 && this.status < 300) {\n            var res = JSON.parse(this.response);\n            searchData = res;\n            success(searchData);\n          } else {\n            console.error(this.statusText);\n          }\n        };\n\n        xhr.onerror = function() {\n          console.error(this.statusText);\n        };\n\n        xhr.send();\n      } else {\n        success(searchData);\n      }\n    }\n\n    var Ins = {\n      init: function init() {\n        loadData(function(data) {\n          render(data);\n        });\n      }\n    };\n\n    Ins.init();\n\n    // export default impush;\n\n    /***/\n  },\n  /* 1 */\n  /***/\n  function(module, exports, __webpack_require__) {\n\n    /* WEBPACK VAR INJECTION */\n    (function(global) {\n      'use strict';\n\n      var inViewport = __webpack_require__(3);\n      var lazyAttrs = ['data-src'];\n\n      global.lzld = lazyload();\n\n      // Provide libs using getAttribute early to get the good src\n      // and not the fake data-src\n      replaceGetAttribute('Image');\n      replaceGetAttribute('IFrame');\n\n      function registerLazyAttr(attr) {\n        if (indexOf.call(lazyAttrs, attr) === -1) {\n          lazyAttrs.push(attr);\n        }\n      }\n\n      function lazyload(opts) {\n        opts = merge({\n          'offset': 333,\n          'src': 'data-src',\n          'container': false\n        }, opts || {});\n\n        if (typeof opts.src === 'string') {\n          registerLazyAttr(opts.src);\n        }\n\n        var elts = [];\n\n        function show(elt) {\n          var src = findRealSrc(elt);\n\n          if (src) {\n            elt.src = src;\n          }\n\n          elt.setAttribute('data-lzled', true);\n          elts[indexOf.call(elts, elt)] = null;\n        }\n\n        function findRealSrc(elt) {\n          if (typeof opts.src === 'function') {\n            return opts.src(elt);\n          }\n\n          return elt.getAttribute(opts.src);\n        }\n\n        function register(elt) {\n          elt.onload = null;\n          elt.removeAttribute('onload');\n          elt.onerror = null;\n          elt.removeAttribute('onerror');\n\n          if (indexOf.call(elts, elt) === -1) {\n            inViewport(elt, opts, show);\n          }\n        }\n\n        return register;\n      }\n\n      function replaceGetAttribute(elementName) {\n        var fullname = 'HTML' + elementName + 'Element';\n        if (fullname in global === false) {\n          return;\n        }\n\n        var original = global[fullname].prototype.getAttribute;\n        global[fullname].prototype.getAttribute = function(name) {\n          if (name === 'src') {\n            var realSrc;\n            for (var i = 0, max = lazyAttrs.length; i < max; i++) {\n              realSrc = original.call(this, lazyAttrs[i]);\n              if (realSrc) {\n                break;\n              }\n            }\n\n            return realSrc || original.call(this, name);\n          }\n\n          // our own lazyloader will go through theses lines\n          // because we use getAttribute(opts.src)\n          return original.call(this, name);\n        };\n      }\n\n      function merge(defaults, opts) {\n        for (var name in defaults) {\n          if (opts[name] === undefined) {\n            opts[name] = defaults[name];\n          }\n        }\n\n        return opts;\n      }\n\n      // http://webreflection.blogspot.fr/2011/06/partial-polyfills.html\n      function indexOf(value) {\n        for (var i = this.length; i-- && this[i] !== value;) {}\n        return i;\n      }\n\n      module.exports = lazyload;\n\n      // export default impush;\n      /* WEBPACK VAR INJECTION */\n    }.call(exports, (function() {\n      return this;\n    }())))\n\n    /***/\n  },\n  /* 2 */\n  /***/\n  function(module, exports) {\n\n    'use strict';\n\n    var initPhotoSwipeFromDOM = function initPhotoSwipeFromDOM(gallerySelector) {\n\n      // parse slide data (url, title, size ...) from DOM elements \n      // (children of gallerySelector)\n      var parseThumbnailElements = function parseThumbnailElements(el) {\n        el = el.parentNode.parentNode;\n        var thumbElements = el.getElementsByClassName('thumb'),\n          numNodes = thumbElements.length,\n          items = [],\n          figureEl,\n          linkEl,\n          size,\n          type,\n          // video or not\n          target,\n          item;\n\n        for (var i = 0; i < numNodes; i++) {\n\n          figureEl = thumbElements[i]; // \n\n          // include only element nodes \n          if (figureEl.nodeType !== 1) {\n            continue;\n          }\n\n          linkEl = figureEl.children[0]; // \n\n          size = linkEl.getAttribute('data-size').split('x');\n          type = linkEl.getAttribute('data-type');\n          target = linkEl.getAttribute('data-target');\n          // create slide object\n          item = {\n            src: linkEl.getAttribute('href'),\n            w: parseInt(size[0], 10),\n            h: parseInt(size[1], 10)\n          };\n\n          if (figureEl.children.length > 1) {\n            item.title = figureEl.children[1].innerHTML;\n          }\n\n          if (linkEl.children.length > 0) {\n            item.msrc = linkEl.children[0].getAttribute('src');\n            item.type = type;\n            item.target = target;\n            item.html = '<video src=\"' + target + '\" controls=\"controls\" autoplay=\"autoplay\"></video>';\n            if (type === 'video') {\n              //item.src = null;\n            }\n          }\n\n          item.el = figureEl; // save link to element for getThumbBoundsFn\n          items.push(item);\n        }\n\n        return items;\n      };\n\n      // find nearest parent element\n      var closest = function closest(el, fn) {\n        return el && (fn(el) ? el : closest(el.parentNode, fn));\n      };\n\n      // triggers when user clicks on thumbnail\n      var onThumbnailsClick = function onThumbnailsClick(e) {\n        e = e || window.event;\n        e.preventDefault ? e.preventDefault() : e.returnValue = false;\n\n        var eTarget = e.target || e.srcElement;\n\n        // find root element of slide\n        var clickedListItem = closest(eTarget, function(el) {\n          return el.tagName && el.tagName.toUpperCase() === 'FIGURE';\n        });\n\n        if (!clickedListItem) {\n          return;\n        }\n\n        // find index of clicked item by looping through all child nodes\n        // alternatively, you may define index via data- attribute\n        var clickedGallery = clickedListItem.parentNode,\n\n          // childNodes = clickedListItem.parentNode.childNodes,\n          // numChildNodes = childNodes.length,\n          childNodes = document.getElementsByClassName('thumb'),\n          numChildNodes = childNodes.length,\n          nodeIndex = 0,\n          index;\n\n        for (var i = 0; i < numChildNodes; i++) {\n          if (childNodes[i].nodeType !== 1) {\n            continue;\n          }\n\n          if (childNodes[i] === clickedListItem) {\n            index = nodeIndex;\n            break;\n          }\n          nodeIndex++;\n        }\n\n        if (index >= 0) {\n          // open PhotoSwipe if valid index found\n          openPhotoSwipe(index, clickedGallery);\n        }\n        return false;\n      };\n\n      // parse picture index and gallery index from URL (#&pid=1&gid=2)\n      var photoswipeParseHash = function photoswipeParseHash() {\n        var hash = window.location.hash.substring(1),\n          params = {};\n\n        if (hash.length < 5) {\n          return params;\n        }\n\n        var vars = hash.split('&');\n        for (var i = 0; i < vars.length; i++) {\n          if (!vars[i]) {\n            continue;\n          }\n          var pair = vars[i].split('=');\n          if (pair.length < 2) {\n            continue;\n          }\n          params[pair[0]] = pair[1];\n        }\n\n        if (params.gid) {\n          params.gid = parseInt(params.gid, 10);\n        }\n\n        return params;\n      };\n\n      var openPhotoSwipe = function openPhotoSwipe(index, galleryElement, disableAnimation, fromURL) {\n        var pswpElement = document.querySelectorAll('.pswp')[0],\n          gallery,\n          options,\n          items;\n\n        items = parseThumbnailElements(galleryElement);\n        // define options (if needed)\n        options = {\n\n          // define gallery index (for URL)\n          galleryUID: galleryElement.getAttribute('data-pswp-uid'),\n\n          getThumbBoundsFn: function getThumbBoundsFn(index) {\n            // See Options -> getThumbBoundsFn section of documentation for more info\n            var thumbnail = items[index].el.getElementsByTagName('img')[0],\n              // find thumbnail\n              pageYScroll = window.pageYOffset || document.documentElement.scrollTop,\n              rect = thumbnail.getBoundingClientRect();\n\n            return {\n              x: rect.left,\n              y: rect.top + pageYScroll,\n              w: rect.width\n            };\n          }\n\n        };\n\n        // PhotoSwipe opened from URL\n        if (fromURL) {\n          if (options.galleryPIDs) {\n            // parse real index when custom PIDs are used \n            // http://photoswipe.com/documentation/faq.html#custom-pid-in-url\n            for (var j = 0; j < items.length; j++) {\n              if (items[j].pid == index) {\n                options.index = j;\n                break;\n              }\n            }\n          } else {\n            // in URL indexes start from 1\n            options.index = parseInt(index, 10) - 1;\n          }\n        } else {\n          options.index = parseInt(index, 10);\n        }\n\n        // exit if index not found\n        if (isNaN(options.index)) {\n          return;\n        }\n\n        if (disableAnimation) {\n          options.showAnimationDuration = 0;\n        }\n\n        // Pass data to PhotoSwipe and initialize it\n        gallery = new PhotoSwipe(pswpElement, PhotoSwipeUI_Default, items, options);\n        gallery.init();\n\n        var $tempVideo;\n        var stopVideoHandle = function stopVideoHandle() {\n          if ($tempVideo) {\n            $tempVideo.remove();\n            $tempVideo = null;\n          }\n        };\n        var changeHandle = function changeHandle() {\n          var item = gallery.currItem;\n          stopVideoHandle();\n          if (item.type === 'video') {\n            var $ctn = item.container;\n            var style = $ctn.getElementsByClassName('pswp__img')[0].style;\n            var $video = document.createElement('video');\n            $video.setAttribute('autoplay', 'autoplay');\n            $video.setAttribute('controls', 'controls');\n            $video.setAttribute('src', item.target);\n            $video.style.width = style.width;\n            $video.style.height = style.height;\n            $video.style.position = 'absolute';\n            $video.style.zIndex = 2;\n            $tempVideo = $video;\n            $ctn.appendChild($video);\n          }\n        };\n        gallery.listen('initialZoomIn', changeHandle);\n        gallery.listen('afterChange', changeHandle);\n        gallery.listen('initialZoomOut', stopVideoHandle);\n      };\n\n      // loop through all gallery elements and bind events\n      var galleryElements = document.querySelectorAll(gallerySelector);\n      for (var i = 0, l = galleryElements.length; i < l; i++) {\n        galleryElements[i].setAttribute('data-pswp-uid', i + 1);\n        galleryElements[i].onclick = onThumbnailsClick;\n      }\n\n      // Parse URL and open gallery if it contains #&pid=3&gid=1\n      var hashData = photoswipeParseHash();\n      if (hashData.pid && hashData.gid) {\n        openPhotoSwipe(hashData.pid, galleryElements[hashData.gid - 1], true, true);\n      }\n    };\n\n    var Viewer = function() {\n      function init() {\n        initPhotoSwipeFromDOM('.photos');\n      }\n      return {\n        init: init\n      };\n    }();\n\n    module.exports = Viewer;\n\n    /***/\n  },\n  /* 3 */\n  /***/\n  function(module, exports) {\n\n    /* WEBPACK VAR INJECTION */\n    (function(global) {\n      module.exports = inViewport;\n\n      var instances = [];\n      var supportsMutationObserver = typeof global.MutationObserver === 'function';\n\n      function inViewport(elt, params, cb) {\n        var opts = {\n          container: global.document.body,\n          offset: 0\n        };\n\n        if (params === undefined || typeof params === 'function') {\n          cb = params;\n          params = {};\n        }\n\n        var container = opts.container = params.container || opts.container;\n        var offset = opts.offset = params.offset || opts.offset;\n\n        for (var i = 0; i < instances.length; i++) {\n          if (instances[i].container === container) {\n            return instances[i].isInViewport(elt, offset, cb);\n          }\n        }\n\n        return instances[\n          instances.push(createInViewport(container)) - 1\n        ].isInViewport(elt, offset, cb);\n      }\n\n      function addEvent(el, type, fn) {\n        if (el.attachEvent) {\n          el.attachEvent('on' + type, fn);\n        } else {\n          el.addEventListener(type, fn, false);\n        }\n      }\n\n      function debounce(func, wait, immediate) {\n        var timeout;\n        return function() {\n          var context = this,\n            args = arguments;\n          var callNow = immediate && !timeout;\n          clearTimeout(timeout);\n          timeout = setTimeout(later, wait);\n          if (callNow) func.apply(context, args);\n\n          function later() {\n            timeout = null;\n            if (!immediate) func.apply(context, args);\n          }\n        };\n      }\n\n      // https://github.com/jquery/sizzle/blob/3136f48b90e3edc84cbaaa6f6f7734ef03775a07/sizzle.js#L708\n      var contains = function() {\n        if (!global.document) {\n          return true;\n        }\n        return global.document.documentElement.compareDocumentPosition ?\n          function(a, b) {\n            return !!(a.compareDocumentPosition(b) & 16);\n          } :\n          global.document.documentElement.contains ?\n          function(a, b) {\n            return a !== b && (a.contains ? a.contains(b) : false);\n          } :\n          function(a, b) {\n            while (b = b.parentNode) {\n              if (b === a) {\n                return true;\n              }\n            }\n            return false;\n          };\n      }\n\n      function createInViewport(container) {\n        var watches = createWatches();\n\n        var scrollContainer = container === global.document.body ? global : container;\n        var debouncedCheck = debounce(watches.checkAll(watchInViewport), 15);\n\n        addEvent(scrollContainer, 'scroll', debouncedCheck);\n\n        if (scrollContainer === global) {\n          addEvent(global, 'resize', debouncedCheck);\n        }\n\n        if (supportsMutationObserver) {\n          observeDOM(watches, container, debouncedCheck);\n        }\n\n        // failsafe check, every 200ms we check for visible images\n        // usecase: a hidden parent containing eleements\n        // when the parent becomes visible, we have no event that the children\n        // became visible\n        setInterval(debouncedCheck, 150);\n\n        function isInViewport(elt, offset, cb) {\n          if (!cb) {\n            return isVisible(elt, offset);\n          }\n\n          var remote = createRemote(elt, offset, cb);\n          remote.watch();\n          return remote;\n        }\n\n        function createRemote(elt, offset, cb) {\n          function watch() {\n            watches.add(elt, offset, cb);\n          }\n\n          function dispose() {\n            watches.remove(elt);\n          }\n\n          return {\n            watch: watch,\n            dispose: dispose\n          };\n        }\n\n        function watchInViewport(elt, offset, cb) {\n          if (isVisible(elt, offset)) {\n            watches.remove(elt);\n            cb(elt);\n          }\n        }\n\n        function isVisible(elt, offset) {\n          if (!contains(global.document.documentElement, elt) || !contains(global.document.documentElement, container)) {\n            return false;\n          }\n\n          // Check if the element is visible\n          // https://github.com/jquery/jquery/blob/740e190223d19a114d5373758127285d14d6b71e/src/css/hiddenVisibleSelectors.js\n          if (!elt.offsetWidth || !elt.offsetHeight) {\n            return false;\n          }\n\n          var eltRect = elt.getBoundingClientRect();\n          var viewport = {};\n\n          if (container === global.document.body) {\n            viewport = {\n              top: -offset,\n              left: -offset,\n              right: global.document.documentElement.clientWidth + offset,\n              bottom: global.document.documentElement.clientHeight + offset\n            };\n          } else {\n            var containerRect = container.getBoundingClientRect();\n            viewport = {\n              top: containerRect.top - offset,\n              left: containerRect.left - offset,\n              right: containerRect.right + offset,\n              bottom: containerRect.bottom + offset\n            };\n          }\n\n          // The element must overlap with the visible part of the viewport\n          var visible =\n            (\n              (eltRect.right > viewport.left) &&\n              (eltRect.left < viewport.right) &&\n              (eltRect.bottom > viewport.top) &&\n              (eltRect.top < viewport.bottom)\n            );\n\n          return visible;\n        }\n\n        return {\n          container: container,\n          isInViewport: isInViewport\n        };\n      }\n\n      function createWatches() {\n        var watches = [];\n\n        function add(elt, offset, cb) {\n          if (!isWatched(elt)) {\n            watches.push([elt, offset, cb]);\n          }\n        }\n\n        function remove(elt) {\n          var pos = indexOf(elt);\n          if (pos !== -1) {\n            watches.splice(pos, 1);\n          }\n        }\n\n        function indexOf(elt) {\n          for (var i = watches.length - 1; i >= 0; i--) {\n            if (watches[i][0] === elt) {\n              return i;\n            }\n          }\n          return -1;\n        }\n\n        function isWatched(elt) {\n          return indexOf(elt) !== -1;\n        }\n\n        function checkAll(cb) {\n          return function() {\n            for (var i = watches.length - 1; i >= 0; i--) {\n              cb.apply(this, watches[i]);\n            }\n          };\n        }\n\n        return {\n          add: add,\n          remove: remove,\n          isWatched: isWatched,\n          checkAll: checkAll\n        };\n      }\n\n      function observeDOM(watches, container, cb) {\n        var observer = new MutationObserver(watch);\n        var filter = Array.prototype.filter;\n        var concat = Array.prototype.concat;\n\n        observer.observe(container, {\n          childList: true,\n          subtree: true,\n          // changes like style/width/height/display will be catched\n          attributes: true\n        });\n\n        function watch(mutations) {\n          // some new DOM nodes where previously watched\n          // we should check their positions\n          if (mutations.some(knownNodes) === true) {\n            setTimeout(cb, 0);\n          }\n        }\n\n        function knownNodes(mutation) {\n          var nodes = concat.call([],\n            Array.prototype.slice.call(mutation.addedNodes),\n            mutation.target\n          );\n          return filter.call(nodes, watches.isWatched).length > 0;\n        }\n      }\n\n      /* WEBPACK VAR INJECTION */\n    }.call(exports, (function() {\n      return this;\n    }())))\n\n    /***/\n  }\n  /******/\n]);","site":{"data":{}},"excerpt":"","more":"/******/\n(function(modules) { // webpackBootstrap\n  /******/ // The module cache\n  /******/\n  var installedModules = {};\n  /******/\n  /******/ // The require function\n  /******/\n  function __webpack_require__(moduleId) {\n    /******/\n    /******/ // Check if module is in cache\n    /******/\n    if (installedModules[moduleId])\n    /******/\n      return installedModules[moduleId].exports;\n    /******/\n    /******/ // Create a new module (and put it into the cache)\n    /******/\n    var module = installedModules[moduleId] = {\n      /******/\n      exports: {},\n      /******/\n      id: moduleId,\n      /******/\n      loaded: false\n        /******/\n    };\n    /******/\n    /******/ // Execute the module function\n    /******/\n    modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n    /******/\n    /******/ // Flag the module as loaded\n    /******/\n    module.loaded = true;\n    /******/\n    /******/ // Return the exports of the module\n    /******/\n    return module.exports;\n    /******/\n  }\n  /******/\n  /******/\n  /******/ // expose the modules object (__webpack_modules__)\n  /******/\n  __webpack_require__.m = modules;\n  /******/\n  /******/ // expose the module cache\n  /******/\n  __webpack_require__.c = installedModules;\n  /******/\n  /******/ // __webpack_public_path__\n  /******/\n  __webpack_require__.p = \"/dist/\";\n  /******/\n  /******/ // Load entry module and return exports\n  /******/\n  return __webpack_require__(0);\n  /******/\n})\n/************************************************************************/\n/******/\n([\n  /* 0 */\n  /***/\n  function(module, exports, __webpack_require__) {\n\n    'use strict';\n\n    __webpack_require__(1);\n\n    var _view = __webpack_require__(2);\n\n    var _view2 = _interopRequireDefault(_view);\n\n    function _interopRequireDefault(obj) {\n      return obj && obj.__esModule ? obj : {\n        default: obj\n      };\n    }\n\n    /**\n     * @name impush-client \n     * @description 这个项目让我发家致富…\n     * @date 2016-12-1\n     */\n\n    var _collection = [];\n    var _count = 0;\n    var searchData;\n\n    function addMask(elem) {\n      var rect = elem.getBoundingClientRect();\n      var style = getComputedStyle(elem, null);\n\n      var mask = document.createElement('i');\n      mask.className = 'icon-film';\n      mask.style.color = '#fff';\n      mask.style.fontSize = '26px';\n      mask.style.position = 'absolute';\n      mask.style.right = '10px';\n      mask.style.bottom = '10px';\n      mask.style.zIndex = 1;\n      elem.parentNode.appendChild(mask);\n    }\n\n    var createVideoIncon = function createVideoIncon() {\n      var $videoImg = document.querySelectorAll('.thumb a[data-type=\"video\"]');\n      for (var i = 0, len = $videoImg.length; i < len; i++) {\n        addMask($videoImg[i]);\n      }\n    };\n    var render = function render(res) {\n      var ulTmpl = \"\";\n      for (var j = 0, len2 = res.list.length; j < len2; j++) {\n        var data = res.list[j].arr;\n        var liTmpl = \"\";\n        for (var i = 0, len = data.link.length; i < len; i++) {\n          var minSrc = 'http://tupelo.top/ins-min/' + data.link[i] + '.jpg';\n          var src = 'http://tupelo.top/ins/' + data.link[i];\n          var type = data.type[i];\n          var target = src + (type === 'video' ? '.mp4' : '.jpg');\n          src += '.jpg';\n\n          liTmpl += '<figure class=\"thumb\" itemprop=\"associatedMedia\" itemscope=\"\" itemtype=\"http://schema.org/ImageObject\">\\\n                <a href=\"' + src + '\" itemprop=\"contentUrl\" data-size=\"640x640\" data-type=\"' + type + '\" data-target=\"' + target + '\">\\\n                  <img class=\"reward-img\" data-type=\"' + type + '\" data-src=\"' + minSrc + '\" src=\"http://tupelo.top/ins/default.jpg\" itemprop=\"thumbnail\" onload=\"lzld(this)\">\\\n                </a>\\\n                <figcaption style=\"display:none\" itemprop=\"caption description\">' + data.text[i] + '</figcaption>\\\n            </figure>';\n        }\n        ulTmpl = ulTmpl + '<section class=\"archives album\"><h1 class=\"year\">' + data.year + '<em>' + data.month + '月</em></h1>\\\n        <ul class=\"img-box-ul\">' + liTmpl + '</ul>\\\n        </section>';\n      }\n      document.querySelector('.instagram').innerHTML = '<div class=\"photos\" itemscope=\"\" itemtype=\"http://schema.org/ImageGallery\">' + ulTmpl + '</div>';\n      createVideoIncon();\n      _view2.default.init();\n    };\n\n    var replacer = function replacer(str) {\n      var arr = str.split(\"/\");\n      return \"/assets/ins/\" + arr[arr.length - 1];\n    };\n\n    var ctrler = function ctrler(data) {\n      var imgObj = {};\n      for (var i = 0, len = data.length; i < len; i++) {\n        var y = data[i].y;\n        var m = data[i].m;\n        var src = replacer(data[i].src);\n        var text = data[i].text;\n        var key = y + \"\" + ((m + \"\").length == 1 ? \"0\" + m : m);\n        if (imgObj[key]) {\n          imgObj[key].srclist.push(src);\n          imgObj[key].text.push(text);\n        } else {\n          imgObj[key] = {\n            year: y,\n            month: m,\n            srclist: [src],\n            text: [text]\n          };\n        }\n      }\n      render(imgObj);\n    };\n\n    function loadData(success) {\n      if (!searchData) {\n        var xhr = new XMLHttpRequest();\n        xhr.open('GET', './ins.json?t=' + +new Date(), true);\n\n        xhr.onload = function() {\n          if (this.status >= 200 && this.status < 300) {\n            var res = JSON.parse(this.response);\n            searchData = res;\n            success(searchData);\n          } else {\n            console.error(this.statusText);\n          }\n        };\n\n        xhr.onerror = function() {\n          console.error(this.statusText);\n        };\n\n        xhr.send();\n      } else {\n        success(searchData);\n      }\n    }\n\n    var Ins = {\n      init: function init() {\n        loadData(function(data) {\n          render(data);\n        });\n      }\n    };\n\n    Ins.init();\n\n    // export default impush;\n\n    /***/\n  },\n  /* 1 */\n  /***/\n  function(module, exports, __webpack_require__) {\n\n    /* WEBPACK VAR INJECTION */\n    (function(global) {\n      'use strict';\n\n      var inViewport = __webpack_require__(3);\n      var lazyAttrs = ['data-src'];\n\n      global.lzld = lazyload();\n\n      // Provide libs using getAttribute early to get the good src\n      // and not the fake data-src\n      replaceGetAttribute('Image');\n      replaceGetAttribute('IFrame');\n\n      function registerLazyAttr(attr) {\n        if (indexOf.call(lazyAttrs, attr) === -1) {\n          lazyAttrs.push(attr);\n        }\n      }\n\n      function lazyload(opts) {\n        opts = merge({\n          'offset': 333,\n          'src': 'data-src',\n          'container': false\n        }, opts || {});\n\n        if (typeof opts.src === 'string') {\n          registerLazyAttr(opts.src);\n        }\n\n        var elts = [];\n\n        function show(elt) {\n          var src = findRealSrc(elt);\n\n          if (src) {\n            elt.src = src;\n          }\n\n          elt.setAttribute('data-lzled', true);\n          elts[indexOf.call(elts, elt)] = null;\n        }\n\n        function findRealSrc(elt) {\n          if (typeof opts.src === 'function') {\n            return opts.src(elt);\n          }\n\n          return elt.getAttribute(opts.src);\n        }\n\n        function register(elt) {\n          elt.onload = null;\n          elt.removeAttribute('onload');\n          elt.onerror = null;\n          elt.removeAttribute('onerror');\n\n          if (indexOf.call(elts, elt) === -1) {\n            inViewport(elt, opts, show);\n          }\n        }\n\n        return register;\n      }\n\n      function replaceGetAttribute(elementName) {\n        var fullname = 'HTML' + elementName + 'Element';\n        if (fullname in global === false) {\n          return;\n        }\n\n        var original = global[fullname].prototype.getAttribute;\n        global[fullname].prototype.getAttribute = function(name) {\n          if (name === 'src') {\n            var realSrc;\n            for (var i = 0, max = lazyAttrs.length; i < max; i++) {\n              realSrc = original.call(this, lazyAttrs[i]);\n              if (realSrc) {\n                break;\n              }\n            }\n\n            return realSrc || original.call(this, name);\n          }\n\n          // our own lazyloader will go through theses lines\n          // because we use getAttribute(opts.src)\n          return original.call(this, name);\n        };\n      }\n\n      function merge(defaults, opts) {\n        for (var name in defaults) {\n          if (opts[name] === undefined) {\n            opts[name] = defaults[name];\n          }\n        }\n\n        return opts;\n      }\n\n      // http://webreflection.blogspot.fr/2011/06/partial-polyfills.html\n      function indexOf(value) {\n        for (var i = this.length; i-- && this[i] !== value;) {}\n        return i;\n      }\n\n      module.exports = lazyload;\n\n      // export default impush;\n      /* WEBPACK VAR INJECTION */\n    }.call(exports, (function() {\n      return this;\n    }())))\n\n    /***/\n  },\n  /* 2 */\n  /***/\n  function(module, exports) {\n\n    'use strict';\n\n    var initPhotoSwipeFromDOM = function initPhotoSwipeFromDOM(gallerySelector) {\n\n      // parse slide data (url, title, size ...) from DOM elements \n      // (children of gallerySelector)\n      var parseThumbnailElements = function parseThumbnailElements(el) {\n        el = el.parentNode.parentNode;\n        var thumbElements = el.getElementsByClassName('thumb'),\n          numNodes = thumbElements.length,\n          items = [],\n          figureEl,\n          linkEl,\n          size,\n          type,\n          // video or not\n          target,\n          item;\n\n        for (var i = 0; i < numNodes; i++) {\n\n          figureEl = thumbElements[i]; // \n\n          // include only element nodes \n          if (figureEl.nodeType !== 1) {\n            continue;\n          }\n\n          linkEl = figureEl.children[0]; // \n\n          size = linkEl.getAttribute('data-size').split('x');\n          type = linkEl.getAttribute('data-type');\n          target = linkEl.getAttribute('data-target');\n          // create slide object\n          item = {\n            src: linkEl.getAttribute('href'),\n            w: parseInt(size[0], 10),\n            h: parseInt(size[1], 10)\n          };\n\n          if (figureEl.children.length > 1) {\n            item.title = figureEl.children[1].innerHTML;\n          }\n\n          if (linkEl.children.length > 0) {\n            item.msrc = linkEl.children[0].getAttribute('src');\n            item.type = type;\n            item.target = target;\n            item.html = '<video src=\"' + target + '\" controls=\"controls\" autoplay=\"autoplay\"></video>';\n            if (type === 'video') {\n              //item.src = null;\n            }\n          }\n\n          item.el = figureEl; // save link to element for getThumbBoundsFn\n          items.push(item);\n        }\n\n        return items;\n      };\n\n      // find nearest parent element\n      var closest = function closest(el, fn) {\n        return el && (fn(el) ? el : closest(el.parentNode, fn));\n      };\n\n      // triggers when user clicks on thumbnail\n      var onThumbnailsClick = function onThumbnailsClick(e) {\n        e = e || window.event;\n        e.preventDefault ? e.preventDefault() : e.returnValue = false;\n\n        var eTarget = e.target || e.srcElement;\n\n        // find root element of slide\n        var clickedListItem = closest(eTarget, function(el) {\n          return el.tagName && el.tagName.toUpperCase() === 'FIGURE';\n        });\n\n        if (!clickedListItem) {\n          return;\n        }\n\n        // find index of clicked item by looping through all child nodes\n        // alternatively, you may define index via data- attribute\n        var clickedGallery = clickedListItem.parentNode,\n\n          // childNodes = clickedListItem.parentNode.childNodes,\n          // numChildNodes = childNodes.length,\n          childNodes = document.getElementsByClassName('thumb'),\n          numChildNodes = childNodes.length,\n          nodeIndex = 0,\n          index;\n\n        for (var i = 0; i < numChildNodes; i++) {\n          if (childNodes[i].nodeType !== 1) {\n            continue;\n          }\n\n          if (childNodes[i] === clickedListItem) {\n            index = nodeIndex;\n            break;\n          }\n          nodeIndex++;\n        }\n\n        if (index >= 0) {\n          // open PhotoSwipe if valid index found\n          openPhotoSwipe(index, clickedGallery);\n        }\n        return false;\n      };\n\n      // parse picture index and gallery index from URL (#&pid=1&gid=2)\n      var photoswipeParseHash = function photoswipeParseHash() {\n        var hash = window.location.hash.substring(1),\n          params = {};\n\n        if (hash.length < 5) {\n          return params;\n        }\n\n        var vars = hash.split('&');\n        for (var i = 0; i < vars.length; i++) {\n          if (!vars[i]) {\n            continue;\n          }\n          var pair = vars[i].split('=');\n          if (pair.length < 2) {\n            continue;\n          }\n          params[pair[0]] = pair[1];\n        }\n\n        if (params.gid) {\n          params.gid = parseInt(params.gid, 10);\n        }\n\n        return params;\n      };\n\n      var openPhotoSwipe = function openPhotoSwipe(index, galleryElement, disableAnimation, fromURL) {\n        var pswpElement = document.querySelectorAll('.pswp')[0],\n          gallery,\n          options,\n          items;\n\n        items = parseThumbnailElements(galleryElement);\n        // define options (if needed)\n        options = {\n\n          // define gallery index (for URL)\n          galleryUID: galleryElement.getAttribute('data-pswp-uid'),\n\n          getThumbBoundsFn: function getThumbBoundsFn(index) {\n            // See Options -> getThumbBoundsFn section of documentation for more info\n            var thumbnail = items[index].el.getElementsByTagName('img')[0],\n              // find thumbnail\n              pageYScroll = window.pageYOffset || document.documentElement.scrollTop,\n              rect = thumbnail.getBoundingClientRect();\n\n            return {\n              x: rect.left,\n              y: rect.top + pageYScroll,\n              w: rect.width\n            };\n          }\n\n        };\n\n        // PhotoSwipe opened from URL\n        if (fromURL) {\n          if (options.galleryPIDs) {\n            // parse real index when custom PIDs are used \n            // http://photoswipe.com/documentation/faq.html#custom-pid-in-url\n            for (var j = 0; j < items.length; j++) {\n              if (items[j].pid == index) {\n                options.index = j;\n                break;\n              }\n            }\n          } else {\n            // in URL indexes start from 1\n            options.index = parseInt(index, 10) - 1;\n          }\n        } else {\n          options.index = parseInt(index, 10);\n        }\n\n        // exit if index not found\n        if (isNaN(options.index)) {\n          return;\n        }\n\n        if (disableAnimation) {\n          options.showAnimationDuration = 0;\n        }\n\n        // Pass data to PhotoSwipe and initialize it\n        gallery = new PhotoSwipe(pswpElement, PhotoSwipeUI_Default, items, options);\n        gallery.init();\n\n        var $tempVideo;\n        var stopVideoHandle = function stopVideoHandle() {\n          if ($tempVideo) {\n            $tempVideo.remove();\n            $tempVideo = null;\n          }\n        };\n        var changeHandle = function changeHandle() {\n          var item = gallery.currItem;\n          stopVideoHandle();\n          if (item.type === 'video') {\n            var $ctn = item.container;\n            var style = $ctn.getElementsByClassName('pswp__img')[0].style;\n            var $video = document.createElement('video');\n            $video.setAttribute('autoplay', 'autoplay');\n            $video.setAttribute('controls', 'controls');\n            $video.setAttribute('src', item.target);\n            $video.style.width = style.width;\n            $video.style.height = style.height;\n            $video.style.position = 'absolute';\n            $video.style.zIndex = 2;\n            $tempVideo = $video;\n            $ctn.appendChild($video);\n          }\n        };\n        gallery.listen('initialZoomIn', changeHandle);\n        gallery.listen('afterChange', changeHandle);\n        gallery.listen('initialZoomOut', stopVideoHandle);\n      };\n\n      // loop through all gallery elements and bind events\n      var galleryElements = document.querySelectorAll(gallerySelector);\n      for (var i = 0, l = galleryElements.length; i < l; i++) {\n        galleryElements[i].setAttribute('data-pswp-uid', i + 1);\n        galleryElements[i].onclick = onThumbnailsClick;\n      }\n\n      // Parse URL and open gallery if it contains #&pid=3&gid=1\n      var hashData = photoswipeParseHash();\n      if (hashData.pid && hashData.gid) {\n        openPhotoSwipe(hashData.pid, galleryElements[hashData.gid - 1], true, true);\n      }\n    };\n\n    var Viewer = function() {\n      function init() {\n        initPhotoSwipeFromDOM('.photos');\n      }\n      return {\n        init: init\n      };\n    }();\n\n    module.exports = Viewer;\n\n    /***/\n  },\n  /* 3 */\n  /***/\n  function(module, exports) {\n\n    /* WEBPACK VAR INJECTION */\n    (function(global) {\n      module.exports = inViewport;\n\n      var instances = [];\n      var supportsMutationObserver = typeof global.MutationObserver === 'function';\n\n      function inViewport(elt, params, cb) {\n        var opts = {\n          container: global.document.body,\n          offset: 0\n        };\n\n        if (params === undefined || typeof params === 'function') {\n          cb = params;\n          params = {};\n        }\n\n        var container = opts.container = params.container || opts.container;\n        var offset = opts.offset = params.offset || opts.offset;\n\n        for (var i = 0; i < instances.length; i++) {\n          if (instances[i].container === container) {\n            return instances[i].isInViewport(elt, offset, cb);\n          }\n        }\n\n        return instances[\n          instances.push(createInViewport(container)) - 1\n        ].isInViewport(elt, offset, cb);\n      }\n\n      function addEvent(el, type, fn) {\n        if (el.attachEvent) {\n          el.attachEvent('on' + type, fn);\n        } else {\n          el.addEventListener(type, fn, false);\n        }\n      }\n\n      function debounce(func, wait, immediate) {\n        var timeout;\n        return function() {\n          var context = this,\n            args = arguments;\n          var callNow = immediate && !timeout;\n          clearTimeout(timeout);\n          timeout = setTimeout(later, wait);\n          if (callNow) func.apply(context, args);\n\n          function later() {\n            timeout = null;\n            if (!immediate) func.apply(context, args);\n          }\n        };\n      }\n\n      // https://github.com/jquery/sizzle/blob/3136f48b90e3edc84cbaaa6f6f7734ef03775a07/sizzle.js#L708\n      var contains = function() {\n        if (!global.document) {\n          return true;\n        }\n        return global.document.documentElement.compareDocumentPosition ?\n          function(a, b) {\n            return !!(a.compareDocumentPosition(b) & 16);\n          } :\n          global.document.documentElement.contains ?\n          function(a, b) {\n            return a !== b && (a.contains ? a.contains(b) : false);\n          } :\n          function(a, b) {\n            while (b = b.parentNode) {\n              if (b === a) {\n                return true;\n              }\n            }\n            return false;\n          };\n      }\n\n      function createInViewport(container) {\n        var watches = createWatches();\n\n        var scrollContainer = container === global.document.body ? global : container;\n        var debouncedCheck = debounce(watches.checkAll(watchInViewport), 15);\n\n        addEvent(scrollContainer, 'scroll', debouncedCheck);\n\n        if (scrollContainer === global) {\n          addEvent(global, 'resize', debouncedCheck);\n        }\n\n        if (supportsMutationObserver) {\n          observeDOM(watches, container, debouncedCheck);\n        }\n\n        // failsafe check, every 200ms we check for visible images\n        // usecase: a hidden parent containing eleements\n        // when the parent becomes visible, we have no event that the children\n        // became visible\n        setInterval(debouncedCheck, 150);\n\n        function isInViewport(elt, offset, cb) {\n          if (!cb) {\n            return isVisible(elt, offset);\n          }\n\n          var remote = createRemote(elt, offset, cb);\n          remote.watch();\n          return remote;\n        }\n\n        function createRemote(elt, offset, cb) {\n          function watch() {\n            watches.add(elt, offset, cb);\n          }\n\n          function dispose() {\n            watches.remove(elt);\n          }\n\n          return {\n            watch: watch,\n            dispose: dispose\n          };\n        }\n\n        function watchInViewport(elt, offset, cb) {\n          if (isVisible(elt, offset)) {\n            watches.remove(elt);\n            cb(elt);\n          }\n        }\n\n        function isVisible(elt, offset) {\n          if (!contains(global.document.documentElement, elt) || !contains(global.document.documentElement, container)) {\n            return false;\n          }\n\n          // Check if the element is visible\n          // https://github.com/jquery/jquery/blob/740e190223d19a114d5373758127285d14d6b71e/src/css/hiddenVisibleSelectors.js\n          if (!elt.offsetWidth || !elt.offsetHeight) {\n            return false;\n          }\n\n          var eltRect = elt.getBoundingClientRect();\n          var viewport = {};\n\n          if (container === global.document.body) {\n            viewport = {\n              top: -offset,\n              left: -offset,\n              right: global.document.documentElement.clientWidth + offset,\n              bottom: global.document.documentElement.clientHeight + offset\n            };\n          } else {\n            var containerRect = container.getBoundingClientRect();\n            viewport = {\n              top: containerRect.top - offset,\n              left: containerRect.left - offset,\n              right: containerRect.right + offset,\n              bottom: containerRect.bottom + offset\n            };\n          }\n\n          // The element must overlap with the visible part of the viewport\n          var visible =\n            (\n              (eltRect.right > viewport.left) &&\n              (eltRect.left < viewport.right) &&\n              (eltRect.bottom > viewport.top) &&\n              (eltRect.top < viewport.bottom)\n            );\n\n          return visible;\n        }\n\n        return {\n          container: container,\n          isInViewport: isInViewport\n        };\n      }\n\n      function createWatches() {\n        var watches = [];\n\n        function add(elt, offset, cb) {\n          if (!isWatched(elt)) {\n            watches.push([elt, offset, cb]);\n          }\n        }\n\n        function remove(elt) {\n          var pos = indexOf(elt);\n          if (pos !== -1) {\n            watches.splice(pos, 1);\n          }\n        }\n\n        function indexOf(elt) {\n          for (var i = watches.length - 1; i >= 0; i--) {\n            if (watches[i][0] === elt) {\n              return i;\n            }\n          }\n          return -1;\n        }\n\n        function isWatched(elt) {\n          return indexOf(elt) !== -1;\n        }\n\n        function checkAll(cb) {\n          return function() {\n            for (var i = watches.length - 1; i >= 0; i--) {\n              cb.apply(this, watches[i]);\n            }\n          };\n        }\n\n        return {\n          add: add,\n          remove: remove,\n          isWatched: isWatched,\n          checkAll: checkAll\n        };\n      }\n\n      function observeDOM(watches, container, cb) {\n        var observer = new MutationObserver(watch);\n        var filter = Array.prototype.filter;\n        var concat = Array.prototype.concat;\n\n        observer.observe(container, {\n          childList: true,\n          subtree: true,\n          // changes like style/width/height/display will be catched\n          attributes: true\n        });\n\n        function watch(mutations) {\n          // some new DOM nodes where previously watched\n          // we should check their positions\n          if (mutations.some(knownNodes) === true) {\n            setTimeout(cb, 0);\n          }\n        }\n\n        function knownNodes(mutation) {\n          var nodes = concat.call([],\n            Array.prototype.slice.call(mutation.addedNodes),\n            mutation.target\n          );\n          return filter.call(nodes, watches.isWatched).length > 0;\n        }\n      }\n\n      /* WEBPACK VAR INJECTION */\n    }.call(exports, (function() {\n      return this;\n    }())))\n\n    /***/\n  }\n  /******/\n]);"},{"_content":"{\n\t\"list\": [{\n\t\t\"date\": \"2018-10\",\n\t\t\"arr\": {\n\t\t\t\"year\": 2018,\n\t\t\t\"month\": 10,\n\t\t\t\"src\": [\"\", \"\", \"\", \"\", \"\", \"\", \"\"],\n\t\t\t\"link\": [\"image1\",\"image2\", \"image3\", \"image7\", \"image9\"],\n\t\t\t\"text\": [\"长城\", \"长城\", \"长城\", \"上海\", \"lol总决赛\"],\n\t\t\t\"type\": [\"image\", \"image\", \"image\",  \"image\", \"image\"]\n\t\t}\n\t}]\n}","source":"photos/ins.json","raw":"{\n\t\"list\": [{\n\t\t\"date\": \"2018-10\",\n\t\t\"arr\": {\n\t\t\t\"year\": 2018,\n\t\t\t\"month\": 10,\n\t\t\t\"src\": [\"\", \"\", \"\", \"\", \"\", \"\", \"\"],\n\t\t\t\"link\": [\"image1\",\"image2\", \"image3\", \"image7\", \"image9\"],\n\t\t\t\"text\": [\"长城\", \"长城\", \"长城\", \"上海\", \"lol总决赛\"],\n\t\t\t\"type\": [\"image\", \"image\", \"image\",  \"image\", \"image\"]\n\t\t}\n\t}]\n}","date":"2018-10-19T18:03:51.302Z","updated":"2018-10-19T18:03:51.301Z","path":"photos/ins.json","layout":"false","title":"","comments":1,"_id":"cjskls62p0009745ba1qfm3nl","content":"{\"list\":[{\"date\":\"2018-10\",\"arr\":{\"year\":2018,\"month\":10,\"src\":[\"\",\"\",\"\",\"\",\"\",\"\",\"\"],\"link\":[\"image1\",\"image2\",\"image3\",\"image7\",\"image9\"],\"text\":[\"长城\",\"长城\",\"长城\",\"上海\",\"lol总决赛\"],\"type\":[\"image\",\"image\",\"image\",\"image\",\"image\"]}}]}","site":{"data":{}},"excerpt":"","more":"{\"list\":[{\"date\":\"2018-10\",\"arr\":{\"year\":2018,\"month\":10,\"src\":[\"\",\"\",\"\",\"\",\"\",\"\",\"\"],\"link\":[\"image1\",\"image2\",\"image3\",\"image7\",\"image9\"],\"text\":[\"长城\",\"长城\",\"长城\",\"上海\",\"lol总决赛\"],\"type\":[\"image\",\"image\",\"image\",\"image\",\"image\"]}}]}"},{"title":"tags","date":"2018-10-09T14:22:22.000Z","type":"tags","_content":"","source":"tags/index.md","raw":"---\ntitle: tags\ndate: 2018-10-09 22:22:22\ntype: \"tags\"\n---\n","updated":"2018-10-09T15:09:25.474Z","path":"tags/index.html","comments":1,"layout":"page","_id":"cjskls62r000b745b8lv0ljlg","content":"","site":{"data":{}},"excerpt":"","more":""}],"Post":[{"_content":"","source":"_posts/mybatis_01.md","raw":"","slug":"mybatis_01","published":1,"date":"2018-10-09T15:16:36.000Z","updated":"2018-11-18T14:51:58.331Z","title":"","comments":1,"layout":"post","photos":[],"link":"","_id":"cjskls61u0000745bcpdovkbs","content":"","site":{"data":{}},"excerpt":"","more":""},{"title":"Dubbo基础 - 配置文件","_content":"\nDubbo基础学习配置\n\n## Dubbo 配置文件\n\n- 消费方配置  \n\n> check\n\n```java\n <dubbo:consumer timeout=\"3000\" check=\"false\"/>\n```\n\ncheck = false 防止启动报错 没有提供者会自动生成代理(测试环境使用)  \ncheck = true 没有提供者直接报错(正式环境使用)\n\n<!-- more -->\n\n> cluster 负载策略(常用的两种)\n\n```java\n<dubbo:reference id=\"productService\" interface=\"com.tupelo.service.ProductService\" cluster=\"failover\" />\n```  \nfailover 重试其他服务 retries 重试次数  \nfailfast 直接报错\n\n> loadbalance 负载配置\n\n```java\n//消费者\n<dubbo:reference id=\"productService\" interface=\"com.tupelo.service.ProductService\"loadbalance=\"random\" />\n\n// 提供者\n<dubbo:service interface=\"com.tupelo.dubboproduct.service.ProductService\" ref=\"productService\" protocol=\"dubbo\" weight=\"20\"/>\n\n```  \nrandom   按权重随机（权重 服务方配置 weight）  \nroundRobin 轮询  \nleastActive 按活跃程度\n\n> 开启缓存\n\n```java\n<dubbo:reference id=\"productService2\" interface=\"com.tupelo.dubboproduct.service.Product2Service\">\n        <dubbo:method name=\"getProduct\" cache=\"lru\"></dubbo:method>\n</dubbo:reference>\n```  \nrandom   按权重随机（权重 服务方配置 weight） \nroundRobin 轮询  \nleastActive 按活跃程度  \n..(自定义缓存)\n\n> 异步请求 async=\"true\" 通常是配合时间通知一起处理 单独处理使用Future类(不提倡)\n\n```java\n<dubbo:reference id=\"productService2\" interface=\"com.tupelo.dubboproduct.service.Product2Service\" async=\"true\">\n    <dubbo:method name=\"getProduct\" cache=\"lru\" onreturn=\"returnCallback\" onthrow=\"errorCallback\"></dubbo:method>\n</dubbo:reference>\n```  \n\n> 事件通知 回调方法一个参数为返回参数 其它参数为入参\n\n```java\n<dubbo:reference id=\"productService2\" interface=\"com.tupelo.dubboproduct.service.Product2Service\">\n    <dubbo:method name=\"getProduct\" cache=\"lru\" onreturn=\"returnCallback\" onthrow=\"errorCallback\"></dubbo:method>\n</dubbo:reference>\n```  \nonreturn 正常返回回调  \nonthrow 方法异常回调\n\n> 回声测试 检查服务是否已经就绪\n\n```java \npublic HashMap test(HttpServletRequest request, HttpServletResponse response) {\n        String[] serviceIds = new String[]{\"productService\",\"userService\",\"orderService\",\"payService\"};\n        HashMap<String,String> retMap = new HashMap<>();\n\n        Object ret = null;\n        for (String id:serviceIds){\n            try {\n                EchoService echoService = (EchoService)ctx.getBean(id);\n                ret = echoService.$echo(\"ok\");\n                retMap.put(id,ret.toString());\n            } catch (Exception e) {\n                retMap.put(id,\"not ready\");\n            }\n        }\n\n        return retMap;\n\n    }\n```\n\n> 泛化调用 当A项目没有得到B项目的接口描述 但是还是想调用B项目的接口\n\n1 配置dubbo引入，设置generic = true\n```java\n<dubbo:reference id=\"otherService\" interface=\"com.enjoy.service.OtherService\" generic=\"true\" />\n```\n2 从IOC容器中取出代理对象，转为泛型接口对象 通过$invoke方法调用目标方法（传入方法名/参数类型/参数值）\n\n```java\npublic String other(HttpServletRequest request, HttpServletResponse response) {\n        GenericService genericService = (GenericService)ctx.getBean(\"otherService\");\n        Object ret = genericService.$invoke(\"getDetail\",new String[]{\"java.lang.String\"},new Object[]{\"name\"});\n        return ret.toString();\n    }\n```","source":"_posts/dubbo-02.md","raw":"---\ntitle: Dubbo基础 - 配置文件\ntags:\n  - Dubbo\n---\n\nDubbo基础学习配置\n\n## Dubbo 配置文件\n\n- 消费方配置  \n\n> check\n\n```java\n <dubbo:consumer timeout=\"3000\" check=\"false\"/>\n```\n\ncheck = false 防止启动报错 没有提供者会自动生成代理(测试环境使用)  \ncheck = true 没有提供者直接报错(正式环境使用)\n\n<!-- more -->\n\n> cluster 负载策略(常用的两种)\n\n```java\n<dubbo:reference id=\"productService\" interface=\"com.tupelo.service.ProductService\" cluster=\"failover\" />\n```  \nfailover 重试其他服务 retries 重试次数  \nfailfast 直接报错\n\n> loadbalance 负载配置\n\n```java\n//消费者\n<dubbo:reference id=\"productService\" interface=\"com.tupelo.service.ProductService\"loadbalance=\"random\" />\n\n// 提供者\n<dubbo:service interface=\"com.tupelo.dubboproduct.service.ProductService\" ref=\"productService\" protocol=\"dubbo\" weight=\"20\"/>\n\n```  \nrandom   按权重随机（权重 服务方配置 weight）  \nroundRobin 轮询  \nleastActive 按活跃程度\n\n> 开启缓存\n\n```java\n<dubbo:reference id=\"productService2\" interface=\"com.tupelo.dubboproduct.service.Product2Service\">\n        <dubbo:method name=\"getProduct\" cache=\"lru\"></dubbo:method>\n</dubbo:reference>\n```  \nrandom   按权重随机（权重 服务方配置 weight） \nroundRobin 轮询  \nleastActive 按活跃程度  \n..(自定义缓存)\n\n> 异步请求 async=\"true\" 通常是配合时间通知一起处理 单独处理使用Future类(不提倡)\n\n```java\n<dubbo:reference id=\"productService2\" interface=\"com.tupelo.dubboproduct.service.Product2Service\" async=\"true\">\n    <dubbo:method name=\"getProduct\" cache=\"lru\" onreturn=\"returnCallback\" onthrow=\"errorCallback\"></dubbo:method>\n</dubbo:reference>\n```  \n\n> 事件通知 回调方法一个参数为返回参数 其它参数为入参\n\n```java\n<dubbo:reference id=\"productService2\" interface=\"com.tupelo.dubboproduct.service.Product2Service\">\n    <dubbo:method name=\"getProduct\" cache=\"lru\" onreturn=\"returnCallback\" onthrow=\"errorCallback\"></dubbo:method>\n</dubbo:reference>\n```  \nonreturn 正常返回回调  \nonthrow 方法异常回调\n\n> 回声测试 检查服务是否已经就绪\n\n```java \npublic HashMap test(HttpServletRequest request, HttpServletResponse response) {\n        String[] serviceIds = new String[]{\"productService\",\"userService\",\"orderService\",\"payService\"};\n        HashMap<String,String> retMap = new HashMap<>();\n\n        Object ret = null;\n        for (String id:serviceIds){\n            try {\n                EchoService echoService = (EchoService)ctx.getBean(id);\n                ret = echoService.$echo(\"ok\");\n                retMap.put(id,ret.toString());\n            } catch (Exception e) {\n                retMap.put(id,\"not ready\");\n            }\n        }\n\n        return retMap;\n\n    }\n```\n\n> 泛化调用 当A项目没有得到B项目的接口描述 但是还是想调用B项目的接口\n\n1 配置dubbo引入，设置generic = true\n```java\n<dubbo:reference id=\"otherService\" interface=\"com.enjoy.service.OtherService\" generic=\"true\" />\n```\n2 从IOC容器中取出代理对象，转为泛型接口对象 通过$invoke方法调用目标方法（传入方法名/参数类型/参数值）\n\n```java\npublic String other(HttpServletRequest request, HttpServletResponse response) {\n        GenericService genericService = (GenericService)ctx.getBean(\"otherService\");\n        Object ret = genericService.$invoke(\"getDetail\",new String[]{\"java.lang.String\"},new Object[]{\"name\"});\n        return ret.toString();\n    }\n```","slug":"dubbo-02","published":1,"date":"2018-12-12T15:35:01.844Z","updated":"2018-12-16T18:09:17.446Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjskls62j0003745bb6tn9y3m","content":"<p>Dubbo基础学习配置</p>\n<h2 id=\"Dubbo-配置文件\"><a href=\"#Dubbo-配置文件\" class=\"headerlink\" title=\"Dubbo 配置文件\"></a>Dubbo 配置文件</h2><ul>\n<li>消费方配置  </li>\n</ul>\n<blockquote>\n<p>check</p>\n</blockquote>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;dubbo:consumer timeout=<span class=\"string\">\"3000\"</span> check=<span class=\"string\">\"false\"</span>/&gt;</span><br></pre></td></tr></table></figure>\n<p>check = false 防止启动报错 没有提供者会自动生成代理(测试环境使用)<br>check = true 没有提供者直接报错(正式环境使用)</p>\n<a id=\"more\"></a>\n<blockquote>\n<p>cluster 负载策略(常用的两种)</p>\n</blockquote>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;dubbo:reference id=<span class=\"string\">\"productService\"</span> <span class=\"class\"><span class=\"keyword\">interface</span></span>=<span class=\"string\">\"com.tupelo.service.ProductService\"</span> cluster=<span class=\"string\">\"failover\"</span> /&gt;</span><br><span class=\"line\">```  </span><br><span class=\"line\">failover 重试其他服务 retries 重试次数  </span><br><span class=\"line\">failfast 直接报错</span><br><span class=\"line\"></span><br><span class=\"line\">&gt; loadbalance 负载配置</span><br><span class=\"line\"></span><br><span class=\"line\">```java</span><br><span class=\"line\"><span class=\"comment\">//消费者</span></span><br><span class=\"line\">&lt;dubbo:reference id=<span class=\"string\">\"productService\"</span> <span class=\"class\"><span class=\"keyword\">interface</span></span>=<span class=\"string\">\"com.tupelo.service.ProductService\"</span>loadbalance=<span class=\"string\">\"random\"</span> /&gt;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 提供者</span></span><br><span class=\"line\">&lt;dubbo:service <span class=\"class\"><span class=\"keyword\">interface</span></span>=<span class=\"string\">\"com.tupelo.dubboproduct.service.ProductService\"</span> ref=<span class=\"string\">\"productService\"</span> protocol=<span class=\"string\">\"dubbo\"</span> weight=<span class=\"string\">\"20\"</span>/&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">```  </span><br><span class=\"line\">random   按权重随机（权重 服务方配置 weight）  </span><br><span class=\"line\">roundRobin 轮询  </span><br><span class=\"line\">leastActive 按活跃程度</span><br><span class=\"line\"></span><br><span class=\"line\">&gt; 开启缓存</span><br><span class=\"line\"></span><br><span class=\"line\">```java</span><br><span class=\"line\">&lt;dubbo:reference id=<span class=\"string\">\"productService2\"</span> <span class=\"class\"><span class=\"keyword\">interface</span></span>=<span class=\"string\">\"com.tupelo.dubboproduct.service.Product2Service\"</span>&gt;</span><br><span class=\"line\">        &lt;dubbo:method name=\"getProduct\" cache=\"lru\"&gt;&lt;/dubbo:method&gt;</span><br><span class=\"line\">&lt;/dubbo:reference&gt;</span><br><span class=\"line\">```  </span><br><span class=\"line\">random   按权重随机（权重 服务方配置 weight） </span><br><span class=\"line\">roundRobin 轮询  </span><br><span class=\"line\">leastActive 按活跃程度  </span><br><span class=\"line\">..(自定义缓存)</span><br><span class=\"line\"></span><br><span class=\"line\">&gt; 异步请求 async=<span class=\"string\">\"true\"</span> 通常是配合时间通知一起处理 单独处理使用Future类(不提倡)</span><br><span class=\"line\"></span><br><span class=\"line\">```java</span><br><span class=\"line\">&lt;dubbo:reference id=<span class=\"string\">\"productService2\"</span> <span class=\"class\"><span class=\"keyword\">interface</span></span>=<span class=\"string\">\"com.tupelo.dubboproduct.service.Product2Service\"</span> async=<span class=\"string\">\"true\"</span>&gt;</span><br><span class=\"line\">    &lt;dubbo:method name=\"getProduct\" cache=\"lru\" onreturn=\"returnCallback\" onthrow=\"errorCallback\"&gt;&lt;/dubbo:method&gt;</span><br><span class=\"line\">&lt;/dubbo:reference&gt;</span><br><span class=\"line\">```  </span><br><span class=\"line\"></span><br><span class=\"line\">&gt; 事件通知 回调方法一个参数为返回参数 其它参数为入参</span><br><span class=\"line\"></span><br><span class=\"line\">```java</span><br><span class=\"line\">&lt;dubbo:reference id=<span class=\"string\">\"productService2\"</span> <span class=\"class\"><span class=\"keyword\">interface</span></span>=<span class=\"string\">\"com.tupelo.dubboproduct.service.Product2Service\"</span>&gt;</span><br><span class=\"line\">    &lt;dubbo:method name=\"getProduct\" cache=\"lru\" onreturn=\"returnCallback\" onthrow=\"errorCallback\"&gt;&lt;/dubbo:method&gt;</span><br><span class=\"line\">&lt;/dubbo:reference&gt;</span><br><span class=\"line\">```  </span><br><span class=\"line\">onreturn 正常返回回调  </span><br><span class=\"line\">onthrow 方法异常回调</span><br><span class=\"line\"></span><br><span class=\"line\">&gt; 回声测试 检查服务是否已经就绪</span><br><span class=\"line\"></span><br><span class=\"line\">```java </span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> HashMap <span class=\"title\">test</span><span class=\"params\">(HttpServletRequest request, HttpServletResponse response)</span> </span>&#123;</span><br><span class=\"line\">        String[] serviceIds = <span class=\"keyword\">new</span> String[]&#123;<span class=\"string\">\"productService\"</span>,<span class=\"string\">\"userService\"</span>,<span class=\"string\">\"orderService\"</span>,<span class=\"string\">\"payService\"</span>&#125;;</span><br><span class=\"line\">        HashMap&lt;String,String&gt; retMap = <span class=\"keyword\">new</span> HashMap&lt;&gt;();</span><br><span class=\"line\"></span><br><span class=\"line\">        Object ret = <span class=\"keyword\">null</span>;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (String id:serviceIds)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">                EchoService echoService = (EchoService)ctx.getBean(id);</span><br><span class=\"line\">                ret = echoService.$echo(<span class=\"string\">\"ok\"</span>);</span><br><span class=\"line\">                retMap.put(id,ret.toString());</span><br><span class=\"line\">            &#125; <span class=\"keyword\">catch</span> (Exception e) &#123;</span><br><span class=\"line\">                retMap.put(id,<span class=\"string\">\"not ready\"</span>);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">return</span> retMap;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>泛化调用 当A项目没有得到B项目的接口描述 但是还是想调用B项目的接口</p>\n</blockquote>\n<p>1 配置dubbo引入，设置generic = true<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;dubbo:reference id=<span class=\"string\">\"otherService\"</span> <span class=\"class\"><span class=\"keyword\">interface</span></span>=<span class=\"string\">\"com.enjoy.service.OtherService\"</span> generic=<span class=\"string\">\"true\"</span> /&gt;</span><br></pre></td></tr></table></figure></p>\n<p>2 从IOC容器中取出代理对象，转为泛型接口对象 通过$invoke方法调用目标方法（传入方法名/参数类型/参数值）</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">other</span><span class=\"params\">(HttpServletRequest request, HttpServletResponse response)</span> </span>&#123;</span><br><span class=\"line\">        GenericService genericService = (GenericService)ctx.getBean(<span class=\"string\">\"otherService\"</span>);</span><br><span class=\"line\">        Object ret = genericService.$invoke(<span class=\"string\">\"getDetail\"</span>,<span class=\"keyword\">new</span> String[]&#123;<span class=\"string\">\"java.lang.String\"</span>&#125;,<span class=\"keyword\">new</span> Object[]&#123;<span class=\"string\">\"name\"</span>&#125;);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> ret.toString();</span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure>","site":{"data":{}},"excerpt":"<p>Dubbo基础学习配置</p>\n<h2 id=\"Dubbo-配置文件\"><a href=\"#Dubbo-配置文件\" class=\"headerlink\" title=\"Dubbo 配置文件\"></a>Dubbo 配置文件</h2><ul>\n<li>消费方配置  </li>\n</ul>\n<blockquote>\n<p>check</p>\n</blockquote>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;dubbo:consumer timeout=<span class=\"string\">\"3000\"</span> check=<span class=\"string\">\"false\"</span>/&gt;</span><br></pre></td></tr></table></figure>\n<p>check = false 防止启动报错 没有提供者会自动生成代理(测试环境使用)<br>check = true 没有提供者直接报错(正式环境使用)</p>","more":"<blockquote>\n<p>cluster 负载策略(常用的两种)</p>\n</blockquote>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;dubbo:reference id=<span class=\"string\">\"productService\"</span> <span class=\"class\"><span class=\"keyword\">interface</span></span>=<span class=\"string\">\"com.tupelo.service.ProductService\"</span> cluster=<span class=\"string\">\"failover\"</span> /&gt;</span><br><span class=\"line\">```  </span><br><span class=\"line\">failover 重试其他服务 retries 重试次数  </span><br><span class=\"line\">failfast 直接报错</span><br><span class=\"line\"></span><br><span class=\"line\">&gt; loadbalance 负载配置</span><br><span class=\"line\"></span><br><span class=\"line\">```java</span><br><span class=\"line\"><span class=\"comment\">//消费者</span></span><br><span class=\"line\">&lt;dubbo:reference id=<span class=\"string\">\"productService\"</span> <span class=\"class\"><span class=\"keyword\">interface</span></span>=<span class=\"string\">\"com.tupelo.service.ProductService\"</span>loadbalance=<span class=\"string\">\"random\"</span> /&gt;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 提供者</span></span><br><span class=\"line\">&lt;dubbo:service <span class=\"class\"><span class=\"keyword\">interface</span></span>=<span class=\"string\">\"com.tupelo.dubboproduct.service.ProductService\"</span> ref=<span class=\"string\">\"productService\"</span> protocol=<span class=\"string\">\"dubbo\"</span> weight=<span class=\"string\">\"20\"</span>/&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">```  </span><br><span class=\"line\">random   按权重随机（权重 服务方配置 weight）  </span><br><span class=\"line\">roundRobin 轮询  </span><br><span class=\"line\">leastActive 按活跃程度</span><br><span class=\"line\"></span><br><span class=\"line\">&gt; 开启缓存</span><br><span class=\"line\"></span><br><span class=\"line\">```java</span><br><span class=\"line\">&lt;dubbo:reference id=<span class=\"string\">\"productService2\"</span> <span class=\"class\"><span class=\"keyword\">interface</span></span>=<span class=\"string\">\"com.tupelo.dubboproduct.service.Product2Service\"</span>&gt;</span><br><span class=\"line\">        &lt;dubbo:method name=\"getProduct\" cache=\"lru\"&gt;&lt;/dubbo:method&gt;</span><br><span class=\"line\">&lt;/dubbo:reference&gt;</span><br><span class=\"line\">```  </span><br><span class=\"line\">random   按权重随机（权重 服务方配置 weight） </span><br><span class=\"line\">roundRobin 轮询  </span><br><span class=\"line\">leastActive 按活跃程度  </span><br><span class=\"line\">..(自定义缓存)</span><br><span class=\"line\"></span><br><span class=\"line\">&gt; 异步请求 async=<span class=\"string\">\"true\"</span> 通常是配合时间通知一起处理 单独处理使用Future类(不提倡)</span><br><span class=\"line\"></span><br><span class=\"line\">```java</span><br><span class=\"line\">&lt;dubbo:reference id=<span class=\"string\">\"productService2\"</span> <span class=\"class\"><span class=\"keyword\">interface</span></span>=<span class=\"string\">\"com.tupelo.dubboproduct.service.Product2Service\"</span> async=<span class=\"string\">\"true\"</span>&gt;</span><br><span class=\"line\">    &lt;dubbo:method name=\"getProduct\" cache=\"lru\" onreturn=\"returnCallback\" onthrow=\"errorCallback\"&gt;&lt;/dubbo:method&gt;</span><br><span class=\"line\">&lt;/dubbo:reference&gt;</span><br><span class=\"line\">```  </span><br><span class=\"line\"></span><br><span class=\"line\">&gt; 事件通知 回调方法一个参数为返回参数 其它参数为入参</span><br><span class=\"line\"></span><br><span class=\"line\">```java</span><br><span class=\"line\">&lt;dubbo:reference id=<span class=\"string\">\"productService2\"</span> <span class=\"class\"><span class=\"keyword\">interface</span></span>=<span class=\"string\">\"com.tupelo.dubboproduct.service.Product2Service\"</span>&gt;</span><br><span class=\"line\">    &lt;dubbo:method name=\"getProduct\" cache=\"lru\" onreturn=\"returnCallback\" onthrow=\"errorCallback\"&gt;&lt;/dubbo:method&gt;</span><br><span class=\"line\">&lt;/dubbo:reference&gt;</span><br><span class=\"line\">```  </span><br><span class=\"line\">onreturn 正常返回回调  </span><br><span class=\"line\">onthrow 方法异常回调</span><br><span class=\"line\"></span><br><span class=\"line\">&gt; 回声测试 检查服务是否已经就绪</span><br><span class=\"line\"></span><br><span class=\"line\">```java </span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> HashMap <span class=\"title\">test</span><span class=\"params\">(HttpServletRequest request, HttpServletResponse response)</span> </span>&#123;</span><br><span class=\"line\">        String[] serviceIds = <span class=\"keyword\">new</span> String[]&#123;<span class=\"string\">\"productService\"</span>,<span class=\"string\">\"userService\"</span>,<span class=\"string\">\"orderService\"</span>,<span class=\"string\">\"payService\"</span>&#125;;</span><br><span class=\"line\">        HashMap&lt;String,String&gt; retMap = <span class=\"keyword\">new</span> HashMap&lt;&gt;();</span><br><span class=\"line\"></span><br><span class=\"line\">        Object ret = <span class=\"keyword\">null</span>;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (String id:serviceIds)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">                EchoService echoService = (EchoService)ctx.getBean(id);</span><br><span class=\"line\">                ret = echoService.$echo(<span class=\"string\">\"ok\"</span>);</span><br><span class=\"line\">                retMap.put(id,ret.toString());</span><br><span class=\"line\">            &#125; <span class=\"keyword\">catch</span> (Exception e) &#123;</span><br><span class=\"line\">                retMap.put(id,<span class=\"string\">\"not ready\"</span>);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">return</span> retMap;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>泛化调用 当A项目没有得到B项目的接口描述 但是还是想调用B项目的接口</p>\n</blockquote>\n<p>1 配置dubbo引入，设置generic = true<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;dubbo:reference id=<span class=\"string\">\"otherService\"</span> <span class=\"class\"><span class=\"keyword\">interface</span></span>=<span class=\"string\">\"com.enjoy.service.OtherService\"</span> generic=<span class=\"string\">\"true\"</span> /&gt;</span><br></pre></td></tr></table></figure></p>\n<p>2 从IOC容器中取出代理对象，转为泛型接口对象 通过$invoke方法调用目标方法（传入方法名/参数类型/参数值）</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">other</span><span class=\"params\">(HttpServletRequest request, HttpServletResponse response)</span> </span>&#123;</span><br><span class=\"line\">        GenericService genericService = (GenericService)ctx.getBean(<span class=\"string\">\"otherService\"</span>);</span><br><span class=\"line\">        Object ret = genericService.$invoke(<span class=\"string\">\"getDetail\"</span>,<span class=\"keyword\">new</span> String[]&#123;<span class=\"string\">\"java.lang.String\"</span>&#125;,<span class=\"keyword\">new</span> Object[]&#123;<span class=\"string\">\"name\"</span>&#125;);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> ret.toString();</span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure>"},{"title":"Dubbo基础 - 配置","_content":"\nDubbo基础学习配置\n\n## Dubbo 基本使用和配置\n\ndubbo主要是使不同的服务通过注册中心互相调用，可以解耦。但是依赖于spring,就是一个spring项目和一个python项目无法通过dubbo互相调用，通过consul可以互相调用。\n\n问题：dubbo调用和maven依赖有什么区别(待查证)\n\n\n### Dubbo配置的四种方式\n\n> XML配置 (使用最多)\n\n> 注解配置\n\n> 配置文件配置\n\n> API配置（研究Dubbo的入口）\n\n<!-- more -->\n- 添加dubbo所需要的依赖（zkclient dubbo）两个\n\n```java\n<dependency>\n\t<groupId>com.101tec</groupId>\n\t<artifactId>zkclient</artifactId>\n\t<version>0.3</version>\n</dependency>\n\n<dependency>\n\t<groupId>com.alibaba</groupId>\n\t<artifactId>dubbo</artifactId>\n\t<version>2.5.7</version>\n\t<scope>compile</scope>\n\t<exclusions>\n\t\t<exclusion>\n\t\t\t<artifactId>spring</artifactId>\n\t\t\t<groupId>org.springframework</groupId>\n\t\t</exclusion>\n\t</exclusions>\n</dependency>\n```\n\n- 新建dubbo的xml配置文件 首先是生产者provider的配置文件（以product为例）\n\n```java\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<beans xmlns=\"http://www.springframework.org/schema/beans\"\n       xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n       xmlns:dubbo=\"http://code.alibabatech.com/schema/dubbo\"\n       xsi:schemaLocation=\"http://www.springframework.org/schema/beans\n             http://www.springframework.org/schema/beans/spring-beans.xsd\n             http://code.alibabatech.com/schema/dubbo\n             http://code.alibabatech.com/schema/dubbo/dubbo.xsd\">\n\n    <!-- 提供方应用信息 用于计算依赖关系 -->\n    <dubbo:application name=\"productService\"/>\n    <!-- 调用协议 -->\n    <dubbo:protocol name=\"dubbo\" port=\"20880\"/>\n    <!-- 使用zookeeper注册中心暴露服务地址 -->\n    <dubbo:registry address=\"zookeeper://127.0.0.1:2181\"/>\n\n\t<!-- 生成远程服务代理 可以和本地bean一样使用demoService  -->\n    <dubbo:service interface=\"com.tupelo.dubboproduct.service.Product2Service\" ref=\"product2Service\" protocol=\"dubbo\"/>\n</beans>\n\t\n```\n\n消费者consumer配置文件\n\n```java\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<beans xmlns=\"http://www.springframework.org/schema/beans\"\n       xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n       xmlns:dubbo=\"http://code.alibabatech.com/schema/dubbo\"\n       xsi:schemaLocation=\"http://www.springframework.org/schema/beans\n\t http://www.springframework.org/schema/beans/spring-beans.xsd        \n\t http://code.alibabatech.com/schema/dubbo        \n\t http://code.alibabatech.com/schema/dubbo/dubbo.xsd\">\n\n    <!-- 提供方应用信息 用于计算依赖关系 -->\n    <dubbo:application name=\"enjoyStore\"/>\n\n    <!-- 使用zookeeper注册中心暴露服务地址 -->\n    <dubbo:registry address=\"zookeeper://127.0.0.1:2181\"/>\n\n    <dubbo:consumer check=\"false\"/>\n\n    <!-- 生成远程服务代理 可以和本地bean一样使用demoService -->\n    <dubbo:reference id=\"userService\" interface=\"com.enjoy.service.UserService\"  />\n</beans>\n```\n\n- 配置文件配置方式 在properties文件中配置相关属性补充xml中没有的属性 优先级最低 (yml文件为例)\n\n```java\ndubbo:\n  protocol:\n    name: dubbo\n    port: 20880\n  application:\n    name: productService\n  registry:\n    address: zookeeper://localhost:2181\n```\n\n- 注解方式（半注解方式 springboot是使用全部注解）使用<dubbo:annotation>去代替<dubbo:reference>和<dubbo:service>标签 同时生产者Service注解使用dubbo的注解 消费者的调用时使用@Reference注解代替@Autowired注解\n\n```java\n\n<dubbo:annotation package=\"com.cc.controller\" />\n\n调用时：\n\t//@Autowired\n\t@Reference\n    private ProductService productService;\n\n实现类：\n\t//@org.springframework.stereotype.Service\n\t@com.alibaba.dubbo.config.annotation.Service\n\tpublic class ProductServiceImpl implements ProductService(){...}\n```\n\n- API方式（待定）\n\n\n\n","source":"_posts/dubbo-01.md","raw":"---\ntitle: Dubbo基础 - 配置\ntags:\n  - Dubbo\n---\n\nDubbo基础学习配置\n\n## Dubbo 基本使用和配置\n\ndubbo主要是使不同的服务通过注册中心互相调用，可以解耦。但是依赖于spring,就是一个spring项目和一个python项目无法通过dubbo互相调用，通过consul可以互相调用。\n\n问题：dubbo调用和maven依赖有什么区别(待查证)\n\n\n### Dubbo配置的四种方式\n\n> XML配置 (使用最多)\n\n> 注解配置\n\n> 配置文件配置\n\n> API配置（研究Dubbo的入口）\n\n<!-- more -->\n- 添加dubbo所需要的依赖（zkclient dubbo）两个\n\n```java\n<dependency>\n\t<groupId>com.101tec</groupId>\n\t<artifactId>zkclient</artifactId>\n\t<version>0.3</version>\n</dependency>\n\n<dependency>\n\t<groupId>com.alibaba</groupId>\n\t<artifactId>dubbo</artifactId>\n\t<version>2.5.7</version>\n\t<scope>compile</scope>\n\t<exclusions>\n\t\t<exclusion>\n\t\t\t<artifactId>spring</artifactId>\n\t\t\t<groupId>org.springframework</groupId>\n\t\t</exclusion>\n\t</exclusions>\n</dependency>\n```\n\n- 新建dubbo的xml配置文件 首先是生产者provider的配置文件（以product为例）\n\n```java\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<beans xmlns=\"http://www.springframework.org/schema/beans\"\n       xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n       xmlns:dubbo=\"http://code.alibabatech.com/schema/dubbo\"\n       xsi:schemaLocation=\"http://www.springframework.org/schema/beans\n             http://www.springframework.org/schema/beans/spring-beans.xsd\n             http://code.alibabatech.com/schema/dubbo\n             http://code.alibabatech.com/schema/dubbo/dubbo.xsd\">\n\n    <!-- 提供方应用信息 用于计算依赖关系 -->\n    <dubbo:application name=\"productService\"/>\n    <!-- 调用协议 -->\n    <dubbo:protocol name=\"dubbo\" port=\"20880\"/>\n    <!-- 使用zookeeper注册中心暴露服务地址 -->\n    <dubbo:registry address=\"zookeeper://127.0.0.1:2181\"/>\n\n\t<!-- 生成远程服务代理 可以和本地bean一样使用demoService  -->\n    <dubbo:service interface=\"com.tupelo.dubboproduct.service.Product2Service\" ref=\"product2Service\" protocol=\"dubbo\"/>\n</beans>\n\t\n```\n\n消费者consumer配置文件\n\n```java\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<beans xmlns=\"http://www.springframework.org/schema/beans\"\n       xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n       xmlns:dubbo=\"http://code.alibabatech.com/schema/dubbo\"\n       xsi:schemaLocation=\"http://www.springframework.org/schema/beans\n\t http://www.springframework.org/schema/beans/spring-beans.xsd        \n\t http://code.alibabatech.com/schema/dubbo        \n\t http://code.alibabatech.com/schema/dubbo/dubbo.xsd\">\n\n    <!-- 提供方应用信息 用于计算依赖关系 -->\n    <dubbo:application name=\"enjoyStore\"/>\n\n    <!-- 使用zookeeper注册中心暴露服务地址 -->\n    <dubbo:registry address=\"zookeeper://127.0.0.1:2181\"/>\n\n    <dubbo:consumer check=\"false\"/>\n\n    <!-- 生成远程服务代理 可以和本地bean一样使用demoService -->\n    <dubbo:reference id=\"userService\" interface=\"com.enjoy.service.UserService\"  />\n</beans>\n```\n\n- 配置文件配置方式 在properties文件中配置相关属性补充xml中没有的属性 优先级最低 (yml文件为例)\n\n```java\ndubbo:\n  protocol:\n    name: dubbo\n    port: 20880\n  application:\n    name: productService\n  registry:\n    address: zookeeper://localhost:2181\n```\n\n- 注解方式（半注解方式 springboot是使用全部注解）使用<dubbo:annotation>去代替<dubbo:reference>和<dubbo:service>标签 同时生产者Service注解使用dubbo的注解 消费者的调用时使用@Reference注解代替@Autowired注解\n\n```java\n\n<dubbo:annotation package=\"com.cc.controller\" />\n\n调用时：\n\t//@Autowired\n\t@Reference\n    private ProductService productService;\n\n实现类：\n\t//@org.springframework.stereotype.Service\n\t@com.alibaba.dubbo.config.annotation.Service\n\tpublic class ProductServiceImpl implements ProductService(){...}\n```\n\n- API方式（待定）\n\n\n\n","slug":"dubbo-01","published":1,"date":"2018-12-03T16:40:12.582Z","updated":"2018-12-12T16:08:37.841Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjskls62l0005745blq32t15k","content":"<p>Dubbo基础学习配置</p>\n<h2 id=\"Dubbo-基本使用和配置\"><a href=\"#Dubbo-基本使用和配置\" class=\"headerlink\" title=\"Dubbo 基本使用和配置\"></a>Dubbo 基本使用和配置</h2><p>dubbo主要是使不同的服务通过注册中心互相调用，可以解耦。但是依赖于spring,就是一个spring项目和一个python项目无法通过dubbo互相调用，通过consul可以互相调用。</p>\n<p>问题：dubbo调用和maven依赖有什么区别(待查证)</p>\n<h3 id=\"Dubbo配置的四种方式\"><a href=\"#Dubbo配置的四种方式\" class=\"headerlink\" title=\"Dubbo配置的四种方式\"></a>Dubbo配置的四种方式</h3><blockquote>\n<p>XML配置 (使用最多)</p>\n</blockquote>\n<blockquote>\n<p>注解配置</p>\n</blockquote>\n<blockquote>\n<p>配置文件配置</p>\n</blockquote>\n<blockquote>\n<p>API配置（研究Dubbo的入口）</p>\n</blockquote>\n<a id=\"more\"></a>\n<ul>\n<li>添加dubbo所需要的依赖（zkclient dubbo）两个</li>\n</ul>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;dependency&gt;</span><br><span class=\"line\">\t&lt;groupId&gt;com.101tec&lt;/groupId&gt;</span><br><span class=\"line\">\t&lt;artifactId&gt;zkclient&lt;/artifactId&gt;</span><br><span class=\"line\">\t&lt;version&gt;0.3&lt;/version&gt;</span><br><span class=\"line\">&lt;/dependency&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;dependency&gt;</span><br><span class=\"line\">\t&lt;groupId&gt;com.alibaba&lt;/groupId&gt;</span><br><span class=\"line\">\t&lt;artifactId&gt;dubbo&lt;/artifactId&gt;</span><br><span class=\"line\">\t&lt;version&gt;2.5.7&lt;/version&gt;</span><br><span class=\"line\">\t&lt;scope&gt;compile&lt;/scope&gt;</span><br><span class=\"line\">\t&lt;exclusions&gt;</span><br><span class=\"line\">\t\t&lt;exclusion&gt;</span><br><span class=\"line\">\t\t\t&lt;artifactId&gt;spring&lt;/artifactId&gt;</span><br><span class=\"line\">\t\t\t&lt;groupId&gt;org.springframework&lt;/groupId&gt;</span><br><span class=\"line\">\t\t&lt;/exclusion&gt;</span><br><span class=\"line\">\t&lt;/exclusions&gt;</span><br><span class=\"line\">&lt;/dependency&gt;</span><br></pre></td></tr></table></figure>\n<ul>\n<li>新建dubbo的xml配置文件 首先是生产者provider的配置文件（以product为例）</li>\n</ul>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;?xml version=<span class=\"string\">\"1.0\"</span> encoding=<span class=\"string\">\"UTF-8\"</span>?&gt;</span><br><span class=\"line\">&lt;beans xmlns=<span class=\"string\">\"http://www.springframework.org/schema/beans\"</span></span><br><span class=\"line\">       xmlns:xsi=<span class=\"string\">\"http://www.w3.org/2001/XMLSchema-instance\"</span></span><br><span class=\"line\">       xmlns:dubbo=<span class=\"string\">\"http://code.alibabatech.com/schema/dubbo\"</span></span><br><span class=\"line\">       xsi:schemaLocation=<span class=\"string\">\"http://www.springframework.org/schema/beans</span></span><br><span class=\"line\"><span class=\"string\">             http://www.springframework.org/schema/beans/spring-beans.xsd</span></span><br><span class=\"line\"><span class=\"string\">             http://code.alibabatech.com/schema/dubbo</span></span><br><span class=\"line\"><span class=\"string\">             http://code.alibabatech.com/schema/dubbo/dubbo.xsd\"</span>&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">    &lt;!-- 提供方应用信息 用于计算依赖关系 --&gt;</span><br><span class=\"line\">    &lt;dubbo:application name=<span class=\"string\">\"productService\"</span>/&gt;</span><br><span class=\"line\">    &lt;!-- 调用协议 --&gt;</span><br><span class=\"line\">    &lt;dubbo:protocol name=<span class=\"string\">\"dubbo\"</span> port=<span class=\"string\">\"20880\"</span>/&gt;</span><br><span class=\"line\">    &lt;!-- 使用zookeeper注册中心暴露服务地址 --&gt;</span><br><span class=\"line\">    &lt;dubbo:registry address=<span class=\"string\">\"zookeeper://127.0.0.1:2181\"</span>/&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">\t&lt;!-- 生成远程服务代理 可以和本地bean一样使用demoService  --&gt;</span><br><span class=\"line\">    &lt;dubbo:service <span class=\"class\"><span class=\"keyword\">interface</span></span>=<span class=\"string\">\"com.tupelo.dubboproduct.service.Product2Service\"</span> ref=<span class=\"string\">\"product2Service\"</span> protocol=<span class=\"string\">\"dubbo\"</span>/&gt;</span><br><span class=\"line\">&lt;/beans&gt;</span><br></pre></td></tr></table></figure>\n<p>消费者consumer配置文件</p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;?xml version=<span class=\"string\">\"1.0\"</span> encoding=<span class=\"string\">\"UTF-8\"</span>?&gt;</span><br><span class=\"line\">&lt;beans xmlns=<span class=\"string\">\"http://www.springframework.org/schema/beans\"</span></span><br><span class=\"line\">       xmlns:xsi=<span class=\"string\">\"http://www.w3.org/2001/XMLSchema-instance\"</span></span><br><span class=\"line\">       xmlns:dubbo=<span class=\"string\">\"http://code.alibabatech.com/schema/dubbo\"</span></span><br><span class=\"line\">       xsi:schemaLocation=<span class=\"string\">\"http://www.springframework.org/schema/beans</span></span><br><span class=\"line\"><span class=\"string\">\t http://www.springframework.org/schema/beans/spring-beans.xsd        </span></span><br><span class=\"line\"><span class=\"string\">\t http://code.alibabatech.com/schema/dubbo        </span></span><br><span class=\"line\"><span class=\"string\">\t http://code.alibabatech.com/schema/dubbo/dubbo.xsd\"</span>&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">    &lt;!-- 提供方应用信息 用于计算依赖关系 --&gt;</span><br><span class=\"line\">    &lt;dubbo:application name=<span class=\"string\">\"enjoyStore\"</span>/&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">    &lt;!-- 使用zookeeper注册中心暴露服务地址 --&gt;</span><br><span class=\"line\">    &lt;dubbo:registry address=<span class=\"string\">\"zookeeper://127.0.0.1:2181\"</span>/&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">    &lt;dubbo:consumer check=<span class=\"string\">\"false\"</span>/&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">    &lt;!-- 生成远程服务代理 可以和本地bean一样使用demoService --&gt;</span><br><span class=\"line\">    &lt;dubbo:reference id=<span class=\"string\">\"userService\"</span> <span class=\"class\"><span class=\"keyword\">interface</span></span>=<span class=\"string\">\"com.enjoy.service.UserService\"</span>  /&gt;</span><br><span class=\"line\">&lt;/beans&gt;</span><br></pre></td></tr></table></figure>\n<ul>\n<li>配置文件配置方式 在properties文件中配置相关属性补充xml中没有的属性 优先级最低 (yml文件为例)</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">dubbo:</span><br><span class=\"line\">  protocol:</span><br><span class=\"line\">    name: dubbo</span><br><span class=\"line\">    port: <span class=\"number\">20880</span></span><br><span class=\"line\">  application:</span><br><span class=\"line\">    name: productService</span><br><span class=\"line\">  registry:</span><br><span class=\"line\">    address: zookeeper:<span class=\"comment\">//localhost:2181</span></span><br></pre></td></tr></table></figure>\n<ul>\n<li>注解方式（半注解方式 springboot是使用全部注解）使用<a href=\"dubbo:annotation\" target=\"_blank\" rel=\"noopener\">dubbo:annotation</a>去代替<a href=\"dubbo:reference\" target=\"_blank\" rel=\"noopener\">dubbo:reference</a>和<a href=\"dubbo:service\" target=\"_blank\" rel=\"noopener\">dubbo:service</a>标签 同时生产者Service注解使用dubbo的注解 消费者的调用时使用@Reference注解代替@Autowired注解</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">&lt;dubbo:annotation <span class=\"keyword\">package</span>=<span class=\"string\">\"com.cc.controller\"</span> /&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">调用时：</span><br><span class=\"line\">\t<span class=\"comment\">//@Autowired</span></span><br><span class=\"line\">\t<span class=\"meta\">@Reference</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> ProductService productService;</span><br><span class=\"line\"></span><br><span class=\"line\">实现类：</span><br><span class=\"line\">\t<span class=\"comment\">//@org.springframework.stereotype.Service</span></span><br><span class=\"line\">\t<span class=\"meta\">@com</span>.alibaba.dubbo.config.annotation.Service</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> class ProductServiceImpl implements <span class=\"title\">ProductService</span><span class=\"params\">()</span></span>&#123;...&#125;</span><br></pre></td></tr></table></figure>\n<ul>\n<li>API方式（待定）</li>\n</ul>\n","site":{"data":{}},"excerpt":"<p>Dubbo基础学习配置</p>\n<h2 id=\"Dubbo-基本使用和配置\"><a href=\"#Dubbo-基本使用和配置\" class=\"headerlink\" title=\"Dubbo 基本使用和配置\"></a>Dubbo 基本使用和配置</h2><p>dubbo主要是使不同的服务通过注册中心互相调用，可以解耦。但是依赖于spring,就是一个spring项目和一个python项目无法通过dubbo互相调用，通过consul可以互相调用。</p>\n<p>问题：dubbo调用和maven依赖有什么区别(待查证)</p>\n<h3 id=\"Dubbo配置的四种方式\"><a href=\"#Dubbo配置的四种方式\" class=\"headerlink\" title=\"Dubbo配置的四种方式\"></a>Dubbo配置的四种方式</h3><blockquote>\n<p>XML配置 (使用最多)</p>\n</blockquote>\n<blockquote>\n<p>注解配置</p>\n</blockquote>\n<blockquote>\n<p>配置文件配置</p>\n</blockquote>\n<blockquote>\n<p>API配置（研究Dubbo的入口）</p>\n</blockquote>","more":"<ul>\n<li>添加dubbo所需要的依赖（zkclient dubbo）两个</li>\n</ul>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;dependency&gt;</span><br><span class=\"line\">\t&lt;groupId&gt;com.101tec&lt;/groupId&gt;</span><br><span class=\"line\">\t&lt;artifactId&gt;zkclient&lt;/artifactId&gt;</span><br><span class=\"line\">\t&lt;version&gt;0.3&lt;/version&gt;</span><br><span class=\"line\">&lt;/dependency&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;dependency&gt;</span><br><span class=\"line\">\t&lt;groupId&gt;com.alibaba&lt;/groupId&gt;</span><br><span class=\"line\">\t&lt;artifactId&gt;dubbo&lt;/artifactId&gt;</span><br><span class=\"line\">\t&lt;version&gt;2.5.7&lt;/version&gt;</span><br><span class=\"line\">\t&lt;scope&gt;compile&lt;/scope&gt;</span><br><span class=\"line\">\t&lt;exclusions&gt;</span><br><span class=\"line\">\t\t&lt;exclusion&gt;</span><br><span class=\"line\">\t\t\t&lt;artifactId&gt;spring&lt;/artifactId&gt;</span><br><span class=\"line\">\t\t\t&lt;groupId&gt;org.springframework&lt;/groupId&gt;</span><br><span class=\"line\">\t\t&lt;/exclusion&gt;</span><br><span class=\"line\">\t&lt;/exclusions&gt;</span><br><span class=\"line\">&lt;/dependency&gt;</span><br></pre></td></tr></table></figure>\n<ul>\n<li>新建dubbo的xml配置文件 首先是生产者provider的配置文件（以product为例）</li>\n</ul>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;?xml version=<span class=\"string\">\"1.0\"</span> encoding=<span class=\"string\">\"UTF-8\"</span>?&gt;</span><br><span class=\"line\">&lt;beans xmlns=<span class=\"string\">\"http://www.springframework.org/schema/beans\"</span></span><br><span class=\"line\">       xmlns:xsi=<span class=\"string\">\"http://www.w3.org/2001/XMLSchema-instance\"</span></span><br><span class=\"line\">       xmlns:dubbo=<span class=\"string\">\"http://code.alibabatech.com/schema/dubbo\"</span></span><br><span class=\"line\">       xsi:schemaLocation=<span class=\"string\">\"http://www.springframework.org/schema/beans</span></span><br><span class=\"line\"><span class=\"string\">             http://www.springframework.org/schema/beans/spring-beans.xsd</span></span><br><span class=\"line\"><span class=\"string\">             http://code.alibabatech.com/schema/dubbo</span></span><br><span class=\"line\"><span class=\"string\">             http://code.alibabatech.com/schema/dubbo/dubbo.xsd\"</span>&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">    &lt;!-- 提供方应用信息 用于计算依赖关系 --&gt;</span><br><span class=\"line\">    &lt;dubbo:application name=<span class=\"string\">\"productService\"</span>/&gt;</span><br><span class=\"line\">    &lt;!-- 调用协议 --&gt;</span><br><span class=\"line\">    &lt;dubbo:protocol name=<span class=\"string\">\"dubbo\"</span> port=<span class=\"string\">\"20880\"</span>/&gt;</span><br><span class=\"line\">    &lt;!-- 使用zookeeper注册中心暴露服务地址 --&gt;</span><br><span class=\"line\">    &lt;dubbo:registry address=<span class=\"string\">\"zookeeper://127.0.0.1:2181\"</span>/&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">\t&lt;!-- 生成远程服务代理 可以和本地bean一样使用demoService  --&gt;</span><br><span class=\"line\">    &lt;dubbo:service <span class=\"class\"><span class=\"keyword\">interface</span></span>=<span class=\"string\">\"com.tupelo.dubboproduct.service.Product2Service\"</span> ref=<span class=\"string\">\"product2Service\"</span> protocol=<span class=\"string\">\"dubbo\"</span>/&gt;</span><br><span class=\"line\">&lt;/beans&gt;</span><br></pre></td></tr></table></figure>\n<p>消费者consumer配置文件</p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;?xml version=<span class=\"string\">\"1.0\"</span> encoding=<span class=\"string\">\"UTF-8\"</span>?&gt;</span><br><span class=\"line\">&lt;beans xmlns=<span class=\"string\">\"http://www.springframework.org/schema/beans\"</span></span><br><span class=\"line\">       xmlns:xsi=<span class=\"string\">\"http://www.w3.org/2001/XMLSchema-instance\"</span></span><br><span class=\"line\">       xmlns:dubbo=<span class=\"string\">\"http://code.alibabatech.com/schema/dubbo\"</span></span><br><span class=\"line\">       xsi:schemaLocation=<span class=\"string\">\"http://www.springframework.org/schema/beans</span></span><br><span class=\"line\"><span class=\"string\">\t http://www.springframework.org/schema/beans/spring-beans.xsd        </span></span><br><span class=\"line\"><span class=\"string\">\t http://code.alibabatech.com/schema/dubbo        </span></span><br><span class=\"line\"><span class=\"string\">\t http://code.alibabatech.com/schema/dubbo/dubbo.xsd\"</span>&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">    &lt;!-- 提供方应用信息 用于计算依赖关系 --&gt;</span><br><span class=\"line\">    &lt;dubbo:application name=<span class=\"string\">\"enjoyStore\"</span>/&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">    &lt;!-- 使用zookeeper注册中心暴露服务地址 --&gt;</span><br><span class=\"line\">    &lt;dubbo:registry address=<span class=\"string\">\"zookeeper://127.0.0.1:2181\"</span>/&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">    &lt;dubbo:consumer check=<span class=\"string\">\"false\"</span>/&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">    &lt;!-- 生成远程服务代理 可以和本地bean一样使用demoService --&gt;</span><br><span class=\"line\">    &lt;dubbo:reference id=<span class=\"string\">\"userService\"</span> <span class=\"class\"><span class=\"keyword\">interface</span></span>=<span class=\"string\">\"com.enjoy.service.UserService\"</span>  /&gt;</span><br><span class=\"line\">&lt;/beans&gt;</span><br></pre></td></tr></table></figure>\n<ul>\n<li>配置文件配置方式 在properties文件中配置相关属性补充xml中没有的属性 优先级最低 (yml文件为例)</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">dubbo:</span><br><span class=\"line\">  protocol:</span><br><span class=\"line\">    name: dubbo</span><br><span class=\"line\">    port: <span class=\"number\">20880</span></span><br><span class=\"line\">  application:</span><br><span class=\"line\">    name: productService</span><br><span class=\"line\">  registry:</span><br><span class=\"line\">    address: zookeeper:<span class=\"comment\">//localhost:2181</span></span><br></pre></td></tr></table></figure>\n<ul>\n<li>注解方式（半注解方式 springboot是使用全部注解）使用<a href=\"dubbo:annotation\" target=\"_blank\" rel=\"noopener\">dubbo:annotation</a>去代替<a href=\"dubbo:reference\" target=\"_blank\" rel=\"noopener\">dubbo:reference</a>和<a href=\"dubbo:service\" target=\"_blank\" rel=\"noopener\">dubbo:service</a>标签 同时生产者Service注解使用dubbo的注解 消费者的调用时使用@Reference注解代替@Autowired注解</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">&lt;dubbo:annotation <span class=\"keyword\">package</span>=<span class=\"string\">\"com.cc.controller\"</span> /&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">调用时：</span><br><span class=\"line\">\t<span class=\"comment\">//@Autowired</span></span><br><span class=\"line\">\t<span class=\"meta\">@Reference</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> ProductService productService;</span><br><span class=\"line\"></span><br><span class=\"line\">实现类：</span><br><span class=\"line\">\t<span class=\"comment\">//@org.springframework.stereotype.Service</span></span><br><span class=\"line\">\t<span class=\"meta\">@com</span>.alibaba.dubbo.config.annotation.Service</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> class ProductServiceImpl implements <span class=\"title\">ProductService</span><span class=\"params\">()</span></span>&#123;...&#125;</span><br></pre></td></tr></table></figure>\n<ul>\n<li>API方式（待定）</li>\n</ul>"},{"title":"Dubbo - rpc调用过程","_content":"\nDubbo rpc调用过程\n\n## Dubbo rpc调用过程\n\n- Dubbo的RPC服务暴露和引入\n\n![服务暴露和引入](http://image.tupelo.top/rpc%E6%9C%8D%E5%8A%A1%E6%9A%B4%E9%9C%B2.png)\n\n<!-- more -->\n\n    - 服务暴露：建立一个中转对象（它能调到Impl），来接收网络请求，返回结果到网络\n    - 服务引入：找寻到对中转对象，创建一个代理，代理向中转对象传请求参数，等待返回值\n    - URL总线：中转对象---URL信息，一一对应，通过URL来找寻中转对象 \n    - URL包含完整rpc信息： rmi://192.168.56.1:20881/com.enjoy.service.ProductService?anyhost=true&application=storeServer&dubbo=2.5.7&generic=false&interface=com.enjoy.service.ProductService&methods=modify,getDetail,status&pid=2476&side=provider&timestamp=1542267315993\n\n- Dubbo的消费与服务端连接图示\n\n![连接图示](http://image.tupelo.top/%E6%B6%88%E8%B4%B9%E4%B8%8E%E6%9C%8D%E5%8A%A1%E7%AB%AF%E8%BF%9E%E6%8E%A5.png)\n\n- Dubbo的启动流程\n\n![启动流程](http://image.tupelo.top/dubbo%E5%90%AF%E5%8A%A8%E8%BF%87%E7%A8%8B.png)","source":"_posts/dubbo-03.md","raw":"---\ntitle: Dubbo - rpc调用过程\ntags:\n  - Dubbo\n---\n\nDubbo rpc调用过程\n\n## Dubbo rpc调用过程\n\n- Dubbo的RPC服务暴露和引入\n\n![服务暴露和引入](http://image.tupelo.top/rpc%E6%9C%8D%E5%8A%A1%E6%9A%B4%E9%9C%B2.png)\n\n<!-- more -->\n\n    - 服务暴露：建立一个中转对象（它能调到Impl），来接收网络请求，返回结果到网络\n    - 服务引入：找寻到对中转对象，创建一个代理，代理向中转对象传请求参数，等待返回值\n    - URL总线：中转对象---URL信息，一一对应，通过URL来找寻中转对象 \n    - URL包含完整rpc信息： rmi://192.168.56.1:20881/com.enjoy.service.ProductService?anyhost=true&application=storeServer&dubbo=2.5.7&generic=false&interface=com.enjoy.service.ProductService&methods=modify,getDetail,status&pid=2476&side=provider&timestamp=1542267315993\n\n- Dubbo的消费与服务端连接图示\n\n![连接图示](http://image.tupelo.top/%E6%B6%88%E8%B4%B9%E4%B8%8E%E6%9C%8D%E5%8A%A1%E7%AB%AF%E8%BF%9E%E6%8E%A5.png)\n\n- Dubbo的启动流程\n\n![启动流程](http://image.tupelo.top/dubbo%E5%90%AF%E5%8A%A8%E8%BF%87%E7%A8%8B.png)","slug":"dubbo-03","published":1,"date":"2018-12-16T15:57:13.023Z","updated":"2018-12-17T15:35:04.035Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjskls62o0008745baqzvo4a5","content":"<p>Dubbo rpc调用过程</p>\n<h2 id=\"Dubbo-rpc调用过程\"><a href=\"#Dubbo-rpc调用过程\" class=\"headerlink\" title=\"Dubbo rpc调用过程\"></a>Dubbo rpc调用过程</h2><ul>\n<li>Dubbo的RPC服务暴露和引入</li>\n</ul>\n<p><img src=\"http://image.tupelo.top/rpc%E6%9C%8D%E5%8A%A1%E6%9A%B4%E9%9C%B2.png\" alt=\"服务暴露和引入\"></p>\n<a id=\"more\"></a>\n<pre><code>- 服务暴露：建立一个中转对象（它能调到Impl），来接收网络请求，返回结果到网络\n- 服务引入：找寻到对中转对象，创建一个代理，代理向中转对象传请求参数，等待返回值\n- URL总线：中转对象---URL信息，一一对应，通过URL来找寻中转对象 \n- URL包含完整rpc信息： rmi://192.168.56.1:20881/com.enjoy.service.ProductService?anyhost=true&amp;application=storeServer&amp;dubbo=2.5.7&amp;generic=false&amp;interface=com.enjoy.service.ProductService&amp;methods=modify,getDetail,status&amp;pid=2476&amp;side=provider&amp;timestamp=1542267315993\n</code></pre><ul>\n<li>Dubbo的消费与服务端连接图示</li>\n</ul>\n<p><img src=\"http://image.tupelo.top/%E6%B6%88%E8%B4%B9%E4%B8%8E%E6%9C%8D%E5%8A%A1%E7%AB%AF%E8%BF%9E%E6%8E%A5.png\" alt=\"连接图示\"></p>\n<ul>\n<li>Dubbo的启动流程</li>\n</ul>\n<p><img src=\"http://image.tupelo.top/dubbo%E5%90%AF%E5%8A%A8%E8%BF%87%E7%A8%8B.png\" alt=\"启动流程\"></p>\n","site":{"data":{}},"excerpt":"<p>Dubbo rpc调用过程</p>\n<h2 id=\"Dubbo-rpc调用过程\"><a href=\"#Dubbo-rpc调用过程\" class=\"headerlink\" title=\"Dubbo rpc调用过程\"></a>Dubbo rpc调用过程</h2><ul>\n<li>Dubbo的RPC服务暴露和引入</li>\n</ul>\n<p><img src=\"http://image.tupelo.top/rpc%E6%9C%8D%E5%8A%A1%E6%9A%B4%E9%9C%B2.png\" alt=\"服务暴露和引入\"></p>","more":"<pre><code>- 服务暴露：建立一个中转对象（它能调到Impl），来接收网络请求，返回结果到网络\n- 服务引入：找寻到对中转对象，创建一个代理，代理向中转对象传请求参数，等待返回值\n- URL总线：中转对象---URL信息，一一对应，通过URL来找寻中转对象 \n- URL包含完整rpc信息： rmi://192.168.56.1:20881/com.enjoy.service.ProductService?anyhost=true&amp;application=storeServer&amp;dubbo=2.5.7&amp;generic=false&amp;interface=com.enjoy.service.ProductService&amp;methods=modify,getDetail,status&amp;pid=2476&amp;side=provider&amp;timestamp=1542267315993\n</code></pre><ul>\n<li>Dubbo的消费与服务端连接图示</li>\n</ul>\n<p><img src=\"http://image.tupelo.top/%E6%B6%88%E8%B4%B9%E4%B8%8E%E6%9C%8D%E5%8A%A1%E7%AB%AF%E8%BF%9E%E6%8E%A5.png\" alt=\"连接图示\"></p>\n<ul>\n<li>Dubbo的启动流程</li>\n</ul>\n<p><img src=\"http://image.tupelo.top/dubbo%E5%90%AF%E5%8A%A8%E8%BF%87%E7%A8%8B.png\" alt=\"启动流程\"></p>"},{"title":"Dubbo - Spi机制","_content":"\nDubbo Spi机制\n\n## Dubbo Spi机制\n\n本质是解决同一个接口，有多种实现时，使用者如何能够方便选择实现的问题\n\n\n<!-- more -->\n\n\n#### Spi机制(策略模式)\n\n\n- jdk的Spi机制\n\n![jdk的Spi机制](http://image.tupelo.top/jdkspi.png)\n\njdk中，选择SpiService的实现，方法是在jar中放置一个META-INF/services目录，目录中存放一个文本文件(文件名----是SpiService接口的全路径名)，文本中列入你选择的实现类(一行放一个------是实现类的全路径名),有了上述配置，在java程序中，使用ServiceLoader.load(SpiService.class)，\n即可将配置中选择的实现类，实例化并放入一个集合中\n\n```java\n//配置文件\ncom.enjoy.spi.service.RmiSpiServiceImpl\ncom.enjoy.spi.service.RestSpiServiceImpl\n\n//加载\npublic static void main(String[] args) throws IOException {\n        //加载接口\n        ServiceLoader<SpiService> spiLoader = ServiceLoader.load(SpiService.class);\n        Iterator<SpiService> iteratorSpi = spiLoader.iterator();\n        while (iteratorSpi.hasNext()) {\n            SpiService spiService = iteratorSpi.next();\n            spiService.sayHello();\n        }\n}\n```\n\n- Dubbo的Spi机制\n\n![spi机制](http://image.tupelo.top/spi%E6%9C%BA%E5%88%B6.png)\n\n```java\n<dubbo:reference  id=\"productService\" cluster=\"failover\" interface=\"com.enjoy.service.ProductService\" />\n<dubbo:reference  id=\"productService1\" cluster=\"failsafe\" interface=\"com.enjoy.service.ProductService\" />\n<dubbo:reference  id=\"productService2\" cluster=\"failfast\" interface=\"com.enjoy.service.ProductService\" />\n```\n\n与jdk相比,dubbo将选择权下放到了配置文件中(你配置谁，它使为你实例化谁)dubbo的目标,以cluster为例,failsafe/failover/failfast都是cluster的一种实现,现在我    们可以在标签配置时,方便地进行选择.凡是dubbo中,接口上有 @SPI 标注的，都表明此接口支持扩展.\n\n\n- 自定义扩展(LoadBalance为例)\n\n引入maven支持\n```java\n<dependency>\n    <groupId>com.alibaba</groupId>\n    <artifactId>dubbo</artifactId>\n    <version>2.5.7</version>\n    <scope>provided</scope>\n</dependency>\n```\n\n新建一个类 定义使用第一个服务的负载规则\n```java\npublic class FirstLoadBalance implements LoadBalance {//filter\n    /**\n     * @param invokers 所有provider的实现\n     * @param url\n     * @param invocation\n     * @param <T>\n     * @return\n     * @throws RpcException\n     */\n    @Override\n    public <T> Invoker<T> select(List<Invoker<T>> invokers, URL url, Invocation invocation)\n            throws RpcException {\n        System.out.println(\"启动第一个\");\n        //固定使用第一个\n        return invokers.get(0);\n    }\n}\n```\n\n添加配置文件 路径为 resources/META-INF/dubbo,文件名和接口(LoadBalance)全路径名一样,com.alibaba.dubbo.rpc.cluster.LoadBalance,以 key-value 方式添加内容\n\n```java\nfirst=com.enjoy.loadbalance.FirstLoadBalance\n```\n\n在消费方dubbo配置文件中就可以使用自定义规则了\n\n```java\n<dubbo:reference  id=\"userService\" interface=\"com.enjoy.service.UserService\" loadbalance=\"first\" />\n\n```\n\n\n#### Spi实现原理---核心ExtensionLoader\n\nprotocol是个代理类，不是真实的协议实现\n\n```java\nprivate static final Protocol refprotocol = ExtensionLoader.getExtensionLoader(Protocol.class).getAdaptiveExtension();\n```\n\n    ExtensionLoader的加载步骤\n    1、getExtensionLoader(Protocol.class)为protocol接口生成一个加载器\n    2、getAdaptiveExtension()，使用加载器生成一个代理对象---- protocol接口对象\n    3、代理对象执行时，根据参数（扩展名extName）选择实际对象\n    4、每个接口扩展点,对应一个ExtensionLoader加载器，如：\n       protocol      ExtensionLoader实例<protocol>\n       filter        ExtensionLoader实例<filter>\n       loadbalance   ExtensionLoader实例<loadbalance>\n\n代理类的创建，是通过动态代码，生成一个类源码，然后经过编译得到代理类的class(Demo)(代码hexo报错,原因待查,直接上图片)\n![demo](http://image.tupelo.top/demo.png)\n\n- Dubbo的ExtensionLoader执行逻辑\n\n![Dubbo的ExtensionLoader执行逻辑](http://image.tupelo.top/extension%E6%89%A7%E8%A1%8C%E9%80%BB%E8%BE%91-2.png)\n\n    a、dubbo启动加载实现类时，以   key-实例 方式map缓存各个实现类\n    b、实际调用时，通过key --取实现需要那个实现\n    c、调用的发生，由生成的代理对象的来发起，最终是从URL总线中，找出extName值，extName做为别说，在缓存map中取出正确的实现实现类\n\n\n- Dubbo的扩展框架\n\n![Dubbo的扩展框架](http://image.tupelo.top/loader%E6%9C%BA%E5%88%B6.png)\n- Dubbo的发布订阅\n    - 主要是RegistryProtocol,在zk中发布订阅.\n    - 当有新的消费节点或者服务节点进入时,触发notify,刷新所有的url信息.\n    - zk中的信息,在dubbo代码中,一样要缓存一份(查询会消耗时间),用于容错/负载等动作,此缓存信息的如何与zk中信息保持一致性,依赖发布订阅机制(监听器的及时回调).\n    - dubbo注册中心选择很多(数据库功能+发布订阅功能),之所以推荐使用zk,是因为zk在分布式环境中,搭建集群(数据冗余)方便,抗灾性强.\n\n\n","source":"_posts/dubbo-04.md","raw":"---\ntitle: Dubbo - Spi机制\ntags:\n  - Dubbo\n---\n\nDubbo Spi机制\n\n## Dubbo Spi机制\n\n本质是解决同一个接口，有多种实现时，使用者如何能够方便选择实现的问题\n\n\n<!-- more -->\n\n\n#### Spi机制(策略模式)\n\n\n- jdk的Spi机制\n\n![jdk的Spi机制](http://image.tupelo.top/jdkspi.png)\n\njdk中，选择SpiService的实现，方法是在jar中放置一个META-INF/services目录，目录中存放一个文本文件(文件名----是SpiService接口的全路径名)，文本中列入你选择的实现类(一行放一个------是实现类的全路径名),有了上述配置，在java程序中，使用ServiceLoader.load(SpiService.class)，\n即可将配置中选择的实现类，实例化并放入一个集合中\n\n```java\n//配置文件\ncom.enjoy.spi.service.RmiSpiServiceImpl\ncom.enjoy.spi.service.RestSpiServiceImpl\n\n//加载\npublic static void main(String[] args) throws IOException {\n        //加载接口\n        ServiceLoader<SpiService> spiLoader = ServiceLoader.load(SpiService.class);\n        Iterator<SpiService> iteratorSpi = spiLoader.iterator();\n        while (iteratorSpi.hasNext()) {\n            SpiService spiService = iteratorSpi.next();\n            spiService.sayHello();\n        }\n}\n```\n\n- Dubbo的Spi机制\n\n![spi机制](http://image.tupelo.top/spi%E6%9C%BA%E5%88%B6.png)\n\n```java\n<dubbo:reference  id=\"productService\" cluster=\"failover\" interface=\"com.enjoy.service.ProductService\" />\n<dubbo:reference  id=\"productService1\" cluster=\"failsafe\" interface=\"com.enjoy.service.ProductService\" />\n<dubbo:reference  id=\"productService2\" cluster=\"failfast\" interface=\"com.enjoy.service.ProductService\" />\n```\n\n与jdk相比,dubbo将选择权下放到了配置文件中(你配置谁，它使为你实例化谁)dubbo的目标,以cluster为例,failsafe/failover/failfast都是cluster的一种实现,现在我    们可以在标签配置时,方便地进行选择.凡是dubbo中,接口上有 @SPI 标注的，都表明此接口支持扩展.\n\n\n- 自定义扩展(LoadBalance为例)\n\n引入maven支持\n```java\n<dependency>\n    <groupId>com.alibaba</groupId>\n    <artifactId>dubbo</artifactId>\n    <version>2.5.7</version>\n    <scope>provided</scope>\n</dependency>\n```\n\n新建一个类 定义使用第一个服务的负载规则\n```java\npublic class FirstLoadBalance implements LoadBalance {//filter\n    /**\n     * @param invokers 所有provider的实现\n     * @param url\n     * @param invocation\n     * @param <T>\n     * @return\n     * @throws RpcException\n     */\n    @Override\n    public <T> Invoker<T> select(List<Invoker<T>> invokers, URL url, Invocation invocation)\n            throws RpcException {\n        System.out.println(\"启动第一个\");\n        //固定使用第一个\n        return invokers.get(0);\n    }\n}\n```\n\n添加配置文件 路径为 resources/META-INF/dubbo,文件名和接口(LoadBalance)全路径名一样,com.alibaba.dubbo.rpc.cluster.LoadBalance,以 key-value 方式添加内容\n\n```java\nfirst=com.enjoy.loadbalance.FirstLoadBalance\n```\n\n在消费方dubbo配置文件中就可以使用自定义规则了\n\n```java\n<dubbo:reference  id=\"userService\" interface=\"com.enjoy.service.UserService\" loadbalance=\"first\" />\n\n```\n\n\n#### Spi实现原理---核心ExtensionLoader\n\nprotocol是个代理类，不是真实的协议实现\n\n```java\nprivate static final Protocol refprotocol = ExtensionLoader.getExtensionLoader(Protocol.class).getAdaptiveExtension();\n```\n\n    ExtensionLoader的加载步骤\n    1、getExtensionLoader(Protocol.class)为protocol接口生成一个加载器\n    2、getAdaptiveExtension()，使用加载器生成一个代理对象---- protocol接口对象\n    3、代理对象执行时，根据参数（扩展名extName）选择实际对象\n    4、每个接口扩展点,对应一个ExtensionLoader加载器，如：\n       protocol      ExtensionLoader实例<protocol>\n       filter        ExtensionLoader实例<filter>\n       loadbalance   ExtensionLoader实例<loadbalance>\n\n代理类的创建，是通过动态代码，生成一个类源码，然后经过编译得到代理类的class(Demo)(代码hexo报错,原因待查,直接上图片)\n![demo](http://image.tupelo.top/demo.png)\n\n- Dubbo的ExtensionLoader执行逻辑\n\n![Dubbo的ExtensionLoader执行逻辑](http://image.tupelo.top/extension%E6%89%A7%E8%A1%8C%E9%80%BB%E8%BE%91-2.png)\n\n    a、dubbo启动加载实现类时，以   key-实例 方式map缓存各个实现类\n    b、实际调用时，通过key --取实现需要那个实现\n    c、调用的发生，由生成的代理对象的来发起，最终是从URL总线中，找出extName值，extName做为别说，在缓存map中取出正确的实现实现类\n\n\n- Dubbo的扩展框架\n\n![Dubbo的扩展框架](http://image.tupelo.top/loader%E6%9C%BA%E5%88%B6.png)\n- Dubbo的发布订阅\n    - 主要是RegistryProtocol,在zk中发布订阅.\n    - 当有新的消费节点或者服务节点进入时,触发notify,刷新所有的url信息.\n    - zk中的信息,在dubbo代码中,一样要缓存一份(查询会消耗时间),用于容错/负载等动作,此缓存信息的如何与zk中信息保持一致性,依赖发布订阅机制(监听器的及时回调).\n    - dubbo注册中心选择很多(数据库功能+发布订阅功能),之所以推荐使用zk,是因为zk在分布式环境中,搭建集群(数据冗余)方便,抗灾性强.\n\n\n","slug":"dubbo-04","published":1,"date":"2018-12-16T16:16:21.248Z","updated":"2018-12-16T18:03:55.552Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjskls62q000a745bzyai88p7","content":"<p>Dubbo Spi机制</p>\n<h2 id=\"Dubbo-Spi机制\"><a href=\"#Dubbo-Spi机制\" class=\"headerlink\" title=\"Dubbo Spi机制\"></a>Dubbo Spi机制</h2><p>本质是解决同一个接口，有多种实现时，使用者如何能够方便选择实现的问题</p>\n<a id=\"more\"></a>\n<h4 id=\"Spi机制-策略模式\"><a href=\"#Spi机制-策略模式\" class=\"headerlink\" title=\"Spi机制(策略模式)\"></a>Spi机制(策略模式)</h4><ul>\n<li>jdk的Spi机制</li>\n</ul>\n<p><img src=\"http://image.tupelo.top/jdkspi.png\" alt=\"jdk的Spi机制\"></p>\n<p>jdk中，选择SpiService的实现，方法是在jar中放置一个META-INF/services目录，目录中存放一个文本文件(文件名—-是SpiService接口的全路径名)，文本中列入你选择的实现类(一行放一个——是实现类的全路径名),有了上述配置，在java程序中，使用ServiceLoader.load(SpiService.class)，<br>即可将配置中选择的实现类，实例化并放入一个集合中</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//配置文件</span></span><br><span class=\"line\">com.enjoy.spi.service.RmiSpiServiceImpl</span><br><span class=\"line\">com.enjoy.spi.service.RestSpiServiceImpl</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//加载</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> <span class=\"keyword\">throws</span> IOException </span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">//加载接口</span></span><br><span class=\"line\">        ServiceLoader&lt;SpiService&gt; spiLoader = ServiceLoader.load(SpiService.class);</span><br><span class=\"line\">        Iterator&lt;SpiService&gt; iteratorSpi = spiLoader.iterator();</span><br><span class=\"line\">        <span class=\"keyword\">while</span> (iteratorSpi.hasNext()) &#123;</span><br><span class=\"line\">            SpiService spiService = iteratorSpi.next();</span><br><span class=\"line\">            spiService.sayHello();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<ul>\n<li>Dubbo的Spi机制</li>\n</ul>\n<p><img src=\"http://image.tupelo.top/spi%E6%9C%BA%E5%88%B6.png\" alt=\"spi机制\"></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;dubbo:reference  id=<span class=\"string\">\"productService\"</span> cluster=<span class=\"string\">\"failover\"</span> <span class=\"class\"><span class=\"keyword\">interface</span></span>=<span class=\"string\">\"com.enjoy.service.ProductService\"</span> /&gt;</span><br><span class=\"line\">&lt;dubbo:reference  id=<span class=\"string\">\"productService1\"</span> cluster=<span class=\"string\">\"failsafe\"</span> <span class=\"class\"><span class=\"keyword\">interface</span></span>=<span class=\"string\">\"com.enjoy.service.ProductService\"</span> /&gt;</span><br><span class=\"line\">&lt;dubbo:reference  id=<span class=\"string\">\"productService2\"</span> cluster=<span class=\"string\">\"failfast\"</span> <span class=\"class\"><span class=\"keyword\">interface</span></span>=<span class=\"string\">\"com.enjoy.service.ProductService\"</span> /&gt;</span><br></pre></td></tr></table></figure>\n<p>与jdk相比,dubbo将选择权下放到了配置文件中(你配置谁，它使为你实例化谁)dubbo的目标,以cluster为例,failsafe/failover/failfast都是cluster的一种实现,现在我    们可以在标签配置时,方便地进行选择.凡是dubbo中,接口上有 @SPI 标注的，都表明此接口支持扩展.</p>\n<ul>\n<li>自定义扩展(LoadBalance为例)</li>\n</ul>\n<p>引入maven支持<br><figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;dependency&gt;</span><br><span class=\"line\">    &lt;groupId&gt;com.alibaba&lt;/groupId&gt;</span><br><span class=\"line\">    &lt;artifactId&gt;dubbo&lt;/artifactId&gt;</span><br><span class=\"line\">    &lt;version&gt;2.5.7&lt;/version&gt;</span><br><span class=\"line\">    &lt;scope&gt;provided&lt;/scope&gt;</span><br><span class=\"line\">&lt;/dependency&gt;</span><br></pre></td></tr></table></figure></p>\n<p>新建一个类 定义使用第一个服务的负载规则<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">FirstLoadBalance</span> <span class=\"keyword\">implements</span> <span class=\"title\">LoadBalance</span> </span>&#123;<span class=\"comment\">//filter</span></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> invokers 所有provider的实现</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> url</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> invocation</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> &lt;T&gt;</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span></span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@throws</span> RpcException</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> &lt;T&gt; <span class=\"function\">Invoker&lt;T&gt; <span class=\"title\">select</span><span class=\"params\">(List&lt;Invoker&lt;T&gt;&gt; invokers, URL url, Invocation invocation)</span></span></span><br><span class=\"line\"><span class=\"function\">            <span class=\"keyword\">throws</span> RpcException </span>&#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"启动第一个\"</span>);</span><br><span class=\"line\">        <span class=\"comment\">//固定使用第一个</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> invokers.get(<span class=\"number\">0</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>添加配置文件 路径为 resources/META-INF/dubbo,文件名和接口(LoadBalance)全路径名一样,com.alibaba.dubbo.rpc.cluster.LoadBalance,以 key-value 方式添加内容</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">first=com.enjoy.loadbalance.FirstLoadBalance</span><br></pre></td></tr></table></figure>\n<p>在消费方dubbo配置文件中就可以使用自定义规则了</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;dubbo:reference  id=<span class=\"string\">\"userService\"</span> <span class=\"class\"><span class=\"keyword\">interface</span></span>=<span class=\"string\">\"com.enjoy.service.UserService\"</span> loadbalance=<span class=\"string\">\"first\"</span> /&gt;</span><br></pre></td></tr></table></figure>\n<h4 id=\"Spi实现原理—核心ExtensionLoader\"><a href=\"#Spi实现原理—核心ExtensionLoader\" class=\"headerlink\" title=\"Spi实现原理—核心ExtensionLoader\"></a>Spi实现原理—核心ExtensionLoader</h4><p>protocol是个代理类，不是真实的协议实现</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> Protocol refprotocol = ExtensionLoader.getExtensionLoader(Protocol.class).getAdaptiveExtension();</span><br></pre></td></tr></table></figure>\n<pre><code>ExtensionLoader的加载步骤\n1、getExtensionLoader(Protocol.class)为protocol接口生成一个加载器\n2、getAdaptiveExtension()，使用加载器生成一个代理对象---- protocol接口对象\n3、代理对象执行时，根据参数（扩展名extName）选择实际对象\n4、每个接口扩展点,对应一个ExtensionLoader加载器，如：\n   protocol      ExtensionLoader实例&lt;protocol&gt;\n   filter        ExtensionLoader实例&lt;filter&gt;\n   loadbalance   ExtensionLoader实例&lt;loadbalance&gt;\n</code></pre><p>代理类的创建，是通过动态代码，生成一个类源码，然后经过编译得到代理类的class(Demo)(代码hexo报错,原因待查,直接上图片)<br><img src=\"http://image.tupelo.top/demo.png\" alt=\"demo\"></p>\n<ul>\n<li>Dubbo的ExtensionLoader执行逻辑</li>\n</ul>\n<p><img src=\"http://image.tupelo.top/extension%E6%89%A7%E8%A1%8C%E9%80%BB%E8%BE%91-2.png\" alt=\"Dubbo的ExtensionLoader执行逻辑\"></p>\n<pre><code>a、dubbo启动加载实现类时，以   key-实例 方式map缓存各个实现类\nb、实际调用时，通过key --取实现需要那个实现\nc、调用的发生，由生成的代理对象的来发起，最终是从URL总线中，找出extName值，extName做为别说，在缓存map中取出正确的实现实现类\n</code></pre><ul>\n<li>Dubbo的扩展框架</li>\n</ul>\n<p><img src=\"http://image.tupelo.top/loader%E6%9C%BA%E5%88%B6.png\" alt=\"Dubbo的扩展框架\"></p>\n<ul>\n<li>Dubbo的发布订阅<ul>\n<li>主要是RegistryProtocol,在zk中发布订阅.</li>\n<li>当有新的消费节点或者服务节点进入时,触发notify,刷新所有的url信息.</li>\n<li>zk中的信息,在dubbo代码中,一样要缓存一份(查询会消耗时间),用于容错/负载等动作,此缓存信息的如何与zk中信息保持一致性,依赖发布订阅机制(监听器的及时回调).</li>\n<li>dubbo注册中心选择很多(数据库功能+发布订阅功能),之所以推荐使用zk,是因为zk在分布式环境中,搭建集群(数据冗余)方便,抗灾性强.</li>\n</ul>\n</li>\n</ul>\n","site":{"data":{}},"excerpt":"<p>Dubbo Spi机制</p>\n<h2 id=\"Dubbo-Spi机制\"><a href=\"#Dubbo-Spi机制\" class=\"headerlink\" title=\"Dubbo Spi机制\"></a>Dubbo Spi机制</h2><p>本质是解决同一个接口，有多种实现时，使用者如何能够方便选择实现的问题</p>","more":"<h4 id=\"Spi机制-策略模式\"><a href=\"#Spi机制-策略模式\" class=\"headerlink\" title=\"Spi机制(策略模式)\"></a>Spi机制(策略模式)</h4><ul>\n<li>jdk的Spi机制</li>\n</ul>\n<p><img src=\"http://image.tupelo.top/jdkspi.png\" alt=\"jdk的Spi机制\"></p>\n<p>jdk中，选择SpiService的实现，方法是在jar中放置一个META-INF/services目录，目录中存放一个文本文件(文件名—-是SpiService接口的全路径名)，文本中列入你选择的实现类(一行放一个——是实现类的全路径名),有了上述配置，在java程序中，使用ServiceLoader.load(SpiService.class)，<br>即可将配置中选择的实现类，实例化并放入一个集合中</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//配置文件</span></span><br><span class=\"line\">com.enjoy.spi.service.RmiSpiServiceImpl</span><br><span class=\"line\">com.enjoy.spi.service.RestSpiServiceImpl</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//加载</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> <span class=\"keyword\">throws</span> IOException </span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">//加载接口</span></span><br><span class=\"line\">        ServiceLoader&lt;SpiService&gt; spiLoader = ServiceLoader.load(SpiService.class);</span><br><span class=\"line\">        Iterator&lt;SpiService&gt; iteratorSpi = spiLoader.iterator();</span><br><span class=\"line\">        <span class=\"keyword\">while</span> (iteratorSpi.hasNext()) &#123;</span><br><span class=\"line\">            SpiService spiService = iteratorSpi.next();</span><br><span class=\"line\">            spiService.sayHello();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<ul>\n<li>Dubbo的Spi机制</li>\n</ul>\n<p><img src=\"http://image.tupelo.top/spi%E6%9C%BA%E5%88%B6.png\" alt=\"spi机制\"></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;dubbo:reference  id=<span class=\"string\">\"productService\"</span> cluster=<span class=\"string\">\"failover\"</span> <span class=\"class\"><span class=\"keyword\">interface</span></span>=<span class=\"string\">\"com.enjoy.service.ProductService\"</span> /&gt;</span><br><span class=\"line\">&lt;dubbo:reference  id=<span class=\"string\">\"productService1\"</span> cluster=<span class=\"string\">\"failsafe\"</span> <span class=\"class\"><span class=\"keyword\">interface</span></span>=<span class=\"string\">\"com.enjoy.service.ProductService\"</span> /&gt;</span><br><span class=\"line\">&lt;dubbo:reference  id=<span class=\"string\">\"productService2\"</span> cluster=<span class=\"string\">\"failfast\"</span> <span class=\"class\"><span class=\"keyword\">interface</span></span>=<span class=\"string\">\"com.enjoy.service.ProductService\"</span> /&gt;</span><br></pre></td></tr></table></figure>\n<p>与jdk相比,dubbo将选择权下放到了配置文件中(你配置谁，它使为你实例化谁)dubbo的目标,以cluster为例,failsafe/failover/failfast都是cluster的一种实现,现在我    们可以在标签配置时,方便地进行选择.凡是dubbo中,接口上有 @SPI 标注的，都表明此接口支持扩展.</p>\n<ul>\n<li>自定义扩展(LoadBalance为例)</li>\n</ul>\n<p>引入maven支持<br><figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;dependency&gt;</span><br><span class=\"line\">    &lt;groupId&gt;com.alibaba&lt;/groupId&gt;</span><br><span class=\"line\">    &lt;artifactId&gt;dubbo&lt;/artifactId&gt;</span><br><span class=\"line\">    &lt;version&gt;2.5.7&lt;/version&gt;</span><br><span class=\"line\">    &lt;scope&gt;provided&lt;/scope&gt;</span><br><span class=\"line\">&lt;/dependency&gt;</span><br></pre></td></tr></table></figure></p>\n<p>新建一个类 定义使用第一个服务的负载规则<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">FirstLoadBalance</span> <span class=\"keyword\">implements</span> <span class=\"title\">LoadBalance</span> </span>&#123;<span class=\"comment\">//filter</span></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> invokers 所有provider的实现</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> url</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> invocation</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> &lt;T&gt;</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span></span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@throws</span> RpcException</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> &lt;T&gt; <span class=\"function\">Invoker&lt;T&gt; <span class=\"title\">select</span><span class=\"params\">(List&lt;Invoker&lt;T&gt;&gt; invokers, URL url, Invocation invocation)</span></span></span><br><span class=\"line\"><span class=\"function\">            <span class=\"keyword\">throws</span> RpcException </span>&#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"启动第一个\"</span>);</span><br><span class=\"line\">        <span class=\"comment\">//固定使用第一个</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> invokers.get(<span class=\"number\">0</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>添加配置文件 路径为 resources/META-INF/dubbo,文件名和接口(LoadBalance)全路径名一样,com.alibaba.dubbo.rpc.cluster.LoadBalance,以 key-value 方式添加内容</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">first=com.enjoy.loadbalance.FirstLoadBalance</span><br></pre></td></tr></table></figure>\n<p>在消费方dubbo配置文件中就可以使用自定义规则了</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;dubbo:reference  id=<span class=\"string\">\"userService\"</span> <span class=\"class\"><span class=\"keyword\">interface</span></span>=<span class=\"string\">\"com.enjoy.service.UserService\"</span> loadbalance=<span class=\"string\">\"first\"</span> /&gt;</span><br></pre></td></tr></table></figure>\n<h4 id=\"Spi实现原理—核心ExtensionLoader\"><a href=\"#Spi实现原理—核心ExtensionLoader\" class=\"headerlink\" title=\"Spi实现原理—核心ExtensionLoader\"></a>Spi实现原理—核心ExtensionLoader</h4><p>protocol是个代理类，不是真实的协议实现</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> Protocol refprotocol = ExtensionLoader.getExtensionLoader(Protocol.class).getAdaptiveExtension();</span><br></pre></td></tr></table></figure>\n<pre><code>ExtensionLoader的加载步骤\n1、getExtensionLoader(Protocol.class)为protocol接口生成一个加载器\n2、getAdaptiveExtension()，使用加载器生成一个代理对象---- protocol接口对象\n3、代理对象执行时，根据参数（扩展名extName）选择实际对象\n4、每个接口扩展点,对应一个ExtensionLoader加载器，如：\n   protocol      ExtensionLoader实例&lt;protocol&gt;\n   filter        ExtensionLoader实例&lt;filter&gt;\n   loadbalance   ExtensionLoader实例&lt;loadbalance&gt;\n</code></pre><p>代理类的创建，是通过动态代码，生成一个类源码，然后经过编译得到代理类的class(Demo)(代码hexo报错,原因待查,直接上图片)<br><img src=\"http://image.tupelo.top/demo.png\" alt=\"demo\"></p>\n<ul>\n<li>Dubbo的ExtensionLoader执行逻辑</li>\n</ul>\n<p><img src=\"http://image.tupelo.top/extension%E6%89%A7%E8%A1%8C%E9%80%BB%E8%BE%91-2.png\" alt=\"Dubbo的ExtensionLoader执行逻辑\"></p>\n<pre><code>a、dubbo启动加载实现类时，以   key-实例 方式map缓存各个实现类\nb、实际调用时，通过key --取实现需要那个实现\nc、调用的发生，由生成的代理对象的来发起，最终是从URL总线中，找出extName值，extName做为别说，在缓存map中取出正确的实现实现类\n</code></pre><ul>\n<li>Dubbo的扩展框架</li>\n</ul>\n<p><img src=\"http://image.tupelo.top/loader%E6%9C%BA%E5%88%B6.png\" alt=\"Dubbo的扩展框架\"></p>\n<ul>\n<li>Dubbo的发布订阅<ul>\n<li>主要是RegistryProtocol,在zk中发布订阅.</li>\n<li>当有新的消费节点或者服务节点进入时,触发notify,刷新所有的url信息.</li>\n<li>zk中的信息,在dubbo代码中,一样要缓存一份(查询会消耗时间),用于容错/负载等动作,此缓存信息的如何与zk中信息保持一致性,依赖发布订阅机制(监听器的及时回调).</li>\n<li>dubbo注册中心选择很多(数据库功能+发布订阅功能),之所以推荐使用zk,是因为zk在分布式环境中,搭建集群(数据冗余)方便,抗灾性强.</li>\n</ul>\n</li>\n</ul>"},{"title":"Dubbo - 总结","_content":"\nDubbo 总结\n\n> 参考官方文档：http://dubbo.apache.org/zh-cn/docs/user/references/xml/dubbo-service.html\n\n<!-- more -->\n\n## Dubbo 总结\n\n#### dubbo初始化流程\n\n- 入口\n    - spring标签DubboNameSpaceHandler\n    - referencebean + servicebean \n    - 继承了spring initalizingBean接口\n    - afterPropertiesSet\n    - protocol.refer(url) + protocol.export(url)+(registryURL)\n\n- 消费端\n    - RegistryProtocol.refer\n    - zkRegistry.subscribe\n    - 触发监听器回调\n    - registryDictory \n    - protocol.refer \n    - dubboProtocol.refer + interface\n    - 消费方interface代理对象\n\n- 服务端\n    - RegistryProtocol.export \n    - protocol.export \n    - 创建中转对象\n    - zkRegistry.subscribe注册\n\n\n#### spi\n\njdk的spi：把实现类,装入一个list中\ndubbo的spi：把实现类,装入一个map中(配置文件指定一key),key指代实现类\n\n#### RegistryProtocol\n\ndubbo偷懒，借用protocol流程模块，把注册模块，伪装成protocol协议(注册协议),注册协议跟其它不一样，任何协议dubbo/rmi/rest,要生效,都必须注册,因此RegistryProtocol是最优先被调用，然后再转给真实的协议\n\n#### 服务治理\n\n- dubbo只是服务治理，springcloud包含所有全套微服务功能\n- dubbo把rpc做了成透明化的调度,减少出错机率(spring cloud易出错)\n- springcloud的远程调用，没能完全透明化。透明化调度，意思你使用它，像本地服务一样用。\n- dubbo控制台，可以关闭某个服务，不对外开放（开发环境常用）\n","source":"_posts/dubbo-05.md","raw":"---\ntitle: Dubbo - 总结\ntags:\n  - Dubbo\n---\n\nDubbo 总结\n\n> 参考官方文档：http://dubbo.apache.org/zh-cn/docs/user/references/xml/dubbo-service.html\n\n<!-- more -->\n\n## Dubbo 总结\n\n#### dubbo初始化流程\n\n- 入口\n    - spring标签DubboNameSpaceHandler\n    - referencebean + servicebean \n    - 继承了spring initalizingBean接口\n    - afterPropertiesSet\n    - protocol.refer(url) + protocol.export(url)+(registryURL)\n\n- 消费端\n    - RegistryProtocol.refer\n    - zkRegistry.subscribe\n    - 触发监听器回调\n    - registryDictory \n    - protocol.refer \n    - dubboProtocol.refer + interface\n    - 消费方interface代理对象\n\n- 服务端\n    - RegistryProtocol.export \n    - protocol.export \n    - 创建中转对象\n    - zkRegistry.subscribe注册\n\n\n#### spi\n\njdk的spi：把实现类,装入一个list中\ndubbo的spi：把实现类,装入一个map中(配置文件指定一key),key指代实现类\n\n#### RegistryProtocol\n\ndubbo偷懒，借用protocol流程模块，把注册模块，伪装成protocol协议(注册协议),注册协议跟其它不一样，任何协议dubbo/rmi/rest,要生效,都必须注册,因此RegistryProtocol是最优先被调用，然后再转给真实的协议\n\n#### 服务治理\n\n- dubbo只是服务治理，springcloud包含所有全套微服务功能\n- dubbo把rpc做了成透明化的调度,减少出错机率(spring cloud易出错)\n- springcloud的远程调用，没能完全透明化。透明化调度，意思你使用它，像本地服务一样用。\n- dubbo控制台，可以关闭某个服务，不对外开放（开发环境常用）\n","slug":"dubbo-05","published":1,"date":"2018-12-16T17:21:51.855Z","updated":"2018-12-16T18:06:02.942Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjskls62s000c745b8yf6o5rn","content":"<p>Dubbo 总结</p>\n<blockquote>\n<p>参考官方文档：<a href=\"http://dubbo.apache.org/zh-cn/docs/user/references/xml/dubbo-service.html\" target=\"_blank\" rel=\"noopener\">http://dubbo.apache.org/zh-cn/docs/user/references/xml/dubbo-service.html</a></p>\n</blockquote>\n<a id=\"more\"></a>\n<h2 id=\"Dubbo-总结\"><a href=\"#Dubbo-总结\" class=\"headerlink\" title=\"Dubbo 总结\"></a>Dubbo 总结</h2><h4 id=\"dubbo初始化流程\"><a href=\"#dubbo初始化流程\" class=\"headerlink\" title=\"dubbo初始化流程\"></a>dubbo初始化流程</h4><ul>\n<li><p>入口</p>\n<ul>\n<li>spring标签DubboNameSpaceHandler</li>\n<li>referencebean + servicebean </li>\n<li>继承了spring initalizingBean接口</li>\n<li>afterPropertiesSet</li>\n<li>protocol.refer(url) + protocol.export(url)+(registryURL)</li>\n</ul>\n</li>\n<li><p>消费端</p>\n<ul>\n<li>RegistryProtocol.refer</li>\n<li>zkRegistry.subscribe</li>\n<li>触发监听器回调</li>\n<li>registryDictory </li>\n<li>protocol.refer </li>\n<li>dubboProtocol.refer + interface</li>\n<li>消费方interface代理对象</li>\n</ul>\n</li>\n<li><p>服务端</p>\n<ul>\n<li>RegistryProtocol.export </li>\n<li>protocol.export </li>\n<li>创建中转对象</li>\n<li>zkRegistry.subscribe注册</li>\n</ul>\n</li>\n</ul>\n<h4 id=\"spi\"><a href=\"#spi\" class=\"headerlink\" title=\"spi\"></a>spi</h4><p>jdk的spi：把实现类,装入一个list中<br>dubbo的spi：把实现类,装入一个map中(配置文件指定一key),key指代实现类</p>\n<h4 id=\"RegistryProtocol\"><a href=\"#RegistryProtocol\" class=\"headerlink\" title=\"RegistryProtocol\"></a>RegistryProtocol</h4><p>dubbo偷懒，借用protocol流程模块，把注册模块，伪装成protocol协议(注册协议),注册协议跟其它不一样，任何协议dubbo/rmi/rest,要生效,都必须注册,因此RegistryProtocol是最优先被调用，然后再转给真实的协议</p>\n<h4 id=\"服务治理\"><a href=\"#服务治理\" class=\"headerlink\" title=\"服务治理\"></a>服务治理</h4><ul>\n<li>dubbo只是服务治理，springcloud包含所有全套微服务功能</li>\n<li>dubbo把rpc做了成透明化的调度,减少出错机率(spring cloud易出错)</li>\n<li>springcloud的远程调用，没能完全透明化。透明化调度，意思你使用它，像本地服务一样用。</li>\n<li>dubbo控制台，可以关闭某个服务，不对外开放（开发环境常用）</li>\n</ul>\n","site":{"data":{}},"excerpt":"<p>Dubbo 总结</p>\n<blockquote>\n<p>参考官方文档：<a href=\"http://dubbo.apache.org/zh-cn/docs/user/references/xml/dubbo-service.html\" target=\"_blank\" rel=\"noopener\">http://dubbo.apache.org/zh-cn/docs/user/references/xml/dubbo-service.html</a></p>\n</blockquote>","more":"<h2 id=\"Dubbo-总结\"><a href=\"#Dubbo-总结\" class=\"headerlink\" title=\"Dubbo 总结\"></a>Dubbo 总结</h2><h4 id=\"dubbo初始化流程\"><a href=\"#dubbo初始化流程\" class=\"headerlink\" title=\"dubbo初始化流程\"></a>dubbo初始化流程</h4><ul>\n<li><p>入口</p>\n<ul>\n<li>spring标签DubboNameSpaceHandler</li>\n<li>referencebean + servicebean </li>\n<li>继承了spring initalizingBean接口</li>\n<li>afterPropertiesSet</li>\n<li>protocol.refer(url) + protocol.export(url)+(registryURL)</li>\n</ul>\n</li>\n<li><p>消费端</p>\n<ul>\n<li>RegistryProtocol.refer</li>\n<li>zkRegistry.subscribe</li>\n<li>触发监听器回调</li>\n<li>registryDictory </li>\n<li>protocol.refer </li>\n<li>dubboProtocol.refer + interface</li>\n<li>消费方interface代理对象</li>\n</ul>\n</li>\n<li><p>服务端</p>\n<ul>\n<li>RegistryProtocol.export </li>\n<li>protocol.export </li>\n<li>创建中转对象</li>\n<li>zkRegistry.subscribe注册</li>\n</ul>\n</li>\n</ul>\n<h4 id=\"spi\"><a href=\"#spi\" class=\"headerlink\" title=\"spi\"></a>spi</h4><p>jdk的spi：把实现类,装入一个list中<br>dubbo的spi：把实现类,装入一个map中(配置文件指定一key),key指代实现类</p>\n<h4 id=\"RegistryProtocol\"><a href=\"#RegistryProtocol\" class=\"headerlink\" title=\"RegistryProtocol\"></a>RegistryProtocol</h4><p>dubbo偷懒，借用protocol流程模块，把注册模块，伪装成protocol协议(注册协议),注册协议跟其它不一样，任何协议dubbo/rmi/rest,要生效,都必须注册,因此RegistryProtocol是最优先被调用，然后再转给真实的协议</p>\n<h4 id=\"服务治理\"><a href=\"#服务治理\" class=\"headerlink\" title=\"服务治理\"></a>服务治理</h4><ul>\n<li>dubbo只是服务治理，springcloud包含所有全套微服务功能</li>\n<li>dubbo把rpc做了成透明化的调度,减少出错机率(spring cloud易出错)</li>\n<li>springcloud的远程调用，没能完全透明化。透明化调度，意思你使用它，像本地服务一样用。</li>\n<li>dubbo控制台，可以关闭某个服务，不对外开放（开发环境常用）</li>\n</ul>"},{"title":"Kafka学习 - 安装","_content":"\nkafka基础学习-在centos7服务器上搭建kafka\n\n### 安装zookeeper\n\n- 下载zookeeper安装包 [https://mirrors.tuna.tsinghua.edu.cn/apache/zookeeper/](https://mirrors.tuna.tsinghua.edu.cn/apache/zookeeper/)\n\n- 解压到指定目录 \n```bash\ntar -zxvf zookeeper-3.4.10.tar.gz -C /usr/local/zookeeper\n```\n\n- 修改配置文件\n```bash\ncd /usr/local/zookeeper/zookeeper-3.4.10/conf/\ncp zoo_sample.cfg zoo.cfg\n```\n\n<!-- more -->\n\n- 修改zoo.cfg一些基本设置 数据目录 日志目录等\n\n- 配置环境变量(未生效 原因待定)\n```bash\nvim /etc/profile\n\nexport ZOOKEEPER_HOME=/usr/local/zookeeper/zookeeper-3.4.10/\nexport PATH=$ZOOKEEPER_HOME/bin:$PATH\n\nsource /et/profile\n```\n\n- 启动zookeeper\n```bash\n./zkServer.sh start/status/stop/restart\n```\n\n\n### 安装kafka\n\n- 下载kafka安装包 [http://kafka.apache.org/downloads.html](http://kafka.apache.org/downloads.html)\n\n\n- 解压到指定目录 \n```bash\ntar -zxvf kafka_2.12-2.0.0.tgz -C /usr/local/kafka/\n```\n\n- 配置环境变量\n\n```bash\nvim /etc/profile\n\nexport KAFKA_HOME=/usr/local/kafka/kafka_2.12-2.0.0\nexport PATH=$PATH:$KAFKA_HOME/bin\n\nsource /et/profile\n```\n\n\n- 验证kafka功能\n    - 启动zookeeper\n    ```bash\n\t./zookeeper-server-start.sh -daemon ../config/zookeeper.properties\n    ```\n\n    - 启动kafka\n    ```bash\n\t./kafka-server-start.sh ../config/server.properties\n    ```\n\n    - 我的服务器为1核1G，kafka启动报错,内存不足Cannot allocate memory\n    ```bash\n    Java HotSpot(TM) 64-Bit Server VM warning: INFO: os::commit_memory(0x00000000c0000000, 1073741824, 0) failed; error='Cannot allocate memory' (errno=12)\n\t#\n\t# There is insufficient memory for the Java Runtime Environment to continue.\n\t# Native memory allocation (mmap) failed to map 1073741824 bytes for committing reserved memory.\n\t# An error report file with more information is saved as:\n\t# /usr/local/kafka/kafka_2.12-2.0.0/bin/hs_err_pid6279.log\n    ```\n\n    - 查看启动脚本 [kafka-server-start.sh] 发现默认配置为：\n    ```bash\n    if [ \"x$KAFKA_HEAP_OPTS\" = \"x\" ]; then\n    \texport KAFKA_HEAP_OPTS=\"-Xmx1G -Xms1G\"\n\tfi\n    ```\n    修改配置为 [-Xmx256M -Xms128M] 重启kafka成功\n\n    - 测试创建一个topic\n    ```bash\n\t./kafka-topics.sh --create --zookeeper localhost:2181 --partitions 1 --replication-factor 1 --topic test\n    ```\n\n    - 查看topic列表\n    ```bash\n\t./kafka-topics.sh --list --zookeeper localhost:2181\n    ```\n\n    - 生产者发送消息\n    ```bash\n\t./kafka-console-producer.sh --broker-list localhost:9092 --topic test\n\t>haha\n    ```\n\n    - 消费者接受消息\n    ```bash\n    ./kafka-console-consumer.sh --bootstrap-server localhost:9092 --topic test --from-beginning\n\thaha\n    ```\n\n    - 集群配置(未配置)...\n\n","source":"_posts/kafka-01.md","raw":"---\ntitle: Kafka学习 - 安装\ntags:\n  - Kafka\n  - Zookeeper\n---\n\nkafka基础学习-在centos7服务器上搭建kafka\n\n### 安装zookeeper\n\n- 下载zookeeper安装包 [https://mirrors.tuna.tsinghua.edu.cn/apache/zookeeper/](https://mirrors.tuna.tsinghua.edu.cn/apache/zookeeper/)\n\n- 解压到指定目录 \n```bash\ntar -zxvf zookeeper-3.4.10.tar.gz -C /usr/local/zookeeper\n```\n\n- 修改配置文件\n```bash\ncd /usr/local/zookeeper/zookeeper-3.4.10/conf/\ncp zoo_sample.cfg zoo.cfg\n```\n\n<!-- more -->\n\n- 修改zoo.cfg一些基本设置 数据目录 日志目录等\n\n- 配置环境变量(未生效 原因待定)\n```bash\nvim /etc/profile\n\nexport ZOOKEEPER_HOME=/usr/local/zookeeper/zookeeper-3.4.10/\nexport PATH=$ZOOKEEPER_HOME/bin:$PATH\n\nsource /et/profile\n```\n\n- 启动zookeeper\n```bash\n./zkServer.sh start/status/stop/restart\n```\n\n\n### 安装kafka\n\n- 下载kafka安装包 [http://kafka.apache.org/downloads.html](http://kafka.apache.org/downloads.html)\n\n\n- 解压到指定目录 \n```bash\ntar -zxvf kafka_2.12-2.0.0.tgz -C /usr/local/kafka/\n```\n\n- 配置环境变量\n\n```bash\nvim /etc/profile\n\nexport KAFKA_HOME=/usr/local/kafka/kafka_2.12-2.0.0\nexport PATH=$PATH:$KAFKA_HOME/bin\n\nsource /et/profile\n```\n\n\n- 验证kafka功能\n    - 启动zookeeper\n    ```bash\n\t./zookeeper-server-start.sh -daemon ../config/zookeeper.properties\n    ```\n\n    - 启动kafka\n    ```bash\n\t./kafka-server-start.sh ../config/server.properties\n    ```\n\n    - 我的服务器为1核1G，kafka启动报错,内存不足Cannot allocate memory\n    ```bash\n    Java HotSpot(TM) 64-Bit Server VM warning: INFO: os::commit_memory(0x00000000c0000000, 1073741824, 0) failed; error='Cannot allocate memory' (errno=12)\n\t#\n\t# There is insufficient memory for the Java Runtime Environment to continue.\n\t# Native memory allocation (mmap) failed to map 1073741824 bytes for committing reserved memory.\n\t# An error report file with more information is saved as:\n\t# /usr/local/kafka/kafka_2.12-2.0.0/bin/hs_err_pid6279.log\n    ```\n\n    - 查看启动脚本 [kafka-server-start.sh] 发现默认配置为：\n    ```bash\n    if [ \"x$KAFKA_HEAP_OPTS\" = \"x\" ]; then\n    \texport KAFKA_HEAP_OPTS=\"-Xmx1G -Xms1G\"\n\tfi\n    ```\n    修改配置为 [-Xmx256M -Xms128M] 重启kafka成功\n\n    - 测试创建一个topic\n    ```bash\n\t./kafka-topics.sh --create --zookeeper localhost:2181 --partitions 1 --replication-factor 1 --topic test\n    ```\n\n    - 查看topic列表\n    ```bash\n\t./kafka-topics.sh --list --zookeeper localhost:2181\n    ```\n\n    - 生产者发送消息\n    ```bash\n\t./kafka-console-producer.sh --broker-list localhost:9092 --topic test\n\t>haha\n    ```\n\n    - 消费者接受消息\n    ```bash\n    ./kafka-console-consumer.sh --bootstrap-server localhost:9092 --topic test --from-beginning\n\thaha\n    ```\n\n    - 集群配置(未配置)...\n\n","slug":"kafka-01","published":1,"date":"2018-12-09T04:19:02.436Z","updated":"2018-12-12T16:08:29.128Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjskls62v000f745b34kxursl","content":"<p>kafka基础学习-在centos7服务器上搭建kafka</p>\n<h3 id=\"安装zookeeper\"><a href=\"#安装zookeeper\" class=\"headerlink\" title=\"安装zookeeper\"></a>安装zookeeper</h3><ul>\n<li><p>下载zookeeper安装包 <a href=\"https://mirrors.tuna.tsinghua.edu.cn/apache/zookeeper/\" target=\"_blank\" rel=\"noopener\">https://mirrors.tuna.tsinghua.edu.cn/apache/zookeeper/</a></p>\n</li>\n<li><p>解压到指定目录 </p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">tar -zxvf zookeeper-3.4.10.tar.gz -C /usr/<span class=\"built_in\">local</span>/zookeeper</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>修改配置文件</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">cd</span> /usr/<span class=\"built_in\">local</span>/zookeeper/zookeeper-3.4.10/conf/</span><br><span class=\"line\">cp zoo_sample.cfg zoo.cfg</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<a id=\"more\"></a>\n<ul>\n<li><p>修改zoo.cfg一些基本设置 数据目录 日志目录等</p>\n</li>\n<li><p>配置环境变量(未生效 原因待定)</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">vim /etc/profile</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">export</span> ZOOKEEPER_HOME=/usr/<span class=\"built_in\">local</span>/zookeeper/zookeeper-3.4.10/</span><br><span class=\"line\"><span class=\"built_in\">export</span> PATH=<span class=\"variable\">$ZOOKEEPER_HOME</span>/bin:<span class=\"variable\">$PATH</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">source</span> /et/profile</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>启动zookeeper</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">./zkServer.sh start/status/stop/restart</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<h3 id=\"安装kafka\"><a href=\"#安装kafka\" class=\"headerlink\" title=\"安装kafka\"></a>安装kafka</h3><ul>\n<li>下载kafka安装包 <a href=\"http://kafka.apache.org/downloads.html\" target=\"_blank\" rel=\"noopener\">http://kafka.apache.org/downloads.html</a></li>\n</ul>\n<ul>\n<li><p>解压到指定目录 </p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">tar -zxvf kafka_2.12-2.0.0.tgz -C /usr/<span class=\"built_in\">local</span>/kafka/</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>配置环境变量</p>\n</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">vim /etc/profile</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">export</span> KAFKA_HOME=/usr/<span class=\"built_in\">local</span>/kafka/kafka_2.12-2.0.0</span><br><span class=\"line\"><span class=\"built_in\">export</span> PATH=<span class=\"variable\">$PATH</span>:<span class=\"variable\">$KAFKA_HOME</span>/bin</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">source</span> /et/profile</span><br></pre></td></tr></table></figure>\n<ul>\n<li><p>验证kafka功能</p>\n<ul>\n<li><p>启动zookeeper</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">./zookeeper-server-start.sh -daemon ../config/zookeeper.properties</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>启动kafka</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">./kafka-server-start.sh ../config/server.properties</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>我的服务器为1核1G，kafka启动报错,内存不足Cannot allocate memory</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">   Java HotSpot(TM) 64-Bit Server VM warning: INFO: os::commit_memory(0x00000000c0000000, 1073741824, 0) failed; error=<span class=\"string\">'Cannot allocate memory'</span> (errno=12)</span><br><span class=\"line\"><span class=\"comment\">#</span></span><br><span class=\"line\"><span class=\"comment\"># There is insufficient memory for the Java Runtime Environment to continue.</span></span><br><span class=\"line\"><span class=\"comment\"># Native memory allocation (mmap) failed to map 1073741824 bytes for committing reserved memory.</span></span><br><span class=\"line\"><span class=\"comment\"># An error report file with more information is saved as:</span></span><br><span class=\"line\"><span class=\"comment\"># /usr/local/kafka/kafka_2.12-2.0.0/bin/hs_err_pid6279.log</span></span><br></pre></td></tr></table></figure>\n</li>\n<li><p>查看启动脚本 [kafka-server-start.sh] 发现默认配置为：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">   <span class=\"keyword\">if</span> [ <span class=\"string\">\"x<span class=\"variable\">$KAFKA_HEAP_OPTS</span>\"</span> = <span class=\"string\">\"x\"</span> ]; <span class=\"keyword\">then</span></span><br><span class=\"line\">   \t<span class=\"built_in\">export</span> KAFKA_HEAP_OPTS=<span class=\"string\">\"-Xmx1G -Xms1G\"</span></span><br><span class=\"line\"><span class=\"keyword\">fi</span></span><br></pre></td></tr></table></figure>\n<p>修改配置为 [-Xmx256M -Xms128M] 重启kafka成功</p>\n</li>\n<li><p>测试创建一个topic</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">./kafka-topics.sh --create --zookeeper localhost:2181 --partitions 1 --replication-factor 1 --topic <span class=\"built_in\">test</span></span><br></pre></td></tr></table></figure>\n</li>\n<li><p>查看topic列表</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">./kafka-topics.sh --list --zookeeper localhost:2181</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>生产者发送消息</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">./kafka-console-producer.sh --broker-list localhost:9092 --topic <span class=\"built_in\">test</span></span><br><span class=\"line\">&gt;haha</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>消费者接受消息</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">   ./kafka-console-consumer.sh --bootstrap-server localhost:9092 --topic <span class=\"built_in\">test</span> --from-beginning</span><br><span class=\"line\">haha</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>集群配置(未配置)…</p>\n</li>\n</ul>\n</li>\n</ul>\n","site":{"data":{}},"excerpt":"<p>kafka基础学习-在centos7服务器上搭建kafka</p>\n<h3 id=\"安装zookeeper\"><a href=\"#安装zookeeper\" class=\"headerlink\" title=\"安装zookeeper\"></a>安装zookeeper</h3><ul>\n<li><p>下载zookeeper安装包 <a href=\"https://mirrors.tuna.tsinghua.edu.cn/apache/zookeeper/\" target=\"_blank\" rel=\"noopener\">https://mirrors.tuna.tsinghua.edu.cn/apache/zookeeper/</a></p>\n</li>\n<li><p>解压到指定目录 </p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">tar -zxvf zookeeper-3.4.10.tar.gz -C /usr/<span class=\"built_in\">local</span>/zookeeper</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>修改配置文件</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">cd</span> /usr/<span class=\"built_in\">local</span>/zookeeper/zookeeper-3.4.10/conf/</span><br><span class=\"line\">cp zoo_sample.cfg zoo.cfg</span><br></pre></td></tr></table></figure>\n</li>\n</ul>","more":"<ul>\n<li><p>修改zoo.cfg一些基本设置 数据目录 日志目录等</p>\n</li>\n<li><p>配置环境变量(未生效 原因待定)</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">vim /etc/profile</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">export</span> ZOOKEEPER_HOME=/usr/<span class=\"built_in\">local</span>/zookeeper/zookeeper-3.4.10/</span><br><span class=\"line\"><span class=\"built_in\">export</span> PATH=<span class=\"variable\">$ZOOKEEPER_HOME</span>/bin:<span class=\"variable\">$PATH</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">source</span> /et/profile</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>启动zookeeper</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">./zkServer.sh start/status/stop/restart</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<h3 id=\"安装kafka\"><a href=\"#安装kafka\" class=\"headerlink\" title=\"安装kafka\"></a>安装kafka</h3><ul>\n<li>下载kafka安装包 <a href=\"http://kafka.apache.org/downloads.html\" target=\"_blank\" rel=\"noopener\">http://kafka.apache.org/downloads.html</a></li>\n</ul>\n<ul>\n<li><p>解压到指定目录 </p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">tar -zxvf kafka_2.12-2.0.0.tgz -C /usr/<span class=\"built_in\">local</span>/kafka/</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>配置环境变量</p>\n</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">vim /etc/profile</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">export</span> KAFKA_HOME=/usr/<span class=\"built_in\">local</span>/kafka/kafka_2.12-2.0.0</span><br><span class=\"line\"><span class=\"built_in\">export</span> PATH=<span class=\"variable\">$PATH</span>:<span class=\"variable\">$KAFKA_HOME</span>/bin</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">source</span> /et/profile</span><br></pre></td></tr></table></figure>\n<ul>\n<li><p>验证kafka功能</p>\n<ul>\n<li><p>启动zookeeper</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">./zookeeper-server-start.sh -daemon ../config/zookeeper.properties</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>启动kafka</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">./kafka-server-start.sh ../config/server.properties</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>我的服务器为1核1G，kafka启动报错,内存不足Cannot allocate memory</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">   Java HotSpot(TM) 64-Bit Server VM warning: INFO: os::commit_memory(0x00000000c0000000, 1073741824, 0) failed; error=<span class=\"string\">'Cannot allocate memory'</span> (errno=12)</span><br><span class=\"line\"><span class=\"comment\">#</span></span><br><span class=\"line\"><span class=\"comment\"># There is insufficient memory for the Java Runtime Environment to continue.</span></span><br><span class=\"line\"><span class=\"comment\"># Native memory allocation (mmap) failed to map 1073741824 bytes for committing reserved memory.</span></span><br><span class=\"line\"><span class=\"comment\"># An error report file with more information is saved as:</span></span><br><span class=\"line\"><span class=\"comment\"># /usr/local/kafka/kafka_2.12-2.0.0/bin/hs_err_pid6279.log</span></span><br></pre></td></tr></table></figure>\n</li>\n<li><p>查看启动脚本 [kafka-server-start.sh] 发现默认配置为：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">   <span class=\"keyword\">if</span> [ <span class=\"string\">\"x<span class=\"variable\">$KAFKA_HEAP_OPTS</span>\"</span> = <span class=\"string\">\"x\"</span> ]; <span class=\"keyword\">then</span></span><br><span class=\"line\">   \t<span class=\"built_in\">export</span> KAFKA_HEAP_OPTS=<span class=\"string\">\"-Xmx1G -Xms1G\"</span></span><br><span class=\"line\"><span class=\"keyword\">fi</span></span><br></pre></td></tr></table></figure>\n<p>修改配置为 [-Xmx256M -Xms128M] 重启kafka成功</p>\n</li>\n<li><p>测试创建一个topic</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">./kafka-topics.sh --create --zookeeper localhost:2181 --partitions 1 --replication-factor 1 --topic <span class=\"built_in\">test</span></span><br></pre></td></tr></table></figure>\n</li>\n<li><p>查看topic列表</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">./kafka-topics.sh --list --zookeeper localhost:2181</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>生产者发送消息</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">./kafka-console-producer.sh --broker-list localhost:9092 --topic <span class=\"built_in\">test</span></span><br><span class=\"line\">&gt;haha</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>消费者接受消息</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">   ./kafka-console-consumer.sh --bootstrap-server localhost:9092 --topic <span class=\"built_in\">test</span> --from-beginning</span><br><span class=\"line\">haha</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>集群配置(未配置)…</p>\n</li>\n</ul>\n</li>\n</ul>"},{"title":"Hello World","_content":"\n\nWelcome to [Hexo](https://hexo.io/)! This is your very first post. Check [documentation](https://hexo.io/docs/) for more info. If you get any problems when using Hexo, you can find the answer in [troubleshooting](https://hexo.io/docs/troubleshooting.html) or you can ask me on [GitHub](https://github.com/hexojs/hexo/issues).\n\n## Quick Start\n\n### Create a new post\n\n``` bash\n$ hexo new \"My New Post\"\n```\n<!-- more -->\nMore info: [Writing](https://hexo.io/docs/writing.html)\n\n### Run server\n\n``` bash\n$ hexo server\n```\n\nMore info: [Server](https://hexo.io/docs/server.html)\n\n### Generate static files\n\n``` bash\n$ hexo generate\n```\n\nMore info: [Generating](https://hexo.io/docs/generating.html)\n\n### Deploy to remote sites\n\n``` bash\n$ hexo deploy\n```\n\nMore info: [Deployment](https://hexo.io/docs/deployment.html)\n","source":"_posts/hello-world.md","raw":"---\ntitle: Hello World\ntags:\n  - hexo\ncategories: \n  - hexo\n---\n\n\nWelcome to [Hexo](https://hexo.io/)! This is your very first post. Check [documentation](https://hexo.io/docs/) for more info. If you get any problems when using Hexo, you can find the answer in [troubleshooting](https://hexo.io/docs/troubleshooting.html) or you can ask me on [GitHub](https://github.com/hexojs/hexo/issues).\n\n## Quick Start\n\n### Create a new post\n\n``` bash\n$ hexo new \"My New Post\"\n```\n<!-- more -->\nMore info: [Writing](https://hexo.io/docs/writing.html)\n\n### Run server\n\n``` bash\n$ hexo server\n```\n\nMore info: [Server](https://hexo.io/docs/server.html)\n\n### Generate static files\n\n``` bash\n$ hexo generate\n```\n\nMore info: [Generating](https://hexo.io/docs/generating.html)\n\n### Deploy to remote sites\n\n``` bash\n$ hexo deploy\n```\n\nMore info: [Deployment](https://hexo.io/docs/deployment.html)\n","slug":"hello-world","published":1,"date":"2018-10-09T15:16:36.318Z","updated":"2018-12-03T16:37:34.963Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjskls62w000h745bmtv41ymy","content":"<p>Welcome to <a href=\"https://hexo.io/\" target=\"_blank\" rel=\"noopener\">Hexo</a>! This is your very first post. Check <a href=\"https://hexo.io/docs/\" target=\"_blank\" rel=\"noopener\">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href=\"https://hexo.io/docs/troubleshooting.html\" target=\"_blank\" rel=\"noopener\">troubleshooting</a> or you can ask me on <a href=\"https://github.com/hexojs/hexo/issues\" target=\"_blank\" rel=\"noopener\">GitHub</a>.</p>\n<h2 id=\"Quick-Start\"><a href=\"#Quick-Start\" class=\"headerlink\" title=\"Quick Start\"></a>Quick Start</h2><h3 id=\"Create-a-new-post\"><a href=\"#Create-a-new-post\" class=\"headerlink\" title=\"Create a new post\"></a>Create a new post</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo new <span class=\"string\">\"My New Post\"</span></span><br></pre></td></tr></table></figure>\n<a id=\"more\"></a>\n<p>More info: <a href=\"https://hexo.io/docs/writing.html\" target=\"_blank\" rel=\"noopener\">Writing</a></p>\n<h3 id=\"Run-server\"><a href=\"#Run-server\" class=\"headerlink\" title=\"Run server\"></a>Run server</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo server</span><br></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/server.html\" target=\"_blank\" rel=\"noopener\">Server</a></p>\n<h3 id=\"Generate-static-files\"><a href=\"#Generate-static-files\" class=\"headerlink\" title=\"Generate static files\"></a>Generate static files</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo generate</span><br></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/generating.html\" target=\"_blank\" rel=\"noopener\">Generating</a></p>\n<h3 id=\"Deploy-to-remote-sites\"><a href=\"#Deploy-to-remote-sites\" class=\"headerlink\" title=\"Deploy to remote sites\"></a>Deploy to remote sites</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo deploy</span><br></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/deployment.html\" target=\"_blank\" rel=\"noopener\">Deployment</a></p>\n","site":{"data":{}},"excerpt":"<p>Welcome to <a href=\"https://hexo.io/\" target=\"_blank\" rel=\"noopener\">Hexo</a>! This is your very first post. Check <a href=\"https://hexo.io/docs/\" target=\"_blank\" rel=\"noopener\">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href=\"https://hexo.io/docs/troubleshooting.html\" target=\"_blank\" rel=\"noopener\">troubleshooting</a> or you can ask me on <a href=\"https://github.com/hexojs/hexo/issues\" target=\"_blank\" rel=\"noopener\">GitHub</a>.</p>\n<h2 id=\"Quick-Start\"><a href=\"#Quick-Start\" class=\"headerlink\" title=\"Quick Start\"></a>Quick Start</h2><h3 id=\"Create-a-new-post\"><a href=\"#Create-a-new-post\" class=\"headerlink\" title=\"Create a new post\"></a>Create a new post</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo new <span class=\"string\">\"My New Post\"</span></span><br></pre></td></tr></table></figure>","more":"<p>More info: <a href=\"https://hexo.io/docs/writing.html\" target=\"_blank\" rel=\"noopener\">Writing</a></p>\n<h3 id=\"Run-server\"><a href=\"#Run-server\" class=\"headerlink\" title=\"Run server\"></a>Run server</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo server</span><br></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/server.html\" target=\"_blank\" rel=\"noopener\">Server</a></p>\n<h3 id=\"Generate-static-files\"><a href=\"#Generate-static-files\" class=\"headerlink\" title=\"Generate static files\"></a>Generate static files</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo generate</span><br></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/generating.html\" target=\"_blank\" rel=\"noopener\">Generating</a></p>\n<h3 id=\"Deploy-to-remote-sites\"><a href=\"#Deploy-to-remote-sites\" class=\"headerlink\" title=\"Deploy to remote sites\"></a>Deploy to remote sites</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo deploy</span><br></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/deployment.html\" target=\"_blank\" rel=\"noopener\">Deployment</a></p>"},{"title":"Maven基础 - 打包调用异常","_content":"\nMaven基础学习配置\n\n## Maven 打包遇见的问题\n\n一个项目依赖以另一个项目时引入其依赖,想要调用其依赖的jar包中的类，则打包方式需使用maven的打包方式，不能使用spring-boot的打包方式 可以使用@Component将jar包中的类扫描注入到当前项目的IOC容器中\n\n<!-- more -->\n\n```java\n<build>\n    <plugins>\n      <plugin>\n        <groupId>org.apache.maven.plugins</groupId>\n        <artifactId>maven-compiler-plugin</artifactId>\n        <version>3.1</version>\n        <configuration>\n          <source>1.8</source>\n          <target>1.8</target>\n        </configuration>\n      </plugin>\n      <plugin>\n        <groupId>org.springframework.boot</groupId>\n        <artifactId>spring-boot-maven-plugin</artifactId>\n      </plugin>\n    </plugins>\n  </build>\n```\n\n而spring项目使用jar包启动时则需要使用spring-boot的打包方式\n```java\n<build>\n    <plugins>\n      <plugin>\n        <groupId>org.springframework.boot</groupId>\n        <artifactId>spring-boot-maven-plugin</artifactId>\n      </plugin>\n    </plugins>\n  </build>\n```\n\n两种方式打包的目录结构：\n\n- maven打包\n\n![maven打包的目录结构](http://tupelo.top/maven.png)\n\n- spring-boot打包\n\n![maven打包的目录结构](http://tupelo.top/spring.jpg)\n\n\n\n\n\n","source":"_posts/maven-01.md","raw":"---\ntitle: Maven基础 - 打包调用异常\ntags:\n  - Maven\n---\n\nMaven基础学习配置\n\n## Maven 打包遇见的问题\n\n一个项目依赖以另一个项目时引入其依赖,想要调用其依赖的jar包中的类，则打包方式需使用maven的打包方式，不能使用spring-boot的打包方式 可以使用@Component将jar包中的类扫描注入到当前项目的IOC容器中\n\n<!-- more -->\n\n```java\n<build>\n    <plugins>\n      <plugin>\n        <groupId>org.apache.maven.plugins</groupId>\n        <artifactId>maven-compiler-plugin</artifactId>\n        <version>3.1</version>\n        <configuration>\n          <source>1.8</source>\n          <target>1.8</target>\n        </configuration>\n      </plugin>\n      <plugin>\n        <groupId>org.springframework.boot</groupId>\n        <artifactId>spring-boot-maven-plugin</artifactId>\n      </plugin>\n    </plugins>\n  </build>\n```\n\n而spring项目使用jar包启动时则需要使用spring-boot的打包方式\n```java\n<build>\n    <plugins>\n      <plugin>\n        <groupId>org.springframework.boot</groupId>\n        <artifactId>spring-boot-maven-plugin</artifactId>\n      </plugin>\n    </plugins>\n  </build>\n```\n\n两种方式打包的目录结构：\n\n- maven打包\n\n![maven打包的目录结构](http://tupelo.top/maven.png)\n\n- spring-boot打包\n\n![maven打包的目录结构](http://tupelo.top/spring.jpg)\n\n\n\n\n\n","slug":"maven-01","published":1,"date":"2018-12-03T17:14:37.102Z","updated":"2018-12-12T16:08:32.984Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjskls62x000k745b1p8ep20e","content":"<p>Maven基础学习配置</p>\n<h2 id=\"Maven-打包遇见的问题\"><a href=\"#Maven-打包遇见的问题\" class=\"headerlink\" title=\"Maven 打包遇见的问题\"></a>Maven 打包遇见的问题</h2><p>一个项目依赖以另一个项目时引入其依赖,想要调用其依赖的jar包中的类，则打包方式需使用maven的打包方式，不能使用spring-boot的打包方式 可以使用@Component将jar包中的类扫描注入到当前项目的IOC容器中</p>\n<a id=\"more\"></a>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;build&gt;</span><br><span class=\"line\">    &lt;plugins&gt;</span><br><span class=\"line\">      &lt;plugin&gt;</span><br><span class=\"line\">        &lt;groupId&gt;org.apache.maven.plugins&lt;/groupId&gt;</span><br><span class=\"line\">        &lt;artifactId&gt;maven-compiler-plugin&lt;/artifactId&gt;</span><br><span class=\"line\">        &lt;version&gt;3.1&lt;/version&gt;</span><br><span class=\"line\">        &lt;configuration&gt;</span><br><span class=\"line\">          &lt;source&gt;1.8&lt;/source&gt;</span><br><span class=\"line\">          &lt;target&gt;1.8&lt;/target&gt;</span><br><span class=\"line\">        &lt;/configuration&gt;</span><br><span class=\"line\">      &lt;/plugin&gt;</span><br><span class=\"line\">      &lt;plugin&gt;</span><br><span class=\"line\">        &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span><br><span class=\"line\">        &lt;artifactId&gt;spring-boot-maven-plugin&lt;/artifactId&gt;</span><br><span class=\"line\">      &lt;/plugin&gt;</span><br><span class=\"line\">    &lt;/plugins&gt;</span><br><span class=\"line\">  &lt;/build&gt;</span><br></pre></td></tr></table></figure>\n<p>而spring项目使用jar包启动时则需要使用spring-boot的打包方式<br><figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;build&gt;</span><br><span class=\"line\">    &lt;plugins&gt;</span><br><span class=\"line\">      &lt;plugin&gt;</span><br><span class=\"line\">        &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span><br><span class=\"line\">        &lt;artifactId&gt;spring-boot-maven-plugin&lt;/artifactId&gt;</span><br><span class=\"line\">      &lt;/plugin&gt;</span><br><span class=\"line\">    &lt;/plugins&gt;</span><br><span class=\"line\">  &lt;/build&gt;</span><br></pre></td></tr></table></figure></p>\n<p>两种方式打包的目录结构：</p>\n<ul>\n<li>maven打包</li>\n</ul>\n<p><img src=\"http://tupelo.top/maven.png\" alt=\"maven打包的目录结构\"></p>\n<ul>\n<li>spring-boot打包</li>\n</ul>\n<p><img src=\"http://tupelo.top/spring.jpg\" alt=\"maven打包的目录结构\"></p>\n","site":{"data":{}},"excerpt":"<p>Maven基础学习配置</p>\n<h2 id=\"Maven-打包遇见的问题\"><a href=\"#Maven-打包遇见的问题\" class=\"headerlink\" title=\"Maven 打包遇见的问题\"></a>Maven 打包遇见的问题</h2><p>一个项目依赖以另一个项目时引入其依赖,想要调用其依赖的jar包中的类，则打包方式需使用maven的打包方式，不能使用spring-boot的打包方式 可以使用@Component将jar包中的类扫描注入到当前项目的IOC容器中</p>","more":"<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;build&gt;</span><br><span class=\"line\">    &lt;plugins&gt;</span><br><span class=\"line\">      &lt;plugin&gt;</span><br><span class=\"line\">        &lt;groupId&gt;org.apache.maven.plugins&lt;/groupId&gt;</span><br><span class=\"line\">        &lt;artifactId&gt;maven-compiler-plugin&lt;/artifactId&gt;</span><br><span class=\"line\">        &lt;version&gt;3.1&lt;/version&gt;</span><br><span class=\"line\">        &lt;configuration&gt;</span><br><span class=\"line\">          &lt;source&gt;1.8&lt;/source&gt;</span><br><span class=\"line\">          &lt;target&gt;1.8&lt;/target&gt;</span><br><span class=\"line\">        &lt;/configuration&gt;</span><br><span class=\"line\">      &lt;/plugin&gt;</span><br><span class=\"line\">      &lt;plugin&gt;</span><br><span class=\"line\">        &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span><br><span class=\"line\">        &lt;artifactId&gt;spring-boot-maven-plugin&lt;/artifactId&gt;</span><br><span class=\"line\">      &lt;/plugin&gt;</span><br><span class=\"line\">    &lt;/plugins&gt;</span><br><span class=\"line\">  &lt;/build&gt;</span><br></pre></td></tr></table></figure>\n<p>而spring项目使用jar包启动时则需要使用spring-boot的打包方式<br><figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;build&gt;</span><br><span class=\"line\">    &lt;plugins&gt;</span><br><span class=\"line\">      &lt;plugin&gt;</span><br><span class=\"line\">        &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span><br><span class=\"line\">        &lt;artifactId&gt;spring-boot-maven-plugin&lt;/artifactId&gt;</span><br><span class=\"line\">      &lt;/plugin&gt;</span><br><span class=\"line\">    &lt;/plugins&gt;</span><br><span class=\"line\">  &lt;/build&gt;</span><br></pre></td></tr></table></figure></p>\n<p>两种方式打包的目录结构：</p>\n<ul>\n<li>maven打包</li>\n</ul>\n<p><img src=\"http://tupelo.top/maven.png\" alt=\"maven打包的目录结构\"></p>\n<ul>\n<li>spring-boot打包</li>\n</ul>\n<p><img src=\"http://tupelo.top/spring.jpg\" alt=\"maven打包的目录结构\"></p>"},{"title":"RabbitMq - 入门","_content":"\nAMQP概论\n\n## 交换器、队列、绑定、路由键\n\n- rabbitMq流程\n\n![rabbitMq流程](http://image.tupelo.top/rabbitmq%E6%B5%81%E7%A8%8B.png)\n\n\t交换机类型:\n\tfanout 交换机绑定队列,根据交换机发送消息到指定队列\n\tdirect 交换机通过路由键绑定队列,根据交换机和路由键发送消息\n\ttopic  交换机通过路由键绑定队列,根据交换机和路由键发送消息(路由键可进行匹配 #匹配一次或者多次 *匹配一次)\n\n> 需要多个队列接受同样的消息 多个队列绑定同一个路由键 一条消息只能被一个消费者消费\n\n<!-- more -->\n\n### 不同交换机的Demo\n\n- 添加依赖\n\n```java\n<dependency>\n\t<groupId>org.springframework.boot</groupId>\n\t<artifactId>spring-boot-starter-amqp</artifactId>\n</dependency>\n```\n\n- 创建配置类,初始化的时候指定交换机的类型\n\n```java\n\n@Configuration\npublic class RabbitMqConfig {\n\n\t// 创建连接\n    @Bean\n    public ConnectionFactory connectionFactory() {\n        CachingConnectionFactory connectionFactory = new CachingConnectionFactory();\n        connectionFactory.setHost(host);\n        connectionFactory.setPort(port);\n        connectionFactory.setUsername(username);\n        connectionFactory.setPassword(password);\n        connectionFactory.setVirtualHost(virtualHost);\n        return connectionFactory;\n    }\n\n    // 初始化 RabbitTemplate\n    @Bean\n    @Primary\n    public RabbitTemplate rabbitTemplate() {\n        return new RabbitTemplate(connectionFactory());\n    }\n\n    // 创建队列 没有的话会创建新的队列\n    @Bean\n    public Queue fanoutQueue(){\n        return new Queue(\"two.queue\");\n    }\n    @Bean\n    public Queue directQueue(){\n        return new Queue(\"four.queue\");\n    }\n    @Bean\n    public Queue topQueue(){\n        return new Queue(\"three.queue\");\n    }\n    @Bean\n    public Queue directOneQueue(){\n        return new Queue(\"four_one.queue\");\n    }\n\n    // 创建三种类型的交换机\n    @Bean\n    public FanoutExchange fanoutExchange(){\n        return new FanoutExchange(\"two.exchange\");\n    }\n    @Bean\n    public DirectExchange directExchange(){\n        return new DirectExchange(\"four.exchange\");\n    }\n    @Bean\n    public TopicExchange topicExchange(){\n        return new TopicExchange(\"three.exchange\");\n    }\n\n    // 交换机和队列绑定\n    @Bean\n    public Binding fanoutBinding(){\n        return BindingBuilder.bind(fanoutQueue()).to(fanoutExchange());\n    }\n    @Bean\n    public Binding directBinding(){\n        return BindingBuilder.bind(directQueue()).to(directExchange()).with(\"four.bind\");\n    }\n    @Bean\n    public Binding directOneBinding(){\n        return BindingBuilder.bind(directOneQueue()).to(directExchange()).with(\"four.bind\");\n    }\n    @Bean\n    public Binding topicBinding(){\n        return BindingBuilder.bind(topQueue()).to(topicExchange()).with(\"topicBind\");\n    }\n}\n```\n\n- 消费者部分代码,只需要监听指定队列,获取的消息是根据生产者发送过来的消息(Message/String)\n\n```java\n@RabbitListener(queues = \"four.queue\")\n@RabbitHandler\npublic void fanoutConsumer2(Object msg){\n    Message message = (Message) msg;\n    log.info(\"2fanoutConsumer 接收消息msg: {}\" , new String(message.getBody()));\n}\n\n@RabbitListener(queues = \"four.queue\")\n@RabbitHandler\npublic void fanoutConsumer3(String msg){\n    log.info(\"3fanoutConsumer 接收消息msg: {}\" , msg);\n}\n```\n\n- 生产者部分代码(fanout方式路由键参数不生效),生产者不用考虑队列,投放消息只和交换机和路由键相关\n\n```java\n// 发送Message\n@RequestMapping(\"/send1/{msg}\")\npublic String sendMessage(@PathVariable(\"msg\") String msg) {\n    log.info(\"msg1\");\n    Message message = new Message(msg.getBytes(),new MessageProperties());\n    rabbitTemplate.send(\"four.exchange\",\"aqweq\",message);\n    return msg;\n}\n// 发送String\n@RequestMapping(\"/send/{msg}\")\npublic String sendMessage1(@PathVariable(\"msg\") String msg) {\n   log.info(\"msg2\");\n   amqpTemplate.convertAndSend(\"four.exchange\",\"four.bind\",msg);\n   return msg;\n}\n```\n\n\n\n\n\n\n\n\n\n\n\n\n","source":"_posts/rabbitmq-01.md","raw":"---\ntitle: RabbitMq - 入门\ntags:\n  - RabbitMq\n---\n\nAMQP概论\n\n## 交换器、队列、绑定、路由键\n\n- rabbitMq流程\n\n![rabbitMq流程](http://image.tupelo.top/rabbitmq%E6%B5%81%E7%A8%8B.png)\n\n\t交换机类型:\n\tfanout 交换机绑定队列,根据交换机发送消息到指定队列\n\tdirect 交换机通过路由键绑定队列,根据交换机和路由键发送消息\n\ttopic  交换机通过路由键绑定队列,根据交换机和路由键发送消息(路由键可进行匹配 #匹配一次或者多次 *匹配一次)\n\n> 需要多个队列接受同样的消息 多个队列绑定同一个路由键 一条消息只能被一个消费者消费\n\n<!-- more -->\n\n### 不同交换机的Demo\n\n- 添加依赖\n\n```java\n<dependency>\n\t<groupId>org.springframework.boot</groupId>\n\t<artifactId>spring-boot-starter-amqp</artifactId>\n</dependency>\n```\n\n- 创建配置类,初始化的时候指定交换机的类型\n\n```java\n\n@Configuration\npublic class RabbitMqConfig {\n\n\t// 创建连接\n    @Bean\n    public ConnectionFactory connectionFactory() {\n        CachingConnectionFactory connectionFactory = new CachingConnectionFactory();\n        connectionFactory.setHost(host);\n        connectionFactory.setPort(port);\n        connectionFactory.setUsername(username);\n        connectionFactory.setPassword(password);\n        connectionFactory.setVirtualHost(virtualHost);\n        return connectionFactory;\n    }\n\n    // 初始化 RabbitTemplate\n    @Bean\n    @Primary\n    public RabbitTemplate rabbitTemplate() {\n        return new RabbitTemplate(connectionFactory());\n    }\n\n    // 创建队列 没有的话会创建新的队列\n    @Bean\n    public Queue fanoutQueue(){\n        return new Queue(\"two.queue\");\n    }\n    @Bean\n    public Queue directQueue(){\n        return new Queue(\"four.queue\");\n    }\n    @Bean\n    public Queue topQueue(){\n        return new Queue(\"three.queue\");\n    }\n    @Bean\n    public Queue directOneQueue(){\n        return new Queue(\"four_one.queue\");\n    }\n\n    // 创建三种类型的交换机\n    @Bean\n    public FanoutExchange fanoutExchange(){\n        return new FanoutExchange(\"two.exchange\");\n    }\n    @Bean\n    public DirectExchange directExchange(){\n        return new DirectExchange(\"four.exchange\");\n    }\n    @Bean\n    public TopicExchange topicExchange(){\n        return new TopicExchange(\"three.exchange\");\n    }\n\n    // 交换机和队列绑定\n    @Bean\n    public Binding fanoutBinding(){\n        return BindingBuilder.bind(fanoutQueue()).to(fanoutExchange());\n    }\n    @Bean\n    public Binding directBinding(){\n        return BindingBuilder.bind(directQueue()).to(directExchange()).with(\"four.bind\");\n    }\n    @Bean\n    public Binding directOneBinding(){\n        return BindingBuilder.bind(directOneQueue()).to(directExchange()).with(\"four.bind\");\n    }\n    @Bean\n    public Binding topicBinding(){\n        return BindingBuilder.bind(topQueue()).to(topicExchange()).with(\"topicBind\");\n    }\n}\n```\n\n- 消费者部分代码,只需要监听指定队列,获取的消息是根据生产者发送过来的消息(Message/String)\n\n```java\n@RabbitListener(queues = \"four.queue\")\n@RabbitHandler\npublic void fanoutConsumer2(Object msg){\n    Message message = (Message) msg;\n    log.info(\"2fanoutConsumer 接收消息msg: {}\" , new String(message.getBody()));\n}\n\n@RabbitListener(queues = \"four.queue\")\n@RabbitHandler\npublic void fanoutConsumer3(String msg){\n    log.info(\"3fanoutConsumer 接收消息msg: {}\" , msg);\n}\n```\n\n- 生产者部分代码(fanout方式路由键参数不生效),生产者不用考虑队列,投放消息只和交换机和路由键相关\n\n```java\n// 发送Message\n@RequestMapping(\"/send1/{msg}\")\npublic String sendMessage(@PathVariable(\"msg\") String msg) {\n    log.info(\"msg1\");\n    Message message = new Message(msg.getBytes(),new MessageProperties());\n    rabbitTemplate.send(\"four.exchange\",\"aqweq\",message);\n    return msg;\n}\n// 发送String\n@RequestMapping(\"/send/{msg}\")\npublic String sendMessage1(@PathVariable(\"msg\") String msg) {\n   log.info(\"msg2\");\n   amqpTemplate.convertAndSend(\"four.exchange\",\"four.bind\",msg);\n   return msg;\n}\n```\n\n\n\n\n\n\n\n\n\n\n\n\n","slug":"rabbitmq-01","published":1,"date":"2018-12-19T16:11:29.150Z","updated":"2018-12-30T04:15:38.837Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjskls62z000n745b075wk644","content":"<p>AMQP概论</p>\n<h2 id=\"交换器、队列、绑定、路由键\"><a href=\"#交换器、队列、绑定、路由键\" class=\"headerlink\" title=\"交换器、队列、绑定、路由键\"></a>交换器、队列、绑定、路由键</h2><ul>\n<li>rabbitMq流程</li>\n</ul>\n<p><img src=\"http://image.tupelo.top/rabbitmq%E6%B5%81%E7%A8%8B.png\" alt=\"rabbitMq流程\"></p>\n<pre><code>交换机类型:\nfanout 交换机绑定队列,根据交换机发送消息到指定队列\ndirect 交换机通过路由键绑定队列,根据交换机和路由键发送消息\ntopic  交换机通过路由键绑定队列,根据交换机和路由键发送消息(路由键可进行匹配 #匹配一次或者多次 *匹配一次)\n</code></pre><blockquote>\n<p>需要多个队列接受同样的消息 多个队列绑定同一个路由键 一条消息只能被一个消费者消费</p>\n</blockquote>\n<a id=\"more\"></a>\n<h3 id=\"不同交换机的Demo\"><a href=\"#不同交换机的Demo\" class=\"headerlink\" title=\"不同交换机的Demo\"></a>不同交换机的Demo</h3><ul>\n<li>添加依赖</li>\n</ul>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;dependency&gt;</span><br><span class=\"line\">\t&lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span><br><span class=\"line\">\t&lt;artifactId&gt;spring-boot-starter-amqp&lt;/artifactId&gt;</span><br><span class=\"line\">&lt;/dependency&gt;</span><br></pre></td></tr></table></figure>\n<ul>\n<li>创建配置类,初始化的时候指定交换机的类型</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@Configuration</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">RabbitMqConfig</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">// 创建连接</span></span><br><span class=\"line\">    <span class=\"meta\">@Bean</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> ConnectionFactory <span class=\"title\">connectionFactory</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        CachingConnectionFactory connectionFactory = <span class=\"keyword\">new</span> CachingConnectionFactory();</span><br><span class=\"line\">        connectionFactory.setHost(host);</span><br><span class=\"line\">        connectionFactory.setPort(port);</span><br><span class=\"line\">        connectionFactory.setUsername(username);</span><br><span class=\"line\">        connectionFactory.setPassword(password);</span><br><span class=\"line\">        connectionFactory.setVirtualHost(virtualHost);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> connectionFactory;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 初始化 RabbitTemplate</span></span><br><span class=\"line\">    <span class=\"meta\">@Bean</span></span><br><span class=\"line\">    <span class=\"meta\">@Primary</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> RabbitTemplate <span class=\"title\">rabbitTemplate</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> RabbitTemplate(connectionFactory());</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 创建队列 没有的话会创建新的队列</span></span><br><span class=\"line\">    <span class=\"meta\">@Bean</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> Queue <span class=\"title\">fanoutQueue</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> Queue(<span class=\"string\">\"two.queue\"</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"meta\">@Bean</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> Queue <span class=\"title\">directQueue</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> Queue(<span class=\"string\">\"four.queue\"</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"meta\">@Bean</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> Queue <span class=\"title\">topQueue</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> Queue(<span class=\"string\">\"three.queue\"</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"meta\">@Bean</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> Queue <span class=\"title\">directOneQueue</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> Queue(<span class=\"string\">\"four_one.queue\"</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 创建三种类型的交换机</span></span><br><span class=\"line\">    <span class=\"meta\">@Bean</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> FanoutExchange <span class=\"title\">fanoutExchange</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> FanoutExchange(<span class=\"string\">\"two.exchange\"</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"meta\">@Bean</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> DirectExchange <span class=\"title\">directExchange</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> DirectExchange(<span class=\"string\">\"four.exchange\"</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"meta\">@Bean</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> TopicExchange <span class=\"title\">topicExchange</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> TopicExchange(<span class=\"string\">\"three.exchange\"</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 交换机和队列绑定</span></span><br><span class=\"line\">    <span class=\"meta\">@Bean</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> Binding <span class=\"title\">fanoutBinding</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> BindingBuilder.bind(fanoutQueue()).to(fanoutExchange());</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"meta\">@Bean</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> Binding <span class=\"title\">directBinding</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> BindingBuilder.bind(directQueue()).to(directExchange()).with(<span class=\"string\">\"four.bind\"</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"meta\">@Bean</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> Binding <span class=\"title\">directOneBinding</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> BindingBuilder.bind(directOneQueue()).to(directExchange()).with(<span class=\"string\">\"four.bind\"</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"meta\">@Bean</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> Binding <span class=\"title\">topicBinding</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> BindingBuilder.bind(topQueue()).to(topicExchange()).with(<span class=\"string\">\"topicBind\"</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<ul>\n<li>消费者部分代码,只需要监听指定队列,获取的消息是根据生产者发送过来的消息(Message/String)</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@RabbitListener</span>(queues = <span class=\"string\">\"four.queue\"</span>)</span><br><span class=\"line\"><span class=\"meta\">@RabbitHandler</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">fanoutConsumer2</span><span class=\"params\">(Object msg)</span></span>&#123;</span><br><span class=\"line\">    Message message = (Message) msg;</span><br><span class=\"line\">    log.info(<span class=\"string\">\"2fanoutConsumer 接收消息msg: &#123;&#125;\"</span> , <span class=\"keyword\">new</span> String(message.getBody()));</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@RabbitListener</span>(queues = <span class=\"string\">\"four.queue\"</span>)</span><br><span class=\"line\"><span class=\"meta\">@RabbitHandler</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">fanoutConsumer3</span><span class=\"params\">(String msg)</span></span>&#123;</span><br><span class=\"line\">    log.info(<span class=\"string\">\"3fanoutConsumer 接收消息msg: &#123;&#125;\"</span> , msg);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<ul>\n<li>生产者部分代码(fanout方式路由键参数不生效),生产者不用考虑队列,投放消息只和交换机和路由键相关</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 发送Message</span></span><br><span class=\"line\"><span class=\"meta\">@RequestMapping</span>(<span class=\"string\">\"/send1/&#123;msg&#125;\"</span>)</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">sendMessage</span><span class=\"params\">(@PathVariable(<span class=\"string\">\"msg\"</span>)</span> String msg) </span>&#123;</span><br><span class=\"line\">    log.info(<span class=\"string\">\"msg1\"</span>);</span><br><span class=\"line\">    Message message = <span class=\"keyword\">new</span> Message(msg.getBytes(),<span class=\"keyword\">new</span> MessageProperties());</span><br><span class=\"line\">    rabbitTemplate.send(<span class=\"string\">\"four.exchange\"</span>,<span class=\"string\">\"aqweq\"</span>,message);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> msg;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// 发送String</span></span><br><span class=\"line\"><span class=\"meta\">@RequestMapping</span>(<span class=\"string\">\"/send/&#123;msg&#125;\"</span>)</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">sendMessage1</span><span class=\"params\">(@PathVariable(<span class=\"string\">\"msg\"</span>)</span> String msg) </span>&#123;</span><br><span class=\"line\">   log.info(<span class=\"string\">\"msg2\"</span>);</span><br><span class=\"line\">   amqpTemplate.convertAndSend(<span class=\"string\">\"four.exchange\"</span>,<span class=\"string\">\"four.bind\"</span>,msg);</span><br><span class=\"line\">   <span class=\"keyword\">return</span> msg;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"<p>AMQP概论</p>\n<h2 id=\"交换器、队列、绑定、路由键\"><a href=\"#交换器、队列、绑定、路由键\" class=\"headerlink\" title=\"交换器、队列、绑定、路由键\"></a>交换器、队列、绑定、路由键</h2><ul>\n<li>rabbitMq流程</li>\n</ul>\n<p><img src=\"http://image.tupelo.top/rabbitmq%E6%B5%81%E7%A8%8B.png\" alt=\"rabbitMq流程\"></p>\n<pre><code>交换机类型:\nfanout 交换机绑定队列,根据交换机发送消息到指定队列\ndirect 交换机通过路由键绑定队列,根据交换机和路由键发送消息\ntopic  交换机通过路由键绑定队列,根据交换机和路由键发送消息(路由键可进行匹配 #匹配一次或者多次 *匹配一次)\n</code></pre><blockquote>\n<p>需要多个队列接受同样的消息 多个队列绑定同一个路由键 一条消息只能被一个消费者消费</p>\n</blockquote>","more":"<h3 id=\"不同交换机的Demo\"><a href=\"#不同交换机的Demo\" class=\"headerlink\" title=\"不同交换机的Demo\"></a>不同交换机的Demo</h3><ul>\n<li>添加依赖</li>\n</ul>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;dependency&gt;</span><br><span class=\"line\">\t&lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span><br><span class=\"line\">\t&lt;artifactId&gt;spring-boot-starter-amqp&lt;/artifactId&gt;</span><br><span class=\"line\">&lt;/dependency&gt;</span><br></pre></td></tr></table></figure>\n<ul>\n<li>创建配置类,初始化的时候指定交换机的类型</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@Configuration</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">RabbitMqConfig</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">// 创建连接</span></span><br><span class=\"line\">    <span class=\"meta\">@Bean</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> ConnectionFactory <span class=\"title\">connectionFactory</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        CachingConnectionFactory connectionFactory = <span class=\"keyword\">new</span> CachingConnectionFactory();</span><br><span class=\"line\">        connectionFactory.setHost(host);</span><br><span class=\"line\">        connectionFactory.setPort(port);</span><br><span class=\"line\">        connectionFactory.setUsername(username);</span><br><span class=\"line\">        connectionFactory.setPassword(password);</span><br><span class=\"line\">        connectionFactory.setVirtualHost(virtualHost);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> connectionFactory;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 初始化 RabbitTemplate</span></span><br><span class=\"line\">    <span class=\"meta\">@Bean</span></span><br><span class=\"line\">    <span class=\"meta\">@Primary</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> RabbitTemplate <span class=\"title\">rabbitTemplate</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> RabbitTemplate(connectionFactory());</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 创建队列 没有的话会创建新的队列</span></span><br><span class=\"line\">    <span class=\"meta\">@Bean</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> Queue <span class=\"title\">fanoutQueue</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> Queue(<span class=\"string\">\"two.queue\"</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"meta\">@Bean</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> Queue <span class=\"title\">directQueue</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> Queue(<span class=\"string\">\"four.queue\"</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"meta\">@Bean</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> Queue <span class=\"title\">topQueue</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> Queue(<span class=\"string\">\"three.queue\"</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"meta\">@Bean</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> Queue <span class=\"title\">directOneQueue</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> Queue(<span class=\"string\">\"four_one.queue\"</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 创建三种类型的交换机</span></span><br><span class=\"line\">    <span class=\"meta\">@Bean</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> FanoutExchange <span class=\"title\">fanoutExchange</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> FanoutExchange(<span class=\"string\">\"two.exchange\"</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"meta\">@Bean</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> DirectExchange <span class=\"title\">directExchange</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> DirectExchange(<span class=\"string\">\"four.exchange\"</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"meta\">@Bean</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> TopicExchange <span class=\"title\">topicExchange</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> TopicExchange(<span class=\"string\">\"three.exchange\"</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 交换机和队列绑定</span></span><br><span class=\"line\">    <span class=\"meta\">@Bean</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> Binding <span class=\"title\">fanoutBinding</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> BindingBuilder.bind(fanoutQueue()).to(fanoutExchange());</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"meta\">@Bean</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> Binding <span class=\"title\">directBinding</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> BindingBuilder.bind(directQueue()).to(directExchange()).with(<span class=\"string\">\"four.bind\"</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"meta\">@Bean</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> Binding <span class=\"title\">directOneBinding</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> BindingBuilder.bind(directOneQueue()).to(directExchange()).with(<span class=\"string\">\"four.bind\"</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"meta\">@Bean</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> Binding <span class=\"title\">topicBinding</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> BindingBuilder.bind(topQueue()).to(topicExchange()).with(<span class=\"string\">\"topicBind\"</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<ul>\n<li>消费者部分代码,只需要监听指定队列,获取的消息是根据生产者发送过来的消息(Message/String)</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@RabbitListener</span>(queues = <span class=\"string\">\"four.queue\"</span>)</span><br><span class=\"line\"><span class=\"meta\">@RabbitHandler</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">fanoutConsumer2</span><span class=\"params\">(Object msg)</span></span>&#123;</span><br><span class=\"line\">    Message message = (Message) msg;</span><br><span class=\"line\">    log.info(<span class=\"string\">\"2fanoutConsumer 接收消息msg: &#123;&#125;\"</span> , <span class=\"keyword\">new</span> String(message.getBody()));</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@RabbitListener</span>(queues = <span class=\"string\">\"four.queue\"</span>)</span><br><span class=\"line\"><span class=\"meta\">@RabbitHandler</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">fanoutConsumer3</span><span class=\"params\">(String msg)</span></span>&#123;</span><br><span class=\"line\">    log.info(<span class=\"string\">\"3fanoutConsumer 接收消息msg: &#123;&#125;\"</span> , msg);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<ul>\n<li>生产者部分代码(fanout方式路由键参数不生效),生产者不用考虑队列,投放消息只和交换机和路由键相关</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 发送Message</span></span><br><span class=\"line\"><span class=\"meta\">@RequestMapping</span>(<span class=\"string\">\"/send1/&#123;msg&#125;\"</span>)</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">sendMessage</span><span class=\"params\">(@PathVariable(<span class=\"string\">\"msg\"</span>)</span> String msg) </span>&#123;</span><br><span class=\"line\">    log.info(<span class=\"string\">\"msg1\"</span>);</span><br><span class=\"line\">    Message message = <span class=\"keyword\">new</span> Message(msg.getBytes(),<span class=\"keyword\">new</span> MessageProperties());</span><br><span class=\"line\">    rabbitTemplate.send(<span class=\"string\">\"four.exchange\"</span>,<span class=\"string\">\"aqweq\"</span>,message);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> msg;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// 发送String</span></span><br><span class=\"line\"><span class=\"meta\">@RequestMapping</span>(<span class=\"string\">\"/send/&#123;msg&#125;\"</span>)</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">sendMessage1</span><span class=\"params\">(@PathVariable(<span class=\"string\">\"msg\"</span>)</span> String msg) </span>&#123;</span><br><span class=\"line\">   log.info(<span class=\"string\">\"msg2\"</span>);</span><br><span class=\"line\">   amqpTemplate.convertAndSend(<span class=\"string\">\"four.exchange\"</span>,<span class=\"string\">\"four.bind\"</span>,msg);</span><br><span class=\"line\">   <span class=\"keyword\">return</span> msg;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>"},{"title":"RabbitMq - 配置和相关命令","_content":"\nRabbitMq 修改端口/用户权限 相关命令\n\n## RabbitMq 基相关命令\n\n- 配置文件\n\n> RabbitMq配置文件在/etc/rabbitmq下,名为rabbitmq.config / rabbitmq-env.conf,需要自己创建。\n\n\t修改端口:\n\t创建rabbitmq-env.conf文件,添加RABBITMQ_NODE_PORT=8500,重启RabbitMq即可生效.\n\n- 启动和关闭RabbitMq\n\n```bash\nrabbitmq-server #会启动Erlang节点和Rabbitmq应用 \nrabbitmqctl stop #会关闭Erlang节点和Rabbitmq应用 \nrabbitmqctl status  #可以检查消息节点是否正常\n\n#单独关闭RabbitMQ应用\nrabbitmqctl stop_app #关闭Rabbitmq应用 \nrabbitmqctl start_app #启动Rabbitmq应用\n```\n\n<!-- more -->\n\n- 管理虚拟主机\n\n```bash\nrabbitmqctl add_vhost tupelo # 创建vhost\nrabbitmqctl list_vhosts   # 列出所有的vhost\n```\n\n- 用户管理\n\n```bash\nrabbitmqctl add_user tupelo 123456 # 创建用户\nrabbitmqctl  delete_user  Username # 删除用户\nrabbitmqctl  change_password  Username  Newpassword # 修改用户\nrabbitmqctl list_users # 查询所有的用户\n```\n\n- 用户权限管理(guest特殊用户)\n\n> guest是默认用户，具有默认virtual host \"/\"上的全部权限，仅能通过localhost访问RabbitMQ包括Plugin，建议删除或更改密码。可通过将配置文件中loopback_users来取消其本地访问的限制：[{rabbit, [{loopback_users, []}]}] \n\n> 用户仅能对其所能访问的virtual hosts中的资源进行操作。这里的资源指的是virtual hosts中的exchanges、queues等，操作包括对资源进行配置、写、读。配置权限可创建、删除、资源并修改资源的行为，写权限可向资源发送消息，读权限从资源获取消息。比如：  \nexchange和queue的declare与delete分别需要：exchange和queue上的配置权限  \n> queue的bind与unbind需要：queue写权限，exchange的读权限  \n> 发消息(publish)需exchange的写权限  \n> 获取或清除(get、consume、purge)消息需queue的读权限  \n> 对何种资源具有配置、写、读的权限通过正则表达式来匹配，具体命令如下：  \n> rabbitmqctl set_permissions [-p <vhostpath>] <user> <conf> <write> <read>  \n\n```bash\n#如用户Mark在虚拟主机logHost上的所有权限： \nrabbitmqctl set_permissions –p logHost Mark  '.*'  '.*'  '.*'\n# 列出用户的权限\nrabbitmqctl  list_user_permissions  User  \n# 清空(某一个vhost)用户的权限\nrabbitmqctl  clear_permissions  [-p VHostPath]  User\n# 查询(某一个vhost)所有用户的权限\nrabbitmqctl  list_permissions  [-p  VHostPath]\n```\n\n\n- 用户角色\n\n```bash\n# 设置用户角色\nrabbitmqctl  set_user_tags  tupelo administrator \n# 设置用户多个角色\nrabbitmqctl  set_user_tags  tupelo  monitoring  policymaker\n```\n\n- 用户角色分类 (none、management、policymaker、monitoring、administrator)\n\n> none、management、policymaker、monitoring、administrator\n\n\t(1) 超级管理员(administrator)\n\t\tpolicymaker和monitoring可以做的任何事加:\n\t\t创建和删除virtual hosts\n\t\t查看、创建和删除users\n\t\t查看创建和删除permissions\n\t\t关闭其他用户的connections\n\n\t(2) 监控者(monitoring)\n\t\tmanagement可以做的任何事加：\n\t\t列出所有virtual hosts，包括他们不能登录的virtual hosts\n\t\t查看其他用户的connections和channels\n\t\t查看节点级别的数据如clustering和memory使用情况\n\t\t查看真正的关于所有virtual hosts的全局的统计信息\n\n\t(3) 策略制定者(policymaker)\n\t\tmanagement可以做的任何事加：\n\t\t查看、创建和删除自己的virtual hosts所属的policies和parameters\n\n\t(4) 普通管理者(management)\n\t\t普通的生产者和消费者加：\n\t\t列出自己可以通过AMQP登入的virtual hosts  \n\t\t查看自己的virtual hosts中的queues, exchanges 和 bindings\n\t\t查看和关闭自己的channels 和 connections\n\t\t查看有关自己的virtual hosts的“全局”的统计信息，包含其他用户在这些virtual hosts中的活动。\n\n\t(5) 其他(none)\n\t\t不能访问 management plugin，通常就是普通的生产者和消费者\n\n- 其他命令\n\n```bash\nrabbitmqctl list_queues    # 查看所有的队列\nrabbitmqctl list_exchanges # 查看所有的交换机\nrabbitmqctl list_bindings  #查看所有的绑定\n```\n\n\n\n\n\n\n\n\n\n\n","source":"_posts/rabbitmq-02.md","raw":"---\ntitle: RabbitMq - 配置和相关命令\ntags:\n  - RabbitMq\n---\n\nRabbitMq 修改端口/用户权限 相关命令\n\n## RabbitMq 基相关命令\n\n- 配置文件\n\n> RabbitMq配置文件在/etc/rabbitmq下,名为rabbitmq.config / rabbitmq-env.conf,需要自己创建。\n\n\t修改端口:\n\t创建rabbitmq-env.conf文件,添加RABBITMQ_NODE_PORT=8500,重启RabbitMq即可生效.\n\n- 启动和关闭RabbitMq\n\n```bash\nrabbitmq-server #会启动Erlang节点和Rabbitmq应用 \nrabbitmqctl stop #会关闭Erlang节点和Rabbitmq应用 \nrabbitmqctl status  #可以检查消息节点是否正常\n\n#单独关闭RabbitMQ应用\nrabbitmqctl stop_app #关闭Rabbitmq应用 \nrabbitmqctl start_app #启动Rabbitmq应用\n```\n\n<!-- more -->\n\n- 管理虚拟主机\n\n```bash\nrabbitmqctl add_vhost tupelo # 创建vhost\nrabbitmqctl list_vhosts   # 列出所有的vhost\n```\n\n- 用户管理\n\n```bash\nrabbitmqctl add_user tupelo 123456 # 创建用户\nrabbitmqctl  delete_user  Username # 删除用户\nrabbitmqctl  change_password  Username  Newpassword # 修改用户\nrabbitmqctl list_users # 查询所有的用户\n```\n\n- 用户权限管理(guest特殊用户)\n\n> guest是默认用户，具有默认virtual host \"/\"上的全部权限，仅能通过localhost访问RabbitMQ包括Plugin，建议删除或更改密码。可通过将配置文件中loopback_users来取消其本地访问的限制：[{rabbit, [{loopback_users, []}]}] \n\n> 用户仅能对其所能访问的virtual hosts中的资源进行操作。这里的资源指的是virtual hosts中的exchanges、queues等，操作包括对资源进行配置、写、读。配置权限可创建、删除、资源并修改资源的行为，写权限可向资源发送消息，读权限从资源获取消息。比如：  \nexchange和queue的declare与delete分别需要：exchange和queue上的配置权限  \n> queue的bind与unbind需要：queue写权限，exchange的读权限  \n> 发消息(publish)需exchange的写权限  \n> 获取或清除(get、consume、purge)消息需queue的读权限  \n> 对何种资源具有配置、写、读的权限通过正则表达式来匹配，具体命令如下：  \n> rabbitmqctl set_permissions [-p <vhostpath>] <user> <conf> <write> <read>  \n\n```bash\n#如用户Mark在虚拟主机logHost上的所有权限： \nrabbitmqctl set_permissions –p logHost Mark  '.*'  '.*'  '.*'\n# 列出用户的权限\nrabbitmqctl  list_user_permissions  User  \n# 清空(某一个vhost)用户的权限\nrabbitmqctl  clear_permissions  [-p VHostPath]  User\n# 查询(某一个vhost)所有用户的权限\nrabbitmqctl  list_permissions  [-p  VHostPath]\n```\n\n\n- 用户角色\n\n```bash\n# 设置用户角色\nrabbitmqctl  set_user_tags  tupelo administrator \n# 设置用户多个角色\nrabbitmqctl  set_user_tags  tupelo  monitoring  policymaker\n```\n\n- 用户角色分类 (none、management、policymaker、monitoring、administrator)\n\n> none、management、policymaker、monitoring、administrator\n\n\t(1) 超级管理员(administrator)\n\t\tpolicymaker和monitoring可以做的任何事加:\n\t\t创建和删除virtual hosts\n\t\t查看、创建和删除users\n\t\t查看创建和删除permissions\n\t\t关闭其他用户的connections\n\n\t(2) 监控者(monitoring)\n\t\tmanagement可以做的任何事加：\n\t\t列出所有virtual hosts，包括他们不能登录的virtual hosts\n\t\t查看其他用户的connections和channels\n\t\t查看节点级别的数据如clustering和memory使用情况\n\t\t查看真正的关于所有virtual hosts的全局的统计信息\n\n\t(3) 策略制定者(policymaker)\n\t\tmanagement可以做的任何事加：\n\t\t查看、创建和删除自己的virtual hosts所属的policies和parameters\n\n\t(4) 普通管理者(management)\n\t\t普通的生产者和消费者加：\n\t\t列出自己可以通过AMQP登入的virtual hosts  \n\t\t查看自己的virtual hosts中的queues, exchanges 和 bindings\n\t\t查看和关闭自己的channels 和 connections\n\t\t查看有关自己的virtual hosts的“全局”的统计信息，包含其他用户在这些virtual hosts中的活动。\n\n\t(5) 其他(none)\n\t\t不能访问 management plugin，通常就是普通的生产者和消费者\n\n- 其他命令\n\n```bash\nrabbitmqctl list_queues    # 查看所有的队列\nrabbitmqctl list_exchanges # 查看所有的交换机\nrabbitmqctl list_bindings  #查看所有的绑定\n```\n\n\n\n\n\n\n\n\n\n\n","slug":"rabbitmq-02","published":1,"date":"2018-12-30T03:32:54.252Z","updated":"2018-12-30T05:17:28.090Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjskls630000q745bzxwma18e","content":"<p>RabbitMq 修改端口/用户权限 相关命令</p>\n<h2 id=\"RabbitMq-基相关命令\"><a href=\"#RabbitMq-基相关命令\" class=\"headerlink\" title=\"RabbitMq 基相关命令\"></a>RabbitMq 基相关命令</h2><ul>\n<li>配置文件</li>\n</ul>\n<blockquote>\n<p>RabbitMq配置文件在/etc/rabbitmq下,名为rabbitmq.config / rabbitmq-env.conf,需要自己创建。</p>\n</blockquote>\n<pre><code>修改端口:\n创建rabbitmq-env.conf文件,添加RABBITMQ_NODE_PORT=8500,重启RabbitMq即可生效.\n</code></pre><ul>\n<li>启动和关闭RabbitMq</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">rabbitmq-server <span class=\"comment\">#会启动Erlang节点和Rabbitmq应用 </span></span><br><span class=\"line\">rabbitmqctl stop <span class=\"comment\">#会关闭Erlang节点和Rabbitmq应用 </span></span><br><span class=\"line\">rabbitmqctl status  <span class=\"comment\">#可以检查消息节点是否正常</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#单独关闭RabbitMQ应用</span></span><br><span class=\"line\">rabbitmqctl stop_app <span class=\"comment\">#关闭Rabbitmq应用 </span></span><br><span class=\"line\">rabbitmqctl start_app <span class=\"comment\">#启动Rabbitmq应用</span></span><br></pre></td></tr></table></figure>\n<a id=\"more\"></a>\n<ul>\n<li>管理虚拟主机</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">rabbitmqctl add_vhost tupelo <span class=\"comment\"># 创建vhost</span></span><br><span class=\"line\">rabbitmqctl list_vhosts   <span class=\"comment\"># 列出所有的vhost</span></span><br></pre></td></tr></table></figure>\n<ul>\n<li>用户管理</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">rabbitmqctl add_user tupelo 123456 <span class=\"comment\"># 创建用户</span></span><br><span class=\"line\">rabbitmqctl  delete_user  Username <span class=\"comment\"># 删除用户</span></span><br><span class=\"line\">rabbitmqctl  change_password  Username  Newpassword <span class=\"comment\"># 修改用户</span></span><br><span class=\"line\">rabbitmqctl list_users <span class=\"comment\"># 查询所有的用户</span></span><br></pre></td></tr></table></figure>\n<ul>\n<li>用户权限管理(guest特殊用户)</li>\n</ul>\n<blockquote>\n<p>guest是默认用户，具有默认virtual host “/“上的全部权限，仅能通过localhost访问RabbitMQ包括Plugin，建议删除或更改密码。可通过将配置文件中loopback_users来取消其本地访问的限制：[{rabbit, [{loopback_users, []}]}] </p>\n</blockquote>\n<blockquote>\n<p>用户仅能对其所能访问的virtual hosts中的资源进行操作。这里的资源指的是virtual hosts中的exchanges、queues等，操作包括对资源进行配置、写、读。配置权限可创建、删除、资源并修改资源的行为，写权限可向资源发送消息，读权限从资源获取消息。比如：<br>exchange和queue的declare与delete分别需要：exchange和queue上的配置权限<br>queue的bind与unbind需要：queue写权限，exchange的读权限<br>发消息(publish)需exchange的写权限<br>获取或清除(get、consume、purge)消息需queue的读权限<br>对何种资源具有配置、写、读的权限通过正则表达式来匹配，具体命令如下：<br>rabbitmqctl set_permissions [-p <vhostpath>] <user> <conf> <write> <read>  </read></write></conf></user></vhostpath></p>\n</blockquote>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#如用户Mark在虚拟主机logHost上的所有权限： </span></span><br><span class=\"line\">rabbitmqctl set_permissions –p logHost Mark  <span class=\"string\">'.*'</span>  <span class=\"string\">'.*'</span>  <span class=\"string\">'.*'</span></span><br><span class=\"line\"><span class=\"comment\"># 列出用户的权限</span></span><br><span class=\"line\">rabbitmqctl  list_user_permissions  User  </span><br><span class=\"line\"><span class=\"comment\"># 清空(某一个vhost)用户的权限</span></span><br><span class=\"line\">rabbitmqctl  clear_permissions  [-p VHostPath]  User</span><br><span class=\"line\"><span class=\"comment\"># 查询(某一个vhost)所有用户的权限</span></span><br><span class=\"line\">rabbitmqctl  list_permissions  [-p  VHostPath]</span><br></pre></td></tr></table></figure>\n<ul>\n<li>用户角色</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 设置用户角色</span></span><br><span class=\"line\">rabbitmqctl  set_user_tags  tupelo administrator </span><br><span class=\"line\"><span class=\"comment\"># 设置用户多个角色</span></span><br><span class=\"line\">rabbitmqctl  set_user_tags  tupelo  monitoring  policymaker</span><br></pre></td></tr></table></figure>\n<ul>\n<li>用户角色分类 (none、management、policymaker、monitoring、administrator)</li>\n</ul>\n<blockquote>\n<p>none、management、policymaker、monitoring、administrator</p>\n</blockquote>\n<pre><code>(1) 超级管理员(administrator)\n    policymaker和monitoring可以做的任何事加:\n    创建和删除virtual hosts\n    查看、创建和删除users\n    查看创建和删除permissions\n    关闭其他用户的connections\n\n(2) 监控者(monitoring)\n    management可以做的任何事加：\n    列出所有virtual hosts，包括他们不能登录的virtual hosts\n    查看其他用户的connections和channels\n    查看节点级别的数据如clustering和memory使用情况\n    查看真正的关于所有virtual hosts的全局的统计信息\n\n(3) 策略制定者(policymaker)\n    management可以做的任何事加：\n    查看、创建和删除自己的virtual hosts所属的policies和parameters\n\n(4) 普通管理者(management)\n    普通的生产者和消费者加：\n    列出自己可以通过AMQP登入的virtual hosts  \n    查看自己的virtual hosts中的queues, exchanges 和 bindings\n    查看和关闭自己的channels 和 connections\n    查看有关自己的virtual hosts的“全局”的统计信息，包含其他用户在这些virtual hosts中的活动。\n\n(5) 其他(none)\n    不能访问 management plugin，通常就是普通的生产者和消费者\n</code></pre><ul>\n<li>其他命令</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">rabbitmqctl list_queues    <span class=\"comment\"># 查看所有的队列</span></span><br><span class=\"line\">rabbitmqctl list_exchanges <span class=\"comment\"># 查看所有的交换机</span></span><br><span class=\"line\">rabbitmqctl list_bindings  <span class=\"comment\">#查看所有的绑定</span></span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"<p>RabbitMq 修改端口/用户权限 相关命令</p>\n<h2 id=\"RabbitMq-基相关命令\"><a href=\"#RabbitMq-基相关命令\" class=\"headerlink\" title=\"RabbitMq 基相关命令\"></a>RabbitMq 基相关命令</h2><ul>\n<li>配置文件</li>\n</ul>\n<blockquote>\n<p>RabbitMq配置文件在/etc/rabbitmq下,名为rabbitmq.config / rabbitmq-env.conf,需要自己创建。</p>\n</blockquote>\n<pre><code>修改端口:\n创建rabbitmq-env.conf文件,添加RABBITMQ_NODE_PORT=8500,重启RabbitMq即可生效.\n</code></pre><ul>\n<li>启动和关闭RabbitMq</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">rabbitmq-server <span class=\"comment\">#会启动Erlang节点和Rabbitmq应用 </span></span><br><span class=\"line\">rabbitmqctl stop <span class=\"comment\">#会关闭Erlang节点和Rabbitmq应用 </span></span><br><span class=\"line\">rabbitmqctl status  <span class=\"comment\">#可以检查消息节点是否正常</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#单独关闭RabbitMQ应用</span></span><br><span class=\"line\">rabbitmqctl stop_app <span class=\"comment\">#关闭Rabbitmq应用 </span></span><br><span class=\"line\">rabbitmqctl start_app <span class=\"comment\">#启动Rabbitmq应用</span></span><br></pre></td></tr></table></figure>","more":"<ul>\n<li>管理虚拟主机</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">rabbitmqctl add_vhost tupelo <span class=\"comment\"># 创建vhost</span></span><br><span class=\"line\">rabbitmqctl list_vhosts   <span class=\"comment\"># 列出所有的vhost</span></span><br></pre></td></tr></table></figure>\n<ul>\n<li>用户管理</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">rabbitmqctl add_user tupelo 123456 <span class=\"comment\"># 创建用户</span></span><br><span class=\"line\">rabbitmqctl  delete_user  Username <span class=\"comment\"># 删除用户</span></span><br><span class=\"line\">rabbitmqctl  change_password  Username  Newpassword <span class=\"comment\"># 修改用户</span></span><br><span class=\"line\">rabbitmqctl list_users <span class=\"comment\"># 查询所有的用户</span></span><br></pre></td></tr></table></figure>\n<ul>\n<li>用户权限管理(guest特殊用户)</li>\n</ul>\n<blockquote>\n<p>guest是默认用户，具有默认virtual host “/“上的全部权限，仅能通过localhost访问RabbitMQ包括Plugin，建议删除或更改密码。可通过将配置文件中loopback_users来取消其本地访问的限制：[{rabbit, [{loopback_users, []}]}] </p>\n</blockquote>\n<blockquote>\n<p>用户仅能对其所能访问的virtual hosts中的资源进行操作。这里的资源指的是virtual hosts中的exchanges、queues等，操作包括对资源进行配置、写、读。配置权限可创建、删除、资源并修改资源的行为，写权限可向资源发送消息，读权限从资源获取消息。比如：<br>exchange和queue的declare与delete分别需要：exchange和queue上的配置权限<br>queue的bind与unbind需要：queue写权限，exchange的读权限<br>发消息(publish)需exchange的写权限<br>获取或清除(get、consume、purge)消息需queue的读权限<br>对何种资源具有配置、写、读的权限通过正则表达式来匹配，具体命令如下：<br>rabbitmqctl set_permissions [-p <vhostpath>] <user> <conf> <write> <read>  </read></write></conf></user></vhostpath></p>\n</blockquote>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#如用户Mark在虚拟主机logHost上的所有权限： </span></span><br><span class=\"line\">rabbitmqctl set_permissions –p logHost Mark  <span class=\"string\">'.*'</span>  <span class=\"string\">'.*'</span>  <span class=\"string\">'.*'</span></span><br><span class=\"line\"><span class=\"comment\"># 列出用户的权限</span></span><br><span class=\"line\">rabbitmqctl  list_user_permissions  User  </span><br><span class=\"line\"><span class=\"comment\"># 清空(某一个vhost)用户的权限</span></span><br><span class=\"line\">rabbitmqctl  clear_permissions  [-p VHostPath]  User</span><br><span class=\"line\"><span class=\"comment\"># 查询(某一个vhost)所有用户的权限</span></span><br><span class=\"line\">rabbitmqctl  list_permissions  [-p  VHostPath]</span><br></pre></td></tr></table></figure>\n<ul>\n<li>用户角色</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 设置用户角色</span></span><br><span class=\"line\">rabbitmqctl  set_user_tags  tupelo administrator </span><br><span class=\"line\"><span class=\"comment\"># 设置用户多个角色</span></span><br><span class=\"line\">rabbitmqctl  set_user_tags  tupelo  monitoring  policymaker</span><br></pre></td></tr></table></figure>\n<ul>\n<li>用户角色分类 (none、management、policymaker、monitoring、administrator)</li>\n</ul>\n<blockquote>\n<p>none、management、policymaker、monitoring、administrator</p>\n</blockquote>\n<pre><code>(1) 超级管理员(administrator)\n    policymaker和monitoring可以做的任何事加:\n    创建和删除virtual hosts\n    查看、创建和删除users\n    查看创建和删除permissions\n    关闭其他用户的connections\n\n(2) 监控者(monitoring)\n    management可以做的任何事加：\n    列出所有virtual hosts，包括他们不能登录的virtual hosts\n    查看其他用户的connections和channels\n    查看节点级别的数据如clustering和memory使用情况\n    查看真正的关于所有virtual hosts的全局的统计信息\n\n(3) 策略制定者(policymaker)\n    management可以做的任何事加：\n    查看、创建和删除自己的virtual hosts所属的policies和parameters\n\n(4) 普通管理者(management)\n    普通的生产者和消费者加：\n    列出自己可以通过AMQP登入的virtual hosts  \n    查看自己的virtual hosts中的queues, exchanges 和 bindings\n    查看和关闭自己的channels 和 connections\n    查看有关自己的virtual hosts的“全局”的统计信息，包含其他用户在这些virtual hosts中的活动。\n\n(5) 其他(none)\n    不能访问 management plugin，通常就是普通的生产者和消费者\n</code></pre><ul>\n<li>其他命令</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">rabbitmqctl list_queues    <span class=\"comment\"># 查看所有的队列</span></span><br><span class=\"line\">rabbitmqctl list_exchanges <span class=\"comment\"># 查看所有的交换机</span></span><br><span class=\"line\">rabbitmqctl list_bindings  <span class=\"comment\">#查看所有的绑定</span></span><br></pre></td></tr></table></figure>"},{"title":"RabbitMq - 生产者消息确认","_content":"\nRabbitMq生产者消息确认\n\n## RabbitMq 生产者消息确认\n\n### 生产者权衡\n> 快、低==========> 慢、高\n\n- 无保障\n- 失败通知  参数mandatory 消息是否成功到达队列\n- 发送方确认模式  消息是否成功到达exchange 和失败通知结合使用\n- 备用交换机     定义个一个备用交换机 Map\n- 高可用队列\n- 事务          影响性能 2-10倍 强一致性\n- 事务+高可用\n- 持久化\n\n<!-- more -->\n\n#### 失败通知 需要开启 PublisherReturns=true mandatory=true\n\n```java\n// 初始化一个rabbitTemplateReturn 用来做失败通知 设置PublisherReturns=true\n@Bean(value = \"rabbitTemplateReturn\")\npublic RabbitTemplate rabbitTemplateReturn() {\n    RabbitTemplate rabbitTemplate = new RabbitTemplate(connectionFactory());\n    ((CachingConnectionFactory)rabbitTemplate.getConnectionFactory()).setPublisherReturns(true);\n    return rabbitTemplate;\n}\n\n// 定义一个类实现RabbitTemplate.ReturnCallback 并且开启mandatory=true 指定ReturnCallback\n@Component\npublic class RabbitReturnCallback implements RabbitTemplate.ReturnCallback {\n\n    @Autowired\n    @Qualifier(\"rabbitTemplateReturn\")\n    private RabbitTemplate rabbitTemplate;\n\n    @PostConstruct\n    public void init(){\n        //指定 ReturnCallback\n        rabbitTemplate.setReturnCallback(this);\n        rabbitTemplate.setMandatory(true);\n    }\n\n    @Override\n    public void returnedMessage(Message message, int i, String s, String s1, String s2) {\n        System.out.println(\"消息主体 message : \"+message);\n        System.out.println(\"消息主体 message : \"+i);\n        System.out.println(\"描述：\"+s);\n        System.out.println(\"消息使用的交换器 exchange : \"+s1);\n        System.out.println(\"消息使用的路由键 routing : \"+s2);\n    }\n}\n\n// 发送方 若没有成功路由 则回调returnedMessage方法\n@RequestMapping(\"/send2/{msg}\")\npublic String sendMessageReturn(@PathVariable(\"msg\") String msg) {\n    log.info(\"msg1\");\n    Message message = new Message(msg.getBytes(),new MessageProperties());\n    rabbitTemplateRerutn.send(\"four.exchange\",\"aqweq\",message);\n    return msg;\n}\n\n```\n\n#### 发送方确认模式 需要开启 PublisherReturns=true mandatory=true\n\n\t确认的三种方式:  \n\tchannel.waitForConfirms()普通发送方确认模式；消息到达交换器，就会返回true  \n\tchannel.waitForConfirmsOrDie()批量确认模式；使用同步方式等所有的消息发送之后才会执行后面代码，只要有一个消息未到达交换器就会抛出IOException异常  \n\tchannel.addConfirmListener()异步监听发送方确认模式  \n\n```java\n\n// 初始化一个rabbitTemplateConfirm 用来做失败通知 设置PublisherReturns=true\n@Bean(value = \"rabbitTemplateConfirm\")\npublic RabbitTemplate rabbitTemplateConfirm() {\n    RabbitTemplate rabbitTemplate = new RabbitTemplate(connectionFactory());\n    ((CachingConnectionFactory)rabbitTemplate.getConnectionFactory()).setPublisherConfirms(true);\n    return rabbitTemplate;\n}\n\n\n/**\n*\t定义一个类实现RabbitTemplate.ReturnCallback 并且开启mandatory=true 指定ConfirmCallback\n*\tack 消息是否成功到达exchange 若没有正确路由到队列 ack返回也是true 所以和失败通知结合使用 \n*   这是异步处理的方式\n*/\n@Component\npublic class RabbitConfirmCallback implements RabbitTemplate.ConfirmCallback {\n\n    @Autowired\n    @Qualifier(\"rabbitTemplateConfirm\")\n    private RabbitTemplate rabbitTemplate;\n\n    @PostConstruct\n    public void init(){\n        //指定 ConfirmCallback\n        rabbitTemplate.setConfirmCallback(this);\n        rabbitTemplate.setMandatory(true);\n    }\n\n    @Override\n    public void confirm(CorrelationData correlationData, boolean ack, String cause){\n        System.out.println(\"消息唯一标识：\"+correlationData);\n        System.out.println(\"确认结果：\"+ack);\n        System.out.println(\"失败原因：\"+cause);\n    }\n}\n\n// 发送方 \n@RequestMapping(\"/send3/{msg}\")\npublic String sendMessageConfirm(@PathVariable(\"msg\") String msg) {\n    String msgId = UUID.randomUUID().toString();\n\tCorrelationData date = new CorrelationData(msgId);\n\t// message 可以设置一些头信息 msgId \n\tMessage message = MessageBuilder.withBody(\"测试\".toString().getBytes())\n                .setContentType(MessageProperties.CONTENT_TYPE_TEXT_PLAIN)\n                .setCorrelationId(msgId).build();\n    rabbitTemplateConfirm.send(\"four.exchange1\",\"aqweq\",message,date);\n    return msg;\n}\n\n\n/**\n*  \n*   同步处理方式如下：\n*   发送方\n*   TODO operations.waitForConfirms返回一直是true? 待处理\n*/\n\n@RequestMapping(\"/send4/{msg}\")\npublic String sendMessageOperateConfirm(@PathVariable(\"msg\") String msg) {\n    Message message = new Message(msg.getBytes(),new MessageProperties());\n    rabbitTemplateOperateConfirm.send(\"four.exchange1\",\"aqweq\",message);\n\n    rabbitTemplateOperateConfirm.invoke(new RabbitOperations.OperationsCallback<Object>() {\n        @Override\n        public Object doInRabbit(RabbitOperations operations) {\n//          operations.waitForConfirmsOrDie(100);\n            System.out.println(operations.waitForConfirms(100));\n            return null;\n        }\n    });\n    return msg;\n}\n\n```\n\n> 以上确认可互相配合\n\n- 发送消息前,绑定并保存msgId和message的关系\n- 当confirm或return回调时,根据ack类别等,分别处理. 例如return或者ack=false则说明有问题,报警, 如果ack=true则删除关系(因为return在confirm前,所以一条消息在return后又ack=true的情况也是按return处理)\n- 定时检查这个绑定关系列表,如果发现一些已经超时(自己设定的超时时间)未被处理(即未return和confirm),则手动处理这些消息.\n- 需要注意如果是自动重发的话,消费端需要做幂等或去重处理.\n\n\n\n#### 备用交换机\n\n- 定义一个备用交换机\n- 声明一个map key为\"alternate-exchange\" value为备用交换机的名称\n- 声明主交换机时添加参数map\n- 如果发送消息到主交换机失败则会转发到备用交换机\n\n```java\n\n// 定义备用交换机 一般为fanout类型 路由键一般为#\n@Bean\npublic Queue fanoutBakQueue(){\n    return new Queue(\"four_bak.queue\");\n}\n@Bean\npublic FanoutExchange fanoutBakExchange(){\n    return new FanoutExchange(\"four.exchange_bak\");\n}\n@Bean\npublic Binding fanoutBakBinding(){\n    return BindingBuilder.bind(fanoutBakQueue()).to(fanoutBakExchange());\n}\n\n// 定义主交换机 定义map\n@Bean\npublic DirectExchange directExchange(){\n    Map<String,Object> map = new HashMap<String,Object>(16);\n    map.put(\"alternate-exchange\",\"four.exchange_bak\");\n    return new DirectExchange(\"four.exchange\",false,false,map);\n}\n\n```\n\n#### 高可用队列\n\n> 集群情况使用\n\n#### 消息持久化\n\n> 可靠性最高\n\n\n#### 事务 事务高可用队列\n\n> 不使用 性能损耗严重\n\n\n\n\n\n\n\n","source":"_posts/rabbitmq-03.md","raw":"---\ntitle: RabbitMq - 生产者消息确认\ntags:\n  - RabbitMq\n---\n\nRabbitMq生产者消息确认\n\n## RabbitMq 生产者消息确认\n\n### 生产者权衡\n> 快、低==========> 慢、高\n\n- 无保障\n- 失败通知  参数mandatory 消息是否成功到达队列\n- 发送方确认模式  消息是否成功到达exchange 和失败通知结合使用\n- 备用交换机     定义个一个备用交换机 Map\n- 高可用队列\n- 事务          影响性能 2-10倍 强一致性\n- 事务+高可用\n- 持久化\n\n<!-- more -->\n\n#### 失败通知 需要开启 PublisherReturns=true mandatory=true\n\n```java\n// 初始化一个rabbitTemplateReturn 用来做失败通知 设置PublisherReturns=true\n@Bean(value = \"rabbitTemplateReturn\")\npublic RabbitTemplate rabbitTemplateReturn() {\n    RabbitTemplate rabbitTemplate = new RabbitTemplate(connectionFactory());\n    ((CachingConnectionFactory)rabbitTemplate.getConnectionFactory()).setPublisherReturns(true);\n    return rabbitTemplate;\n}\n\n// 定义一个类实现RabbitTemplate.ReturnCallback 并且开启mandatory=true 指定ReturnCallback\n@Component\npublic class RabbitReturnCallback implements RabbitTemplate.ReturnCallback {\n\n    @Autowired\n    @Qualifier(\"rabbitTemplateReturn\")\n    private RabbitTemplate rabbitTemplate;\n\n    @PostConstruct\n    public void init(){\n        //指定 ReturnCallback\n        rabbitTemplate.setReturnCallback(this);\n        rabbitTemplate.setMandatory(true);\n    }\n\n    @Override\n    public void returnedMessage(Message message, int i, String s, String s1, String s2) {\n        System.out.println(\"消息主体 message : \"+message);\n        System.out.println(\"消息主体 message : \"+i);\n        System.out.println(\"描述：\"+s);\n        System.out.println(\"消息使用的交换器 exchange : \"+s1);\n        System.out.println(\"消息使用的路由键 routing : \"+s2);\n    }\n}\n\n// 发送方 若没有成功路由 则回调returnedMessage方法\n@RequestMapping(\"/send2/{msg}\")\npublic String sendMessageReturn(@PathVariable(\"msg\") String msg) {\n    log.info(\"msg1\");\n    Message message = new Message(msg.getBytes(),new MessageProperties());\n    rabbitTemplateRerutn.send(\"four.exchange\",\"aqweq\",message);\n    return msg;\n}\n\n```\n\n#### 发送方确认模式 需要开启 PublisherReturns=true mandatory=true\n\n\t确认的三种方式:  \n\tchannel.waitForConfirms()普通发送方确认模式；消息到达交换器，就会返回true  \n\tchannel.waitForConfirmsOrDie()批量确认模式；使用同步方式等所有的消息发送之后才会执行后面代码，只要有一个消息未到达交换器就会抛出IOException异常  \n\tchannel.addConfirmListener()异步监听发送方确认模式  \n\n```java\n\n// 初始化一个rabbitTemplateConfirm 用来做失败通知 设置PublisherReturns=true\n@Bean(value = \"rabbitTemplateConfirm\")\npublic RabbitTemplate rabbitTemplateConfirm() {\n    RabbitTemplate rabbitTemplate = new RabbitTemplate(connectionFactory());\n    ((CachingConnectionFactory)rabbitTemplate.getConnectionFactory()).setPublisherConfirms(true);\n    return rabbitTemplate;\n}\n\n\n/**\n*\t定义一个类实现RabbitTemplate.ReturnCallback 并且开启mandatory=true 指定ConfirmCallback\n*\tack 消息是否成功到达exchange 若没有正确路由到队列 ack返回也是true 所以和失败通知结合使用 \n*   这是异步处理的方式\n*/\n@Component\npublic class RabbitConfirmCallback implements RabbitTemplate.ConfirmCallback {\n\n    @Autowired\n    @Qualifier(\"rabbitTemplateConfirm\")\n    private RabbitTemplate rabbitTemplate;\n\n    @PostConstruct\n    public void init(){\n        //指定 ConfirmCallback\n        rabbitTemplate.setConfirmCallback(this);\n        rabbitTemplate.setMandatory(true);\n    }\n\n    @Override\n    public void confirm(CorrelationData correlationData, boolean ack, String cause){\n        System.out.println(\"消息唯一标识：\"+correlationData);\n        System.out.println(\"确认结果：\"+ack);\n        System.out.println(\"失败原因：\"+cause);\n    }\n}\n\n// 发送方 \n@RequestMapping(\"/send3/{msg}\")\npublic String sendMessageConfirm(@PathVariable(\"msg\") String msg) {\n    String msgId = UUID.randomUUID().toString();\n\tCorrelationData date = new CorrelationData(msgId);\n\t// message 可以设置一些头信息 msgId \n\tMessage message = MessageBuilder.withBody(\"测试\".toString().getBytes())\n                .setContentType(MessageProperties.CONTENT_TYPE_TEXT_PLAIN)\n                .setCorrelationId(msgId).build();\n    rabbitTemplateConfirm.send(\"four.exchange1\",\"aqweq\",message,date);\n    return msg;\n}\n\n\n/**\n*  \n*   同步处理方式如下：\n*   发送方\n*   TODO operations.waitForConfirms返回一直是true? 待处理\n*/\n\n@RequestMapping(\"/send4/{msg}\")\npublic String sendMessageOperateConfirm(@PathVariable(\"msg\") String msg) {\n    Message message = new Message(msg.getBytes(),new MessageProperties());\n    rabbitTemplateOperateConfirm.send(\"four.exchange1\",\"aqweq\",message);\n\n    rabbitTemplateOperateConfirm.invoke(new RabbitOperations.OperationsCallback<Object>() {\n        @Override\n        public Object doInRabbit(RabbitOperations operations) {\n//          operations.waitForConfirmsOrDie(100);\n            System.out.println(operations.waitForConfirms(100));\n            return null;\n        }\n    });\n    return msg;\n}\n\n```\n\n> 以上确认可互相配合\n\n- 发送消息前,绑定并保存msgId和message的关系\n- 当confirm或return回调时,根据ack类别等,分别处理. 例如return或者ack=false则说明有问题,报警, 如果ack=true则删除关系(因为return在confirm前,所以一条消息在return后又ack=true的情况也是按return处理)\n- 定时检查这个绑定关系列表,如果发现一些已经超时(自己设定的超时时间)未被处理(即未return和confirm),则手动处理这些消息.\n- 需要注意如果是自动重发的话,消费端需要做幂等或去重处理.\n\n\n\n#### 备用交换机\n\n- 定义一个备用交换机\n- 声明一个map key为\"alternate-exchange\" value为备用交换机的名称\n- 声明主交换机时添加参数map\n- 如果发送消息到主交换机失败则会转发到备用交换机\n\n```java\n\n// 定义备用交换机 一般为fanout类型 路由键一般为#\n@Bean\npublic Queue fanoutBakQueue(){\n    return new Queue(\"four_bak.queue\");\n}\n@Bean\npublic FanoutExchange fanoutBakExchange(){\n    return new FanoutExchange(\"four.exchange_bak\");\n}\n@Bean\npublic Binding fanoutBakBinding(){\n    return BindingBuilder.bind(fanoutBakQueue()).to(fanoutBakExchange());\n}\n\n// 定义主交换机 定义map\n@Bean\npublic DirectExchange directExchange(){\n    Map<String,Object> map = new HashMap<String,Object>(16);\n    map.put(\"alternate-exchange\",\"four.exchange_bak\");\n    return new DirectExchange(\"four.exchange\",false,false,map);\n}\n\n```\n\n#### 高可用队列\n\n> 集群情况使用\n\n#### 消息持久化\n\n> 可靠性最高\n\n\n#### 事务 事务高可用队列\n\n> 不使用 性能损耗严重\n\n\n\n\n\n\n\n","slug":"rabbitmq-03","published":1,"date":"2018-12-30T04:16:40.045Z","updated":"2019-01-05T15:20:40.944Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjskls631000r745bsrdoeluk","content":"<p>RabbitMq生产者消息确认</p>\n<h2 id=\"RabbitMq-生产者消息确认\"><a href=\"#RabbitMq-生产者消息确认\" class=\"headerlink\" title=\"RabbitMq 生产者消息确认\"></a>RabbitMq 生产者消息确认</h2><h3 id=\"生产者权衡\"><a href=\"#生产者权衡\" class=\"headerlink\" title=\"生产者权衡\"></a>生产者权衡</h3><blockquote>\n<p>快、低==========&gt; 慢、高</p>\n</blockquote>\n<ul>\n<li>无保障</li>\n<li>失败通知  参数mandatory 消息是否成功到达队列</li>\n<li>发送方确认模式  消息是否成功到达exchange 和失败通知结合使用</li>\n<li>备用交换机     定义个一个备用交换机 Map</li>\n<li>高可用队列</li>\n<li>事务          影响性能 2-10倍 强一致性</li>\n<li>事务+高可用</li>\n<li>持久化</li>\n</ul>\n<a id=\"more\"></a>\n<h4 id=\"失败通知-需要开启-PublisherReturns-true-mandatory-true\"><a href=\"#失败通知-需要开启-PublisherReturns-true-mandatory-true\" class=\"headerlink\" title=\"失败通知 需要开启 PublisherReturns=true mandatory=true\"></a>失败通知 需要开启 PublisherReturns=true mandatory=true</h4><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 初始化一个rabbitTemplateReturn 用来做失败通知 设置PublisherReturns=true</span></span><br><span class=\"line\"><span class=\"meta\">@Bean</span>(value = <span class=\"string\">\"rabbitTemplateReturn\"</span>)</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> RabbitTemplate <span class=\"title\">rabbitTemplateReturn</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    RabbitTemplate rabbitTemplate = <span class=\"keyword\">new</span> RabbitTemplate(connectionFactory());</span><br><span class=\"line\">    ((CachingConnectionFactory)rabbitTemplate.getConnectionFactory()).setPublisherReturns(<span class=\"keyword\">true</span>);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> rabbitTemplate;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 定义一个类实现RabbitTemplate.ReturnCallback 并且开启mandatory=true 指定ReturnCallback</span></span><br><span class=\"line\"><span class=\"meta\">@Component</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">RabbitReturnCallback</span> <span class=\"keyword\">implements</span> <span class=\"title\">RabbitTemplate</span>.<span class=\"title\">ReturnCallback</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Autowired</span></span><br><span class=\"line\">    <span class=\"meta\">@Qualifier</span>(<span class=\"string\">\"rabbitTemplateReturn\"</span>)</span><br><span class=\"line\">    <span class=\"keyword\">private</span> RabbitTemplate rabbitTemplate;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@PostConstruct</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">init</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">//指定 ReturnCallback</span></span><br><span class=\"line\">        rabbitTemplate.setReturnCallback(<span class=\"keyword\">this</span>);</span><br><span class=\"line\">        rabbitTemplate.setMandatory(<span class=\"keyword\">true</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">returnedMessage</span><span class=\"params\">(Message message, <span class=\"keyword\">int</span> i, String s, String s1, String s2)</span> </span>&#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"消息主体 message : \"</span>+message);</span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"消息主体 message : \"</span>+i);</span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"描述：\"</span>+s);</span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"消息使用的交换器 exchange : \"</span>+s1);</span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"消息使用的路由键 routing : \"</span>+s2);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 发送方 若没有成功路由 则回调returnedMessage方法</span></span><br><span class=\"line\"><span class=\"meta\">@RequestMapping</span>(<span class=\"string\">\"/send2/&#123;msg&#125;\"</span>)</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">sendMessageReturn</span><span class=\"params\">(@PathVariable(<span class=\"string\">\"msg\"</span>)</span> String msg) </span>&#123;</span><br><span class=\"line\">    log.info(<span class=\"string\">\"msg1\"</span>);</span><br><span class=\"line\">    Message message = <span class=\"keyword\">new</span> Message(msg.getBytes(),<span class=\"keyword\">new</span> MessageProperties());</span><br><span class=\"line\">    rabbitTemplateRerutn.send(<span class=\"string\">\"four.exchange\"</span>,<span class=\"string\">\"aqweq\"</span>,message);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> msg;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"发送方确认模式-需要开启-PublisherReturns-true-mandatory-true\"><a href=\"#发送方确认模式-需要开启-PublisherReturns-true-mandatory-true\" class=\"headerlink\" title=\"发送方确认模式 需要开启 PublisherReturns=true mandatory=true\"></a>发送方确认模式 需要开启 PublisherReturns=true mandatory=true</h4><pre><code>确认的三种方式:  \nchannel.waitForConfirms()普通发送方确认模式；消息到达交换器，就会返回true  \nchannel.waitForConfirmsOrDie()批量确认模式；使用同步方式等所有的消息发送之后才会执行后面代码，只要有一个消息未到达交换器就会抛出IOException异常  \nchannel.addConfirmListener()异步监听发送方确认模式  \n</code></pre><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 初始化一个rabbitTemplateConfirm 用来做失败通知 设置PublisherReturns=true</span></span><br><span class=\"line\"><span class=\"meta\">@Bean</span>(value = <span class=\"string\">\"rabbitTemplateConfirm\"</span>)</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> RabbitTemplate <span class=\"title\">rabbitTemplateConfirm</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    RabbitTemplate rabbitTemplate = <span class=\"keyword\">new</span> RabbitTemplate(connectionFactory());</span><br><span class=\"line\">    ((CachingConnectionFactory)rabbitTemplate.getConnectionFactory()).setPublisherConfirms(<span class=\"keyword\">true</span>);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> rabbitTemplate;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">*\t定义一个类实现RabbitTemplate.ReturnCallback 并且开启mandatory=true 指定ConfirmCallback</span></span><br><span class=\"line\"><span class=\"comment\">*\tack 消息是否成功到达exchange 若没有正确路由到队列 ack返回也是true 所以和失败通知结合使用 </span></span><br><span class=\"line\"><span class=\"comment\">*   这是异步处理的方式</span></span><br><span class=\"line\"><span class=\"comment\">*/</span></span><br><span class=\"line\"><span class=\"meta\">@Component</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">RabbitConfirmCallback</span> <span class=\"keyword\">implements</span> <span class=\"title\">RabbitTemplate</span>.<span class=\"title\">ConfirmCallback</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Autowired</span></span><br><span class=\"line\">    <span class=\"meta\">@Qualifier</span>(<span class=\"string\">\"rabbitTemplateConfirm\"</span>)</span><br><span class=\"line\">    <span class=\"keyword\">private</span> RabbitTemplate rabbitTemplate;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@PostConstruct</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">init</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">//指定 ConfirmCallback</span></span><br><span class=\"line\">        rabbitTemplate.setConfirmCallback(<span class=\"keyword\">this</span>);</span><br><span class=\"line\">        rabbitTemplate.setMandatory(<span class=\"keyword\">true</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">confirm</span><span class=\"params\">(CorrelationData correlationData, <span class=\"keyword\">boolean</span> ack, String cause)</span></span>&#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"消息唯一标识：\"</span>+correlationData);</span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"确认结果：\"</span>+ack);</span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"失败原因：\"</span>+cause);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 发送方 </span></span><br><span class=\"line\"><span class=\"meta\">@RequestMapping</span>(<span class=\"string\">\"/send3/&#123;msg&#125;\"</span>)</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">sendMessageConfirm</span><span class=\"params\">(@PathVariable(<span class=\"string\">\"msg\"</span>)</span> String msg) </span>&#123;</span><br><span class=\"line\">    String msgId = UUID.randomUUID().toString();</span><br><span class=\"line\">\tCorrelationData date = <span class=\"keyword\">new</span> CorrelationData(msgId);</span><br><span class=\"line\">\t<span class=\"comment\">// message 可以设置一些头信息 msgId </span></span><br><span class=\"line\">\tMessage message = MessageBuilder.withBody(<span class=\"string\">\"测试\"</span>.toString().getBytes())</span><br><span class=\"line\">                .setContentType(MessageProperties.CONTENT_TYPE_TEXT_PLAIN)</span><br><span class=\"line\">                .setCorrelationId(msgId).build();</span><br><span class=\"line\">    rabbitTemplateConfirm.send(<span class=\"string\">\"four.exchange1\"</span>,<span class=\"string\">\"aqweq\"</span>,message,date);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> msg;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">*  </span></span><br><span class=\"line\"><span class=\"comment\">*   同步处理方式如下：</span></span><br><span class=\"line\"><span class=\"comment\">*   发送方</span></span><br><span class=\"line\"><span class=\"comment\">*   TODO operations.waitForConfirms返回一直是true? 待处理</span></span><br><span class=\"line\"><span class=\"comment\">*/</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@RequestMapping</span>(<span class=\"string\">\"/send4/&#123;msg&#125;\"</span>)</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">sendMessageOperateConfirm</span><span class=\"params\">(@PathVariable(<span class=\"string\">\"msg\"</span>)</span> String msg) </span>&#123;</span><br><span class=\"line\">    Message message = <span class=\"keyword\">new</span> Message(msg.getBytes(),<span class=\"keyword\">new</span> MessageProperties());</span><br><span class=\"line\">    rabbitTemplateOperateConfirm.send(<span class=\"string\">\"four.exchange1\"</span>,<span class=\"string\">\"aqweq\"</span>,message);</span><br><span class=\"line\"></span><br><span class=\"line\">    rabbitTemplateOperateConfirm.invoke(<span class=\"keyword\">new</span> RabbitOperations.OperationsCallback&lt;Object&gt;() &#123;</span><br><span class=\"line\">        <span class=\"meta\">@Override</span></span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> Object <span class=\"title\">doInRabbit</span><span class=\"params\">(RabbitOperations operations)</span> </span>&#123;</span><br><span class=\"line\"><span class=\"comment\">//          operations.waitForConfirmsOrDie(100);</span></span><br><span class=\"line\">            System.out.println(operations.waitForConfirms(<span class=\"number\">100</span>));</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">null</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> msg;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>以上确认可互相配合</p>\n</blockquote>\n<ul>\n<li>发送消息前,绑定并保存msgId和message的关系</li>\n<li>当confirm或return回调时,根据ack类别等,分别处理. 例如return或者ack=false则说明有问题,报警, 如果ack=true则删除关系(因为return在confirm前,所以一条消息在return后又ack=true的情况也是按return处理)</li>\n<li>定时检查这个绑定关系列表,如果发现一些已经超时(自己设定的超时时间)未被处理(即未return和confirm),则手动处理这些消息.</li>\n<li>需要注意如果是自动重发的话,消费端需要做幂等或去重处理.</li>\n</ul>\n<h4 id=\"备用交换机\"><a href=\"#备用交换机\" class=\"headerlink\" title=\"备用交换机\"></a>备用交换机</h4><ul>\n<li>定义一个备用交换机</li>\n<li>声明一个map key为”alternate-exchange” value为备用交换机的名称</li>\n<li>声明主交换机时添加参数map</li>\n<li>如果发送消息到主交换机失败则会转发到备用交换机</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 定义备用交换机 一般为fanout类型 路由键一般为#</span></span><br><span class=\"line\"><span class=\"meta\">@Bean</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> Queue <span class=\"title\">fanoutBakQueue</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> Queue(<span class=\"string\">\"four_bak.queue\"</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"meta\">@Bean</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> FanoutExchange <span class=\"title\">fanoutBakExchange</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> FanoutExchange(<span class=\"string\">\"four.exchange_bak\"</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"meta\">@Bean</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> Binding <span class=\"title\">fanoutBakBinding</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> BindingBuilder.bind(fanoutBakQueue()).to(fanoutBakExchange());</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 定义主交换机 定义map</span></span><br><span class=\"line\"><span class=\"meta\">@Bean</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> DirectExchange <span class=\"title\">directExchange</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">    Map&lt;String,Object&gt; map = <span class=\"keyword\">new</span> HashMap&lt;String,Object&gt;(<span class=\"number\">16</span>);</span><br><span class=\"line\">    map.put(<span class=\"string\">\"alternate-exchange\"</span>,<span class=\"string\">\"four.exchange_bak\"</span>);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> DirectExchange(<span class=\"string\">\"four.exchange\"</span>,<span class=\"keyword\">false</span>,<span class=\"keyword\">false</span>,map);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"高可用队列\"><a href=\"#高可用队列\" class=\"headerlink\" title=\"高可用队列\"></a>高可用队列</h4><blockquote>\n<p>集群情况使用</p>\n</blockquote>\n<h4 id=\"消息持久化\"><a href=\"#消息持久化\" class=\"headerlink\" title=\"消息持久化\"></a>消息持久化</h4><blockquote>\n<p>可靠性最高</p>\n</blockquote>\n<h4 id=\"事务-事务高可用队列\"><a href=\"#事务-事务高可用队列\" class=\"headerlink\" title=\"事务 事务高可用队列\"></a>事务 事务高可用队列</h4><blockquote>\n<p>不使用 性能损耗严重</p>\n</blockquote>\n","site":{"data":{}},"excerpt":"<p>RabbitMq生产者消息确认</p>\n<h2 id=\"RabbitMq-生产者消息确认\"><a href=\"#RabbitMq-生产者消息确认\" class=\"headerlink\" title=\"RabbitMq 生产者消息确认\"></a>RabbitMq 生产者消息确认</h2><h3 id=\"生产者权衡\"><a href=\"#生产者权衡\" class=\"headerlink\" title=\"生产者权衡\"></a>生产者权衡</h3><blockquote>\n<p>快、低==========&gt; 慢、高</p>\n</blockquote>\n<ul>\n<li>无保障</li>\n<li>失败通知  参数mandatory 消息是否成功到达队列</li>\n<li>发送方确认模式  消息是否成功到达exchange 和失败通知结合使用</li>\n<li>备用交换机     定义个一个备用交换机 Map</li>\n<li>高可用队列</li>\n<li>事务          影响性能 2-10倍 强一致性</li>\n<li>事务+高可用</li>\n<li>持久化</li>\n</ul>","more":"<h4 id=\"失败通知-需要开启-PublisherReturns-true-mandatory-true\"><a href=\"#失败通知-需要开启-PublisherReturns-true-mandatory-true\" class=\"headerlink\" title=\"失败通知 需要开启 PublisherReturns=true mandatory=true\"></a>失败通知 需要开启 PublisherReturns=true mandatory=true</h4><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 初始化一个rabbitTemplateReturn 用来做失败通知 设置PublisherReturns=true</span></span><br><span class=\"line\"><span class=\"meta\">@Bean</span>(value = <span class=\"string\">\"rabbitTemplateReturn\"</span>)</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> RabbitTemplate <span class=\"title\">rabbitTemplateReturn</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    RabbitTemplate rabbitTemplate = <span class=\"keyword\">new</span> RabbitTemplate(connectionFactory());</span><br><span class=\"line\">    ((CachingConnectionFactory)rabbitTemplate.getConnectionFactory()).setPublisherReturns(<span class=\"keyword\">true</span>);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> rabbitTemplate;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 定义一个类实现RabbitTemplate.ReturnCallback 并且开启mandatory=true 指定ReturnCallback</span></span><br><span class=\"line\"><span class=\"meta\">@Component</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">RabbitReturnCallback</span> <span class=\"keyword\">implements</span> <span class=\"title\">RabbitTemplate</span>.<span class=\"title\">ReturnCallback</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Autowired</span></span><br><span class=\"line\">    <span class=\"meta\">@Qualifier</span>(<span class=\"string\">\"rabbitTemplateReturn\"</span>)</span><br><span class=\"line\">    <span class=\"keyword\">private</span> RabbitTemplate rabbitTemplate;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@PostConstruct</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">init</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">//指定 ReturnCallback</span></span><br><span class=\"line\">        rabbitTemplate.setReturnCallback(<span class=\"keyword\">this</span>);</span><br><span class=\"line\">        rabbitTemplate.setMandatory(<span class=\"keyword\">true</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">returnedMessage</span><span class=\"params\">(Message message, <span class=\"keyword\">int</span> i, String s, String s1, String s2)</span> </span>&#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"消息主体 message : \"</span>+message);</span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"消息主体 message : \"</span>+i);</span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"描述：\"</span>+s);</span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"消息使用的交换器 exchange : \"</span>+s1);</span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"消息使用的路由键 routing : \"</span>+s2);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 发送方 若没有成功路由 则回调returnedMessage方法</span></span><br><span class=\"line\"><span class=\"meta\">@RequestMapping</span>(<span class=\"string\">\"/send2/&#123;msg&#125;\"</span>)</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">sendMessageReturn</span><span class=\"params\">(@PathVariable(<span class=\"string\">\"msg\"</span>)</span> String msg) </span>&#123;</span><br><span class=\"line\">    log.info(<span class=\"string\">\"msg1\"</span>);</span><br><span class=\"line\">    Message message = <span class=\"keyword\">new</span> Message(msg.getBytes(),<span class=\"keyword\">new</span> MessageProperties());</span><br><span class=\"line\">    rabbitTemplateRerutn.send(<span class=\"string\">\"four.exchange\"</span>,<span class=\"string\">\"aqweq\"</span>,message);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> msg;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"发送方确认模式-需要开启-PublisherReturns-true-mandatory-true\"><a href=\"#发送方确认模式-需要开启-PublisherReturns-true-mandatory-true\" class=\"headerlink\" title=\"发送方确认模式 需要开启 PublisherReturns=true mandatory=true\"></a>发送方确认模式 需要开启 PublisherReturns=true mandatory=true</h4><pre><code>确认的三种方式:  \nchannel.waitForConfirms()普通发送方确认模式；消息到达交换器，就会返回true  \nchannel.waitForConfirmsOrDie()批量确认模式；使用同步方式等所有的消息发送之后才会执行后面代码，只要有一个消息未到达交换器就会抛出IOException异常  \nchannel.addConfirmListener()异步监听发送方确认模式  \n</code></pre><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 初始化一个rabbitTemplateConfirm 用来做失败通知 设置PublisherReturns=true</span></span><br><span class=\"line\"><span class=\"meta\">@Bean</span>(value = <span class=\"string\">\"rabbitTemplateConfirm\"</span>)</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> RabbitTemplate <span class=\"title\">rabbitTemplateConfirm</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    RabbitTemplate rabbitTemplate = <span class=\"keyword\">new</span> RabbitTemplate(connectionFactory());</span><br><span class=\"line\">    ((CachingConnectionFactory)rabbitTemplate.getConnectionFactory()).setPublisherConfirms(<span class=\"keyword\">true</span>);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> rabbitTemplate;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">*\t定义一个类实现RabbitTemplate.ReturnCallback 并且开启mandatory=true 指定ConfirmCallback</span></span><br><span class=\"line\"><span class=\"comment\">*\tack 消息是否成功到达exchange 若没有正确路由到队列 ack返回也是true 所以和失败通知结合使用 </span></span><br><span class=\"line\"><span class=\"comment\">*   这是异步处理的方式</span></span><br><span class=\"line\"><span class=\"comment\">*/</span></span><br><span class=\"line\"><span class=\"meta\">@Component</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">RabbitConfirmCallback</span> <span class=\"keyword\">implements</span> <span class=\"title\">RabbitTemplate</span>.<span class=\"title\">ConfirmCallback</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Autowired</span></span><br><span class=\"line\">    <span class=\"meta\">@Qualifier</span>(<span class=\"string\">\"rabbitTemplateConfirm\"</span>)</span><br><span class=\"line\">    <span class=\"keyword\">private</span> RabbitTemplate rabbitTemplate;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@PostConstruct</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">init</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">//指定 ConfirmCallback</span></span><br><span class=\"line\">        rabbitTemplate.setConfirmCallback(<span class=\"keyword\">this</span>);</span><br><span class=\"line\">        rabbitTemplate.setMandatory(<span class=\"keyword\">true</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">confirm</span><span class=\"params\">(CorrelationData correlationData, <span class=\"keyword\">boolean</span> ack, String cause)</span></span>&#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"消息唯一标识：\"</span>+correlationData);</span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"确认结果：\"</span>+ack);</span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"失败原因：\"</span>+cause);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 发送方 </span></span><br><span class=\"line\"><span class=\"meta\">@RequestMapping</span>(<span class=\"string\">\"/send3/&#123;msg&#125;\"</span>)</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">sendMessageConfirm</span><span class=\"params\">(@PathVariable(<span class=\"string\">\"msg\"</span>)</span> String msg) </span>&#123;</span><br><span class=\"line\">    String msgId = UUID.randomUUID().toString();</span><br><span class=\"line\">\tCorrelationData date = <span class=\"keyword\">new</span> CorrelationData(msgId);</span><br><span class=\"line\">\t<span class=\"comment\">// message 可以设置一些头信息 msgId </span></span><br><span class=\"line\">\tMessage message = MessageBuilder.withBody(<span class=\"string\">\"测试\"</span>.toString().getBytes())</span><br><span class=\"line\">                .setContentType(MessageProperties.CONTENT_TYPE_TEXT_PLAIN)</span><br><span class=\"line\">                .setCorrelationId(msgId).build();</span><br><span class=\"line\">    rabbitTemplateConfirm.send(<span class=\"string\">\"four.exchange1\"</span>,<span class=\"string\">\"aqweq\"</span>,message,date);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> msg;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">*  </span></span><br><span class=\"line\"><span class=\"comment\">*   同步处理方式如下：</span></span><br><span class=\"line\"><span class=\"comment\">*   发送方</span></span><br><span class=\"line\"><span class=\"comment\">*   TODO operations.waitForConfirms返回一直是true? 待处理</span></span><br><span class=\"line\"><span class=\"comment\">*/</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@RequestMapping</span>(<span class=\"string\">\"/send4/&#123;msg&#125;\"</span>)</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">sendMessageOperateConfirm</span><span class=\"params\">(@PathVariable(<span class=\"string\">\"msg\"</span>)</span> String msg) </span>&#123;</span><br><span class=\"line\">    Message message = <span class=\"keyword\">new</span> Message(msg.getBytes(),<span class=\"keyword\">new</span> MessageProperties());</span><br><span class=\"line\">    rabbitTemplateOperateConfirm.send(<span class=\"string\">\"four.exchange1\"</span>,<span class=\"string\">\"aqweq\"</span>,message);</span><br><span class=\"line\"></span><br><span class=\"line\">    rabbitTemplateOperateConfirm.invoke(<span class=\"keyword\">new</span> RabbitOperations.OperationsCallback&lt;Object&gt;() &#123;</span><br><span class=\"line\">        <span class=\"meta\">@Override</span></span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> Object <span class=\"title\">doInRabbit</span><span class=\"params\">(RabbitOperations operations)</span> </span>&#123;</span><br><span class=\"line\"><span class=\"comment\">//          operations.waitForConfirmsOrDie(100);</span></span><br><span class=\"line\">            System.out.println(operations.waitForConfirms(<span class=\"number\">100</span>));</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">null</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> msg;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>以上确认可互相配合</p>\n</blockquote>\n<ul>\n<li>发送消息前,绑定并保存msgId和message的关系</li>\n<li>当confirm或return回调时,根据ack类别等,分别处理. 例如return或者ack=false则说明有问题,报警, 如果ack=true则删除关系(因为return在confirm前,所以一条消息在return后又ack=true的情况也是按return处理)</li>\n<li>定时检查这个绑定关系列表,如果发现一些已经超时(自己设定的超时时间)未被处理(即未return和confirm),则手动处理这些消息.</li>\n<li>需要注意如果是自动重发的话,消费端需要做幂等或去重处理.</li>\n</ul>\n<h4 id=\"备用交换机\"><a href=\"#备用交换机\" class=\"headerlink\" title=\"备用交换机\"></a>备用交换机</h4><ul>\n<li>定义一个备用交换机</li>\n<li>声明一个map key为”alternate-exchange” value为备用交换机的名称</li>\n<li>声明主交换机时添加参数map</li>\n<li>如果发送消息到主交换机失败则会转发到备用交换机</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 定义备用交换机 一般为fanout类型 路由键一般为#</span></span><br><span class=\"line\"><span class=\"meta\">@Bean</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> Queue <span class=\"title\">fanoutBakQueue</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> Queue(<span class=\"string\">\"four_bak.queue\"</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"meta\">@Bean</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> FanoutExchange <span class=\"title\">fanoutBakExchange</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> FanoutExchange(<span class=\"string\">\"four.exchange_bak\"</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"meta\">@Bean</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> Binding <span class=\"title\">fanoutBakBinding</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> BindingBuilder.bind(fanoutBakQueue()).to(fanoutBakExchange());</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 定义主交换机 定义map</span></span><br><span class=\"line\"><span class=\"meta\">@Bean</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> DirectExchange <span class=\"title\">directExchange</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">    Map&lt;String,Object&gt; map = <span class=\"keyword\">new</span> HashMap&lt;String,Object&gt;(<span class=\"number\">16</span>);</span><br><span class=\"line\">    map.put(<span class=\"string\">\"alternate-exchange\"</span>,<span class=\"string\">\"four.exchange_bak\"</span>);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> DirectExchange(<span class=\"string\">\"four.exchange\"</span>,<span class=\"keyword\">false</span>,<span class=\"keyword\">false</span>,map);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"高可用队列\"><a href=\"#高可用队列\" class=\"headerlink\" title=\"高可用队列\"></a>高可用队列</h4><blockquote>\n<p>集群情况使用</p>\n</blockquote>\n<h4 id=\"消息持久化\"><a href=\"#消息持久化\" class=\"headerlink\" title=\"消息持久化\"></a>消息持久化</h4><blockquote>\n<p>可靠性最高</p>\n</blockquote>\n<h4 id=\"事务-事务高可用队列\"><a href=\"#事务-事务高可用队列\" class=\"headerlink\" title=\"事务 事务高可用队列\"></a>事务 事务高可用队列</h4><blockquote>\n<p>不使用 性能损耗严重</p>\n</blockquote>"},{"title":"RabbitMq - 消费者消息确认","_content":"\nRabbitMq消费者消息确认\n\n## RabbitMq 消费者消息确认\n\n### 消费者权衡\n\n- 获取消息方式\n    - 拉取get\n    - 自动推送\n- 消息应答方式\n    - 自动确认\n    - 手动确认\n- Qos预取模式\n- 可靠性\n    - Qos 批量2500事务(高)\n    - 拉取事务(低)\n- 性能 \n    - 总量2500Qos(高)\n    - 少量Qos 批量2500事务\n    - 事务\n    - 拉取(低)\n\n<!-- more -->\n\n\n#### 获取消息方式\n\n##### 拉取get\n\n> channel.basicGet(String queueName, boolean autoAck) 效率低不常用\n\n##### 自动推送\n\n> springBoot监听队列注解:@RabbitListener(queues = \"queueName\"),处理方法注解:@RabbitHandler,默认是自动确认。(注解情况下手动确认?)\n\n#### 消息应答方式、Qos模式、批量确认、单条确认\n\n```java\n\n@Bean\npublic SimpleMessageListenerContainer messageListenerContainer(){\n    SimpleMessageListenerContainer messageListenerContainer = new SimpleMessageListenerContainer(connectionFactory());\n    // 开启Qos\n    //messageListenerContainer.setPrefetchCount(2500);\n    messageListenerContainer.setQueues(topicQueueBak());\n    // 开启手动确认 MANUAL  \n    messageListenerContainer.setAcknowledgeMode(AcknowledgeMode.MANUAL);\n    messageListenerContainer.setMessageListener(firstConsumer);\n    return messageListenerContainer;\n}\n\n// 实现手动确认 实现ChannelAwareMessageListener接口，basicAck方法为成功确认\n\n@Component\npublic class FirstConsumer implements ChannelAwareMessageListener {\n    @Override\n    public void onMessage(Message message, Channel channel) throws Exception {\n        try {\n            String msg = new String(message.getBody());\n            System.out.println(\"ack>>>>>>>接收到消息:\"+msg);\n            try {\n                channel.basicAck(message.getMessageProperties().getDeliveryTag(),\n                        false);\n                System.out.println(\"ack>>>>>>消息已消费\");\n            } catch (Exception e) {\n                // 第一false 是否批量拒绝 第二个是否重新放入队列\n                channel.basicNack(message.getMessageProperties().getDeliveryTag(),\n                        false,false);\n                System.out.println(\"UserReceiver>>>>>>拒绝消息，要求Mq重新派发\");\n                throw e;\n            }\n\n        } catch (Exception e) {\n            System.out.println(e.getMessage());\n        }\n    }\n}\n```\n\n#### 消息的拒绝\n\n> Nack 可以批量拒绝 第一false是否批量拒绝 第二个是否重新放入队列 重新放入队列容易产生死循环  \n\n    channel.basicNack(message.getMessageProperties().getDeliveryTag(),\n                        false,false);\n\n> Reject 单条拒绝  \n\n    channel.basicReject(message.getMessageProperties().getDeliveryTag(),false);\n\n#### 死信交换器DLX(消息生产者的备用交换器类似)\n\n> 将拒绝的消息可以投放至自定义的队列处理,重新定义一个队列绑定主交换机,设置参数\"x-dead-letter-exchange\",也可以添加死信路由\"x-dead-letter-routing-key\",这样不同业务拒绝的消息可以投递至不同的队列。\n\n```java\n\n// 死信交换器\n@Bean\npublic Queue topicQueueDlxBak(){\n    Map<String,Object> map = new HashMap<String,Object>(16);\n    // 死信交换器\n    map.put(\"x-dead-letter-exchange\",\"dlx.exchange\");\n    return new Queue(\"dlx.queue\",false,false,false,map);\n}\n@Bean\npublic TopicExchange topicExchangeDlxBak(){\n    return new TopicExchange(\"dlx.exchange\");\n}\n@Bean\npublic Binding topicBindingDlxBak(){\n    return BindingBuilder.bind(topicQueueDlxBak()).to(topicExchangeBak()).with(\"#\");\n}\n\n// 死信交换器 + 死信路由\n@Bean\npublic Queue topicQueueDlxKeyBak(){\n    Map<String,Object> map = new HashMap<String,Object>(16);\n    map.put(\"x-dead-letter-exchange\",\"dlx.key.exchange\");\n    map.put(\"x-dead-letter-routing-key\",\"dlx.key.bind\");\n    return new Queue(\"dlx.key.queue\",false,false,false,map);\n}\n@Bean\npublic TopicExchange topicExchangeDlxKeyBak(){\n    return new TopicExchange(\"dlx.key.exchange\");\n}\n@Bean\npublic Binding topicBindingDlxKeyBak(){\n    return BindingBuilder.bind(topicQueueDlxKeyBak()).to(topicExchangeBak()).with(\"dlx.key.bind\");\n}\n```\n\n\n\n","source":"_posts/rabbitmq-04.md","raw":"---\ntitle: RabbitMq - 消费者消息确认\ntags:\n  - RabbitMq\n---\n\nRabbitMq消费者消息确认\n\n## RabbitMq 消费者消息确认\n\n### 消费者权衡\n\n- 获取消息方式\n    - 拉取get\n    - 自动推送\n- 消息应答方式\n    - 自动确认\n    - 手动确认\n- Qos预取模式\n- 可靠性\n    - Qos 批量2500事务(高)\n    - 拉取事务(低)\n- 性能 \n    - 总量2500Qos(高)\n    - 少量Qos 批量2500事务\n    - 事务\n    - 拉取(低)\n\n<!-- more -->\n\n\n#### 获取消息方式\n\n##### 拉取get\n\n> channel.basicGet(String queueName, boolean autoAck) 效率低不常用\n\n##### 自动推送\n\n> springBoot监听队列注解:@RabbitListener(queues = \"queueName\"),处理方法注解:@RabbitHandler,默认是自动确认。(注解情况下手动确认?)\n\n#### 消息应答方式、Qos模式、批量确认、单条确认\n\n```java\n\n@Bean\npublic SimpleMessageListenerContainer messageListenerContainer(){\n    SimpleMessageListenerContainer messageListenerContainer = new SimpleMessageListenerContainer(connectionFactory());\n    // 开启Qos\n    //messageListenerContainer.setPrefetchCount(2500);\n    messageListenerContainer.setQueues(topicQueueBak());\n    // 开启手动确认 MANUAL  \n    messageListenerContainer.setAcknowledgeMode(AcknowledgeMode.MANUAL);\n    messageListenerContainer.setMessageListener(firstConsumer);\n    return messageListenerContainer;\n}\n\n// 实现手动确认 实现ChannelAwareMessageListener接口，basicAck方法为成功确认\n\n@Component\npublic class FirstConsumer implements ChannelAwareMessageListener {\n    @Override\n    public void onMessage(Message message, Channel channel) throws Exception {\n        try {\n            String msg = new String(message.getBody());\n            System.out.println(\"ack>>>>>>>接收到消息:\"+msg);\n            try {\n                channel.basicAck(message.getMessageProperties().getDeliveryTag(),\n                        false);\n                System.out.println(\"ack>>>>>>消息已消费\");\n            } catch (Exception e) {\n                // 第一false 是否批量拒绝 第二个是否重新放入队列\n                channel.basicNack(message.getMessageProperties().getDeliveryTag(),\n                        false,false);\n                System.out.println(\"UserReceiver>>>>>>拒绝消息，要求Mq重新派发\");\n                throw e;\n            }\n\n        } catch (Exception e) {\n            System.out.println(e.getMessage());\n        }\n    }\n}\n```\n\n#### 消息的拒绝\n\n> Nack 可以批量拒绝 第一false是否批量拒绝 第二个是否重新放入队列 重新放入队列容易产生死循环  \n\n    channel.basicNack(message.getMessageProperties().getDeliveryTag(),\n                        false,false);\n\n> Reject 单条拒绝  \n\n    channel.basicReject(message.getMessageProperties().getDeliveryTag(),false);\n\n#### 死信交换器DLX(消息生产者的备用交换器类似)\n\n> 将拒绝的消息可以投放至自定义的队列处理,重新定义一个队列绑定主交换机,设置参数\"x-dead-letter-exchange\",也可以添加死信路由\"x-dead-letter-routing-key\",这样不同业务拒绝的消息可以投递至不同的队列。\n\n```java\n\n// 死信交换器\n@Bean\npublic Queue topicQueueDlxBak(){\n    Map<String,Object> map = new HashMap<String,Object>(16);\n    // 死信交换器\n    map.put(\"x-dead-letter-exchange\",\"dlx.exchange\");\n    return new Queue(\"dlx.queue\",false,false,false,map);\n}\n@Bean\npublic TopicExchange topicExchangeDlxBak(){\n    return new TopicExchange(\"dlx.exchange\");\n}\n@Bean\npublic Binding topicBindingDlxBak(){\n    return BindingBuilder.bind(topicQueueDlxBak()).to(topicExchangeBak()).with(\"#\");\n}\n\n// 死信交换器 + 死信路由\n@Bean\npublic Queue topicQueueDlxKeyBak(){\n    Map<String,Object> map = new HashMap<String,Object>(16);\n    map.put(\"x-dead-letter-exchange\",\"dlx.key.exchange\");\n    map.put(\"x-dead-letter-routing-key\",\"dlx.key.bind\");\n    return new Queue(\"dlx.key.queue\",false,false,false,map);\n}\n@Bean\npublic TopicExchange topicExchangeDlxKeyBak(){\n    return new TopicExchange(\"dlx.key.exchange\");\n}\n@Bean\npublic Binding topicBindingDlxKeyBak(){\n    return BindingBuilder.bind(topicQueueDlxKeyBak()).to(topicExchangeBak()).with(\"dlx.key.bind\");\n}\n```\n\n\n\n","slug":"rabbitmq-04","published":1,"date":"2019-01-05T15:19:43.929Z","updated":"2019-01-06T16:19:10.132Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjskls632000t745bajawks4h","content":"<p>RabbitMq消费者消息确认</p>\n<h2 id=\"RabbitMq-消费者消息确认\"><a href=\"#RabbitMq-消费者消息确认\" class=\"headerlink\" title=\"RabbitMq 消费者消息确认\"></a>RabbitMq 消费者消息确认</h2><h3 id=\"消费者权衡\"><a href=\"#消费者权衡\" class=\"headerlink\" title=\"消费者权衡\"></a>消费者权衡</h3><ul>\n<li>获取消息方式<ul>\n<li>拉取get</li>\n<li>自动推送</li>\n</ul>\n</li>\n<li>消息应答方式<ul>\n<li>自动确认</li>\n<li>手动确认</li>\n</ul>\n</li>\n<li>Qos预取模式</li>\n<li>可靠性<ul>\n<li>Qos 批量2500事务(高)</li>\n<li>拉取事务(低)</li>\n</ul>\n</li>\n<li>性能 <ul>\n<li>总量2500Qos(高)</li>\n<li>少量Qos 批量2500事务</li>\n<li>事务</li>\n<li>拉取(低)</li>\n</ul>\n</li>\n</ul>\n<a id=\"more\"></a>\n<h4 id=\"获取消息方式\"><a href=\"#获取消息方式\" class=\"headerlink\" title=\"获取消息方式\"></a>获取消息方式</h4><h5 id=\"拉取get\"><a href=\"#拉取get\" class=\"headerlink\" title=\"拉取get\"></a>拉取get</h5><blockquote>\n<p>channel.basicGet(String queueName, boolean autoAck) 效率低不常用</p>\n</blockquote>\n<h5 id=\"自动推送\"><a href=\"#自动推送\" class=\"headerlink\" title=\"自动推送\"></a>自动推送</h5><blockquote>\n<p>springBoot监听队列注解:@RabbitListener(queues = “queueName”),处理方法注解:@RabbitHandler,默认是自动确认。(注解情况下手动确认?)</p>\n</blockquote>\n<h4 id=\"消息应答方式、Qos模式、批量确认、单条确认\"><a href=\"#消息应答方式、Qos模式、批量确认、单条确认\" class=\"headerlink\" title=\"消息应答方式、Qos模式、批量确认、单条确认\"></a>消息应答方式、Qos模式、批量确认、单条确认</h4><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@Bean</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> SimpleMessageListenerContainer <span class=\"title\">messageListenerContainer</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">    SimpleMessageListenerContainer messageListenerContainer = <span class=\"keyword\">new</span> SimpleMessageListenerContainer(connectionFactory());</span><br><span class=\"line\">    <span class=\"comment\">// 开启Qos</span></span><br><span class=\"line\">    <span class=\"comment\">//messageListenerContainer.setPrefetchCount(2500);</span></span><br><span class=\"line\">    messageListenerContainer.setQueues(topicQueueBak());</span><br><span class=\"line\">    <span class=\"comment\">// 开启手动确认 MANUAL  </span></span><br><span class=\"line\">    messageListenerContainer.setAcknowledgeMode(AcknowledgeMode.MANUAL);</span><br><span class=\"line\">    messageListenerContainer.setMessageListener(firstConsumer);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> messageListenerContainer;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 实现手动确认 实现ChannelAwareMessageListener接口，basicAck方法为成功确认</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@Component</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">FirstConsumer</span> <span class=\"keyword\">implements</span> <span class=\"title\">ChannelAwareMessageListener</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onMessage</span><span class=\"params\">(Message message, Channel channel)</span> <span class=\"keyword\">throws</span> Exception </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">            String msg = <span class=\"keyword\">new</span> String(message.getBody());</span><br><span class=\"line\">            System.out.println(<span class=\"string\">\"ack&gt;&gt;&gt;&gt;&gt;&gt;&gt;接收到消息:\"</span>+msg);</span><br><span class=\"line\">            <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">                channel.basicAck(message.getMessageProperties().getDeliveryTag(),</span><br><span class=\"line\">                        <span class=\"keyword\">false</span>);</span><br><span class=\"line\">                System.out.println(<span class=\"string\">\"ack&gt;&gt;&gt;&gt;&gt;&gt;消息已消费\"</span>);</span><br><span class=\"line\">            &#125; <span class=\"keyword\">catch</span> (Exception e) &#123;</span><br><span class=\"line\">                <span class=\"comment\">// 第一false 是否批量拒绝 第二个是否重新放入队列</span></span><br><span class=\"line\">                channel.basicNack(message.getMessageProperties().getDeliveryTag(),</span><br><span class=\"line\">                        <span class=\"keyword\">false</span>,<span class=\"keyword\">false</span>);</span><br><span class=\"line\">                System.out.println(<span class=\"string\">\"UserReceiver&gt;&gt;&gt;&gt;&gt;&gt;拒绝消息，要求Mq重新派发\"</span>);</span><br><span class=\"line\">                <span class=\"keyword\">throw</span> e;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        &#125; <span class=\"keyword\">catch</span> (Exception e) &#123;</span><br><span class=\"line\">            System.out.println(e.getMessage());</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"消息的拒绝\"><a href=\"#消息的拒绝\" class=\"headerlink\" title=\"消息的拒绝\"></a>消息的拒绝</h4><blockquote>\n<p>Nack 可以批量拒绝 第一false是否批量拒绝 第二个是否重新放入队列 重新放入队列容易产生死循环  </p>\n</blockquote>\n<pre><code>channel.basicNack(message.getMessageProperties().getDeliveryTag(),\n                    false,false);\n</code></pre><blockquote>\n<p>Reject 单条拒绝  </p>\n</blockquote>\n<pre><code>channel.basicReject(message.getMessageProperties().getDeliveryTag(),false);\n</code></pre><h4 id=\"死信交换器DLX-消息生产者的备用交换器类似\"><a href=\"#死信交换器DLX-消息生产者的备用交换器类似\" class=\"headerlink\" title=\"死信交换器DLX(消息生产者的备用交换器类似)\"></a>死信交换器DLX(消息生产者的备用交换器类似)</h4><blockquote>\n<p>将拒绝的消息可以投放至自定义的队列处理,重新定义一个队列绑定主交换机,设置参数”x-dead-letter-exchange”,也可以添加死信路由”x-dead-letter-routing-key”,这样不同业务拒绝的消息可以投递至不同的队列。</p>\n</blockquote>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 死信交换器</span></span><br><span class=\"line\"><span class=\"meta\">@Bean</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> Queue <span class=\"title\">topicQueueDlxBak</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">    Map&lt;String,Object&gt; map = <span class=\"keyword\">new</span> HashMap&lt;String,Object&gt;(<span class=\"number\">16</span>);</span><br><span class=\"line\">    <span class=\"comment\">// 死信交换器</span></span><br><span class=\"line\">    map.put(<span class=\"string\">\"x-dead-letter-exchange\"</span>,<span class=\"string\">\"dlx.exchange\"</span>);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> Queue(<span class=\"string\">\"dlx.queue\"</span>,<span class=\"keyword\">false</span>,<span class=\"keyword\">false</span>,<span class=\"keyword\">false</span>,map);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"meta\">@Bean</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> TopicExchange <span class=\"title\">topicExchangeDlxBak</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> TopicExchange(<span class=\"string\">\"dlx.exchange\"</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"meta\">@Bean</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> Binding <span class=\"title\">topicBindingDlxBak</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> BindingBuilder.bind(topicQueueDlxBak()).to(topicExchangeBak()).with(<span class=\"string\">\"#\"</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 死信交换器 + 死信路由</span></span><br><span class=\"line\"><span class=\"meta\">@Bean</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> Queue <span class=\"title\">topicQueueDlxKeyBak</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">    Map&lt;String,Object&gt; map = <span class=\"keyword\">new</span> HashMap&lt;String,Object&gt;(<span class=\"number\">16</span>);</span><br><span class=\"line\">    map.put(<span class=\"string\">\"x-dead-letter-exchange\"</span>,<span class=\"string\">\"dlx.key.exchange\"</span>);</span><br><span class=\"line\">    map.put(<span class=\"string\">\"x-dead-letter-routing-key\"</span>,<span class=\"string\">\"dlx.key.bind\"</span>);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> Queue(<span class=\"string\">\"dlx.key.queue\"</span>,<span class=\"keyword\">false</span>,<span class=\"keyword\">false</span>,<span class=\"keyword\">false</span>,map);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"meta\">@Bean</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> TopicExchange <span class=\"title\">topicExchangeDlxKeyBak</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> TopicExchange(<span class=\"string\">\"dlx.key.exchange\"</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"meta\">@Bean</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> Binding <span class=\"title\">topicBindingDlxKeyBak</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> BindingBuilder.bind(topicQueueDlxKeyBak()).to(topicExchangeBak()).with(<span class=\"string\">\"dlx.key.bind\"</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"<p>RabbitMq消费者消息确认</p>\n<h2 id=\"RabbitMq-消费者消息确认\"><a href=\"#RabbitMq-消费者消息确认\" class=\"headerlink\" title=\"RabbitMq 消费者消息确认\"></a>RabbitMq 消费者消息确认</h2><h3 id=\"消费者权衡\"><a href=\"#消费者权衡\" class=\"headerlink\" title=\"消费者权衡\"></a>消费者权衡</h3><ul>\n<li>获取消息方式<ul>\n<li>拉取get</li>\n<li>自动推送</li>\n</ul>\n</li>\n<li>消息应答方式<ul>\n<li>自动确认</li>\n<li>手动确认</li>\n</ul>\n</li>\n<li>Qos预取模式</li>\n<li>可靠性<ul>\n<li>Qos 批量2500事务(高)</li>\n<li>拉取事务(低)</li>\n</ul>\n</li>\n<li>性能 <ul>\n<li>总量2500Qos(高)</li>\n<li>少量Qos 批量2500事务</li>\n<li>事务</li>\n<li>拉取(低)</li>\n</ul>\n</li>\n</ul>","more":"<h4 id=\"获取消息方式\"><a href=\"#获取消息方式\" class=\"headerlink\" title=\"获取消息方式\"></a>获取消息方式</h4><h5 id=\"拉取get\"><a href=\"#拉取get\" class=\"headerlink\" title=\"拉取get\"></a>拉取get</h5><blockquote>\n<p>channel.basicGet(String queueName, boolean autoAck) 效率低不常用</p>\n</blockquote>\n<h5 id=\"自动推送\"><a href=\"#自动推送\" class=\"headerlink\" title=\"自动推送\"></a>自动推送</h5><blockquote>\n<p>springBoot监听队列注解:@RabbitListener(queues = “queueName”),处理方法注解:@RabbitHandler,默认是自动确认。(注解情况下手动确认?)</p>\n</blockquote>\n<h4 id=\"消息应答方式、Qos模式、批量确认、单条确认\"><a href=\"#消息应答方式、Qos模式、批量确认、单条确认\" class=\"headerlink\" title=\"消息应答方式、Qos模式、批量确认、单条确认\"></a>消息应答方式、Qos模式、批量确认、单条确认</h4><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@Bean</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> SimpleMessageListenerContainer <span class=\"title\">messageListenerContainer</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">    SimpleMessageListenerContainer messageListenerContainer = <span class=\"keyword\">new</span> SimpleMessageListenerContainer(connectionFactory());</span><br><span class=\"line\">    <span class=\"comment\">// 开启Qos</span></span><br><span class=\"line\">    <span class=\"comment\">//messageListenerContainer.setPrefetchCount(2500);</span></span><br><span class=\"line\">    messageListenerContainer.setQueues(topicQueueBak());</span><br><span class=\"line\">    <span class=\"comment\">// 开启手动确认 MANUAL  </span></span><br><span class=\"line\">    messageListenerContainer.setAcknowledgeMode(AcknowledgeMode.MANUAL);</span><br><span class=\"line\">    messageListenerContainer.setMessageListener(firstConsumer);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> messageListenerContainer;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 实现手动确认 实现ChannelAwareMessageListener接口，basicAck方法为成功确认</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@Component</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">FirstConsumer</span> <span class=\"keyword\">implements</span> <span class=\"title\">ChannelAwareMessageListener</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onMessage</span><span class=\"params\">(Message message, Channel channel)</span> <span class=\"keyword\">throws</span> Exception </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">            String msg = <span class=\"keyword\">new</span> String(message.getBody());</span><br><span class=\"line\">            System.out.println(<span class=\"string\">\"ack&gt;&gt;&gt;&gt;&gt;&gt;&gt;接收到消息:\"</span>+msg);</span><br><span class=\"line\">            <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">                channel.basicAck(message.getMessageProperties().getDeliveryTag(),</span><br><span class=\"line\">                        <span class=\"keyword\">false</span>);</span><br><span class=\"line\">                System.out.println(<span class=\"string\">\"ack&gt;&gt;&gt;&gt;&gt;&gt;消息已消费\"</span>);</span><br><span class=\"line\">            &#125; <span class=\"keyword\">catch</span> (Exception e) &#123;</span><br><span class=\"line\">                <span class=\"comment\">// 第一false 是否批量拒绝 第二个是否重新放入队列</span></span><br><span class=\"line\">                channel.basicNack(message.getMessageProperties().getDeliveryTag(),</span><br><span class=\"line\">                        <span class=\"keyword\">false</span>,<span class=\"keyword\">false</span>);</span><br><span class=\"line\">                System.out.println(<span class=\"string\">\"UserReceiver&gt;&gt;&gt;&gt;&gt;&gt;拒绝消息，要求Mq重新派发\"</span>);</span><br><span class=\"line\">                <span class=\"keyword\">throw</span> e;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        &#125; <span class=\"keyword\">catch</span> (Exception e) &#123;</span><br><span class=\"line\">            System.out.println(e.getMessage());</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"消息的拒绝\"><a href=\"#消息的拒绝\" class=\"headerlink\" title=\"消息的拒绝\"></a>消息的拒绝</h4><blockquote>\n<p>Nack 可以批量拒绝 第一false是否批量拒绝 第二个是否重新放入队列 重新放入队列容易产生死循环  </p>\n</blockquote>\n<pre><code>channel.basicNack(message.getMessageProperties().getDeliveryTag(),\n                    false,false);\n</code></pre><blockquote>\n<p>Reject 单条拒绝  </p>\n</blockquote>\n<pre><code>channel.basicReject(message.getMessageProperties().getDeliveryTag(),false);\n</code></pre><h4 id=\"死信交换器DLX-消息生产者的备用交换器类似\"><a href=\"#死信交换器DLX-消息生产者的备用交换器类似\" class=\"headerlink\" title=\"死信交换器DLX(消息生产者的备用交换器类似)\"></a>死信交换器DLX(消息生产者的备用交换器类似)</h4><blockquote>\n<p>将拒绝的消息可以投放至自定义的队列处理,重新定义一个队列绑定主交换机,设置参数”x-dead-letter-exchange”,也可以添加死信路由”x-dead-letter-routing-key”,这样不同业务拒绝的消息可以投递至不同的队列。</p>\n</blockquote>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 死信交换器</span></span><br><span class=\"line\"><span class=\"meta\">@Bean</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> Queue <span class=\"title\">topicQueueDlxBak</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">    Map&lt;String,Object&gt; map = <span class=\"keyword\">new</span> HashMap&lt;String,Object&gt;(<span class=\"number\">16</span>);</span><br><span class=\"line\">    <span class=\"comment\">// 死信交换器</span></span><br><span class=\"line\">    map.put(<span class=\"string\">\"x-dead-letter-exchange\"</span>,<span class=\"string\">\"dlx.exchange\"</span>);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> Queue(<span class=\"string\">\"dlx.queue\"</span>,<span class=\"keyword\">false</span>,<span class=\"keyword\">false</span>,<span class=\"keyword\">false</span>,map);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"meta\">@Bean</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> TopicExchange <span class=\"title\">topicExchangeDlxBak</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> TopicExchange(<span class=\"string\">\"dlx.exchange\"</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"meta\">@Bean</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> Binding <span class=\"title\">topicBindingDlxBak</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> BindingBuilder.bind(topicQueueDlxBak()).to(topicExchangeBak()).with(<span class=\"string\">\"#\"</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 死信交换器 + 死信路由</span></span><br><span class=\"line\"><span class=\"meta\">@Bean</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> Queue <span class=\"title\">topicQueueDlxKeyBak</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">    Map&lt;String,Object&gt; map = <span class=\"keyword\">new</span> HashMap&lt;String,Object&gt;(<span class=\"number\">16</span>);</span><br><span class=\"line\">    map.put(<span class=\"string\">\"x-dead-letter-exchange\"</span>,<span class=\"string\">\"dlx.key.exchange\"</span>);</span><br><span class=\"line\">    map.put(<span class=\"string\">\"x-dead-letter-routing-key\"</span>,<span class=\"string\">\"dlx.key.bind\"</span>);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> Queue(<span class=\"string\">\"dlx.key.queue\"</span>,<span class=\"keyword\">false</span>,<span class=\"keyword\">false</span>,<span class=\"keyword\">false</span>,map);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"meta\">@Bean</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> TopicExchange <span class=\"title\">topicExchangeDlxKeyBak</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> TopicExchange(<span class=\"string\">\"dlx.key.exchange\"</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"meta\">@Bean</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> Binding <span class=\"title\">topicBindingDlxKeyBak</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> BindingBuilder.bind(topicQueueDlxKeyBak()).to(topicExchangeBak()).with(<span class=\"string\">\"dlx.key.bind\"</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>"},{"title":"RabbitMq - 定义队列,消息的其它属性(定义时最后的一个Map)","_content":"\nRabbitMq其它属性(定义时最后的一个Map)\n\n## RabbitMq 其它属性(定义时最后的一个Map)\n\n#### 队列\n\n![队列](http://image.tupelo.top/queue.png)\n\n<!-- more -->\n\n```\n@Bean\npublic Queue topicQueueDlxKeyBak(){\n    Map<String,Object> map = new HashMap<String,Object>(16);\n    // 定义属性 ..\n    map.put(\"x-dead-letter-exchange\",\"dlx.key.exchange\");\n    map.put(\"x-dead-letter-routing-key\",\"dlx.key.bind\");\n    return new Queue(\"dlx.key.queue\",false,false,false,map);\n}\n```\n\n#### 消息\n\n![消息](http://image.tupelo.top/rabbitMessage.png)\n\n\n```\n// 设置消息属性\nMessage message = MessageBuilder.withBody(\"测试\".toString().getBytes())\n                .setContentType(MessageProperties.CONTENT_TYPE_TEXT_PLAIN)\n                .setCorrelationId(msgId).build();\nrabbitTemplateConfirm.send(\"exchange\",\"routing\",message);\n```\n\n\n\n\n\n\n","source":"_posts/rabbitmq-05.md","raw":"---\ntitle: RabbitMq - 定义队列,消息的其它属性(定义时最后的一个Map)\ntags:\n  - RabbitMq\n---\n\nRabbitMq其它属性(定义时最后的一个Map)\n\n## RabbitMq 其它属性(定义时最后的一个Map)\n\n#### 队列\n\n![队列](http://image.tupelo.top/queue.png)\n\n<!-- more -->\n\n```\n@Bean\npublic Queue topicQueueDlxKeyBak(){\n    Map<String,Object> map = new HashMap<String,Object>(16);\n    // 定义属性 ..\n    map.put(\"x-dead-letter-exchange\",\"dlx.key.exchange\");\n    map.put(\"x-dead-letter-routing-key\",\"dlx.key.bind\");\n    return new Queue(\"dlx.key.queue\",false,false,false,map);\n}\n```\n\n#### 消息\n\n![消息](http://image.tupelo.top/rabbitMessage.png)\n\n\n```\n// 设置消息属性\nMessage message = MessageBuilder.withBody(\"测试\".toString().getBytes())\n                .setContentType(MessageProperties.CONTENT_TYPE_TEXT_PLAIN)\n                .setCorrelationId(msgId).build();\nrabbitTemplateConfirm.send(\"exchange\",\"routing\",message);\n```\n\n\n\n\n\n\n","slug":"rabbitmq-05","published":1,"date":"2019-01-06T07:43:05.508Z","updated":"2019-01-06T16:15:23.526Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjskls633000u745bdinhrnhb","content":"<p>RabbitMq其它属性(定义时最后的一个Map)</p>\n<h2 id=\"RabbitMq-其它属性-定义时最后的一个Map\"><a href=\"#RabbitMq-其它属性-定义时最后的一个Map\" class=\"headerlink\" title=\"RabbitMq 其它属性(定义时最后的一个Map)\"></a>RabbitMq 其它属性(定义时最后的一个Map)</h2><h4 id=\"队列\"><a href=\"#队列\" class=\"headerlink\" title=\"队列\"></a>队列</h4><p><img src=\"http://image.tupelo.top/queue.png\" alt=\"队列\"></p>\n<a id=\"more\"></a>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">@Bean</span><br><span class=\"line\">public Queue topicQueueDlxKeyBak()&#123;</span><br><span class=\"line\">    Map&lt;String,Object&gt; map = new HashMap&lt;String,Object&gt;(16);</span><br><span class=\"line\">    // 定义属性 ..</span><br><span class=\"line\">    map.put(&quot;x-dead-letter-exchange&quot;,&quot;dlx.key.exchange&quot;);</span><br><span class=\"line\">    map.put(&quot;x-dead-letter-routing-key&quot;,&quot;dlx.key.bind&quot;);</span><br><span class=\"line\">    return new Queue(&quot;dlx.key.queue&quot;,false,false,false,map);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"消息\"><a href=\"#消息\" class=\"headerlink\" title=\"消息\"></a>消息</h4><p><img src=\"http://image.tupelo.top/rabbitMessage.png\" alt=\"消息\"></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// 设置消息属性</span><br><span class=\"line\">Message message = MessageBuilder.withBody(&quot;测试&quot;.toString().getBytes())</span><br><span class=\"line\">                .setContentType(MessageProperties.CONTENT_TYPE_TEXT_PLAIN)</span><br><span class=\"line\">                .setCorrelationId(msgId).build();</span><br><span class=\"line\">rabbitTemplateConfirm.send(&quot;exchange&quot;,&quot;routing&quot;,message);</span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"<p>RabbitMq其它属性(定义时最后的一个Map)</p>\n<h2 id=\"RabbitMq-其它属性-定义时最后的一个Map\"><a href=\"#RabbitMq-其它属性-定义时最后的一个Map\" class=\"headerlink\" title=\"RabbitMq 其它属性(定义时最后的一个Map)\"></a>RabbitMq 其它属性(定义时最后的一个Map)</h2><h4 id=\"队列\"><a href=\"#队列\" class=\"headerlink\" title=\"队列\"></a>队列</h4><p><img src=\"http://image.tupelo.top/queue.png\" alt=\"队列\"></p>","more":"<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">@Bean</span><br><span class=\"line\">public Queue topicQueueDlxKeyBak()&#123;</span><br><span class=\"line\">    Map&lt;String,Object&gt; map = new HashMap&lt;String,Object&gt;(16);</span><br><span class=\"line\">    // 定义属性 ..</span><br><span class=\"line\">    map.put(&quot;x-dead-letter-exchange&quot;,&quot;dlx.key.exchange&quot;);</span><br><span class=\"line\">    map.put(&quot;x-dead-letter-routing-key&quot;,&quot;dlx.key.bind&quot;);</span><br><span class=\"line\">    return new Queue(&quot;dlx.key.queue&quot;,false,false,false,map);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"消息\"><a href=\"#消息\" class=\"headerlink\" title=\"消息\"></a>消息</h4><p><img src=\"http://image.tupelo.top/rabbitMessage.png\" alt=\"消息\"></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// 设置消息属性</span><br><span class=\"line\">Message message = MessageBuilder.withBody(&quot;测试&quot;.toString().getBytes())</span><br><span class=\"line\">                .setContentType(MessageProperties.CONTENT_TYPE_TEXT_PLAIN)</span><br><span class=\"line\">                .setCorrelationId(msgId).build();</span><br><span class=\"line\">rabbitTemplateConfirm.send(&quot;exchange&quot;,&quot;routing&quot;,message);</span><br></pre></td></tr></table></figure>"},{"title":"RabbitMq - 集群","_content":"\nRabbitMq集群\n\n## RabbitMq 集群(局域网/网络速度快)\n\n### 目标\n\n实现某一台机器挂了 程序还能运行 并不是为了保证消息万无一失  \n> 交换器全局复制 队列只有元数据复制 \n\n#### 相关命令\n\n- rabbitmqctl join_culster [rabbit@node] 加入集群  \n- rabbitmqctl status   集群状态  \n- rabbitmqctl reset    \n\n<!-- more -->\n#### 加入集群\n\n- /etc/host 各节点一直\n- /var/lib/rabbitmq/.erlang.cookie各节点一致(修改时可能要改权限777,修改完记得把权限改400回来,否则会报错)\n- 启动各节点mq rabbitmq-server\n- 要加入节点 先停止 rabbitmqctl stop_app\n- 情况集群情况 rabbitmqctl reset\n- 加入 rabbitmqctl join_cluster rabbit@node1(重命名方法:修改/etc/rabbitmq/rabbitmq-env.conf,加入 NODENAME=rabbit2@node2),默认是磁盘节点,单参数 --ram 则是内存节点(rabbitmqctl join_cluster rabbit@node1 --ram)\n- 启动 rabbitmqctl start_app\n- rabbitmqctl status 查看状况\n\n#### 离开集群\n\n- 停止 rabbitmqctl stop_app\n- 清空 rabbitmqctl reset\n- 启动 rabbitmqctl start_app\n\n#### 镜像队列\n\n> 在定义队列加入相关参数\n\n```java\nMap<String, Object> map = new HashMap<String, Object>();\n// 是否是在所有节点添加镜像 all是所有\nmap.put(\"x-ha-policy\",\"nodes\");\n// 在指定节点添加镜像\nmap.put(\"x-ha-nodes\",\"[rabbit@node1]\");\nchannel.queueDeclare(queueName,false,false,false,map);\n```\n###### 命令行添加镜像策略\n\n> rabbitmqctl set policy [-p vhost] name pattern Definition 例:queue开头的队列进行镜像处理,节点数1个 \n\nDefinition包含三个参数:ha-mode、ha-params、ha-sync-mode  \nha-mode[all、nodes、exactly] //exactly是指个数  \nha-sync-mode[automatic、manual] // 确认方式(自动、手动)  \n\n\n```\nrabbitmqctl set ha_queue \"^queue\" '{\"hamode\":\"exactly\",\"ha-params\":1,\"ha-sync-mode\":\"automatic\"}'\n```\n\n#### 第三方插件\n\n> 待学习(HAProxy) 类似Nginx\n\n\n\n\n\n\n\n","source":"_posts/rabbitmq-06.md","raw":"---\ntitle: RabbitMq - 集群\ntags:\n  - RabbitMq\n---\n\nRabbitMq集群\n\n## RabbitMq 集群(局域网/网络速度快)\n\n### 目标\n\n实现某一台机器挂了 程序还能运行 并不是为了保证消息万无一失  \n> 交换器全局复制 队列只有元数据复制 \n\n#### 相关命令\n\n- rabbitmqctl join_culster [rabbit@node] 加入集群  \n- rabbitmqctl status   集群状态  \n- rabbitmqctl reset    \n\n<!-- more -->\n#### 加入集群\n\n- /etc/host 各节点一直\n- /var/lib/rabbitmq/.erlang.cookie各节点一致(修改时可能要改权限777,修改完记得把权限改400回来,否则会报错)\n- 启动各节点mq rabbitmq-server\n- 要加入节点 先停止 rabbitmqctl stop_app\n- 情况集群情况 rabbitmqctl reset\n- 加入 rabbitmqctl join_cluster rabbit@node1(重命名方法:修改/etc/rabbitmq/rabbitmq-env.conf,加入 NODENAME=rabbit2@node2),默认是磁盘节点,单参数 --ram 则是内存节点(rabbitmqctl join_cluster rabbit@node1 --ram)\n- 启动 rabbitmqctl start_app\n- rabbitmqctl status 查看状况\n\n#### 离开集群\n\n- 停止 rabbitmqctl stop_app\n- 清空 rabbitmqctl reset\n- 启动 rabbitmqctl start_app\n\n#### 镜像队列\n\n> 在定义队列加入相关参数\n\n```java\nMap<String, Object> map = new HashMap<String, Object>();\n// 是否是在所有节点添加镜像 all是所有\nmap.put(\"x-ha-policy\",\"nodes\");\n// 在指定节点添加镜像\nmap.put(\"x-ha-nodes\",\"[rabbit@node1]\");\nchannel.queueDeclare(queueName,false,false,false,map);\n```\n###### 命令行添加镜像策略\n\n> rabbitmqctl set policy [-p vhost] name pattern Definition 例:queue开头的队列进行镜像处理,节点数1个 \n\nDefinition包含三个参数:ha-mode、ha-params、ha-sync-mode  \nha-mode[all、nodes、exactly] //exactly是指个数  \nha-sync-mode[automatic、manual] // 确认方式(自动、手动)  \n\n\n```\nrabbitmqctl set ha_queue \"^queue\" '{\"hamode\":\"exactly\",\"ha-params\":1,\"ha-sync-mode\":\"automatic\"}'\n```\n\n#### 第三方插件\n\n> 待学习(HAProxy) 类似Nginx\n\n\n\n\n\n\n\n","slug":"rabbitmq-06","published":1,"date":"2019-01-06T15:23:14.673Z","updated":"2019-01-06T16:15:26.224Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjskls634000x745bq19veffm","content":"<p>RabbitMq集群</p>\n<h2 id=\"RabbitMq-集群-局域网-网络速度快\"><a href=\"#RabbitMq-集群-局域网-网络速度快\" class=\"headerlink\" title=\"RabbitMq 集群(局域网/网络速度快)\"></a>RabbitMq 集群(局域网/网络速度快)</h2><h3 id=\"目标\"><a href=\"#目标\" class=\"headerlink\" title=\"目标\"></a>目标</h3><p>实现某一台机器挂了 程序还能运行 并不是为了保证消息万无一失  </p>\n<blockquote>\n<p>交换器全局复制 队列只有元数据复制 </p>\n</blockquote>\n<h4 id=\"相关命令\"><a href=\"#相关命令\" class=\"headerlink\" title=\"相关命令\"></a>相关命令</h4><ul>\n<li>rabbitmqctl join_culster [rabbit@node] 加入集群  </li>\n<li>rabbitmqctl status   集群状态  </li>\n<li>rabbitmqctl reset    </li>\n</ul>\n<a id=\"more\"></a>\n<h4 id=\"加入集群\"><a href=\"#加入集群\" class=\"headerlink\" title=\"加入集群\"></a>加入集群</h4><ul>\n<li>/etc/host 各节点一直</li>\n<li>/var/lib/rabbitmq/.erlang.cookie各节点一致(修改时可能要改权限777,修改完记得把权限改400回来,否则会报错)</li>\n<li>启动各节点mq rabbitmq-server</li>\n<li>要加入节点 先停止 rabbitmqctl stop_app</li>\n<li>情况集群情况 rabbitmqctl reset</li>\n<li>加入 rabbitmqctl join_cluster rabbit@node1(重命名方法:修改/etc/rabbitmq/rabbitmq-env.conf,加入 NODENAME=rabbit2@node2),默认是磁盘节点,单参数 –ram 则是内存节点(rabbitmqctl join_cluster rabbit@node1 –ram)</li>\n<li>启动 rabbitmqctl start_app</li>\n<li>rabbitmqctl status 查看状况</li>\n</ul>\n<h4 id=\"离开集群\"><a href=\"#离开集群\" class=\"headerlink\" title=\"离开集群\"></a>离开集群</h4><ul>\n<li>停止 rabbitmqctl stop_app</li>\n<li>清空 rabbitmqctl reset</li>\n<li>启动 rabbitmqctl start_app</li>\n</ul>\n<h4 id=\"镜像队列\"><a href=\"#镜像队列\" class=\"headerlink\" title=\"镜像队列\"></a>镜像队列</h4><blockquote>\n<p>在定义队列加入相关参数</p>\n</blockquote>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Map&lt;String, Object&gt; map = <span class=\"keyword\">new</span> HashMap&lt;String, Object&gt;();</span><br><span class=\"line\"><span class=\"comment\">// 是否是在所有节点添加镜像 all是所有</span></span><br><span class=\"line\">map.put(<span class=\"string\">\"x-ha-policy\"</span>,<span class=\"string\">\"nodes\"</span>);</span><br><span class=\"line\"><span class=\"comment\">// 在指定节点添加镜像</span></span><br><span class=\"line\">map.put(<span class=\"string\">\"x-ha-nodes\"</span>,<span class=\"string\">\"[rabbit@node1]\"</span>);</span><br><span class=\"line\">channel.queueDeclare(queueName,<span class=\"keyword\">false</span>,<span class=\"keyword\">false</span>,<span class=\"keyword\">false</span>,map);</span><br></pre></td></tr></table></figure>\n<h6 id=\"命令行添加镜像策略\"><a href=\"#命令行添加镜像策略\" class=\"headerlink\" title=\"命令行添加镜像策略\"></a>命令行添加镜像策略</h6><blockquote>\n<p>rabbitmqctl set policy [-p vhost] name pattern Definition 例:queue开头的队列进行镜像处理,节点数1个 </p>\n</blockquote>\n<p>Definition包含三个参数:ha-mode、ha-params、ha-sync-mode<br>ha-mode[all、nodes、exactly] //exactly是指个数<br>ha-sync-mode[automatic、manual] // 确认方式(自动、手动)  </p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">rabbitmqctl set ha_queue &quot;^queue&quot; &apos;&#123;&quot;hamode&quot;:&quot;exactly&quot;,&quot;ha-params&quot;:1,&quot;ha-sync-mode&quot;:&quot;automatic&quot;&#125;&apos;</span><br></pre></td></tr></table></figure>\n<h4 id=\"第三方插件\"><a href=\"#第三方插件\" class=\"headerlink\" title=\"第三方插件\"></a>第三方插件</h4><blockquote>\n<p>待学习(HAProxy) 类似Nginx</p>\n</blockquote>\n","site":{"data":{}},"excerpt":"<p>RabbitMq集群</p>\n<h2 id=\"RabbitMq-集群-局域网-网络速度快\"><a href=\"#RabbitMq-集群-局域网-网络速度快\" class=\"headerlink\" title=\"RabbitMq 集群(局域网/网络速度快)\"></a>RabbitMq 集群(局域网/网络速度快)</h2><h3 id=\"目标\"><a href=\"#目标\" class=\"headerlink\" title=\"目标\"></a>目标</h3><p>实现某一台机器挂了 程序还能运行 并不是为了保证消息万无一失  </p>\n<blockquote>\n<p>交换器全局复制 队列只有元数据复制 </p>\n</blockquote>\n<h4 id=\"相关命令\"><a href=\"#相关命令\" class=\"headerlink\" title=\"相关命令\"></a>相关命令</h4><ul>\n<li>rabbitmqctl join_culster [rabbit@node] 加入集群  </li>\n<li>rabbitmqctl status   集群状态  </li>\n<li>rabbitmqctl reset    </li>\n</ul>","more":"<h4 id=\"加入集群\"><a href=\"#加入集群\" class=\"headerlink\" title=\"加入集群\"></a>加入集群</h4><ul>\n<li>/etc/host 各节点一直</li>\n<li>/var/lib/rabbitmq/.erlang.cookie各节点一致(修改时可能要改权限777,修改完记得把权限改400回来,否则会报错)</li>\n<li>启动各节点mq rabbitmq-server</li>\n<li>要加入节点 先停止 rabbitmqctl stop_app</li>\n<li>情况集群情况 rabbitmqctl reset</li>\n<li>加入 rabbitmqctl join_cluster rabbit@node1(重命名方法:修改/etc/rabbitmq/rabbitmq-env.conf,加入 NODENAME=rabbit2@node2),默认是磁盘节点,单参数 –ram 则是内存节点(rabbitmqctl join_cluster rabbit@node1 –ram)</li>\n<li>启动 rabbitmqctl start_app</li>\n<li>rabbitmqctl status 查看状况</li>\n</ul>\n<h4 id=\"离开集群\"><a href=\"#离开集群\" class=\"headerlink\" title=\"离开集群\"></a>离开集群</h4><ul>\n<li>停止 rabbitmqctl stop_app</li>\n<li>清空 rabbitmqctl reset</li>\n<li>启动 rabbitmqctl start_app</li>\n</ul>\n<h4 id=\"镜像队列\"><a href=\"#镜像队列\" class=\"headerlink\" title=\"镜像队列\"></a>镜像队列</h4><blockquote>\n<p>在定义队列加入相关参数</p>\n</blockquote>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Map&lt;String, Object&gt; map = <span class=\"keyword\">new</span> HashMap&lt;String, Object&gt;();</span><br><span class=\"line\"><span class=\"comment\">// 是否是在所有节点添加镜像 all是所有</span></span><br><span class=\"line\">map.put(<span class=\"string\">\"x-ha-policy\"</span>,<span class=\"string\">\"nodes\"</span>);</span><br><span class=\"line\"><span class=\"comment\">// 在指定节点添加镜像</span></span><br><span class=\"line\">map.put(<span class=\"string\">\"x-ha-nodes\"</span>,<span class=\"string\">\"[rabbit@node1]\"</span>);</span><br><span class=\"line\">channel.queueDeclare(queueName,<span class=\"keyword\">false</span>,<span class=\"keyword\">false</span>,<span class=\"keyword\">false</span>,map);</span><br></pre></td></tr></table></figure>\n<h6 id=\"命令行添加镜像策略\"><a href=\"#命令行添加镜像策略\" class=\"headerlink\" title=\"命令行添加镜像策略\"></a>命令行添加镜像策略</h6><blockquote>\n<p>rabbitmqctl set policy [-p vhost] name pattern Definition 例:queue开头的队列进行镜像处理,节点数1个 </p>\n</blockquote>\n<p>Definition包含三个参数:ha-mode、ha-params、ha-sync-mode<br>ha-mode[all、nodes、exactly] //exactly是指个数<br>ha-sync-mode[automatic、manual] // 确认方式(自动、手动)  </p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">rabbitmqctl set ha_queue &quot;^queue&quot; &apos;&#123;&quot;hamode&quot;:&quot;exactly&quot;,&quot;ha-params&quot;:1,&quot;ha-sync-mode&quot;:&quot;automatic&quot;&#125;&apos;</span><br></pre></td></tr></table></figure>\n<h4 id=\"第三方插件\"><a href=\"#第三方插件\" class=\"headerlink\" title=\"第三方插件\"></a>第三方插件</h4><blockquote>\n<p>待学习(HAProxy) 类似Nginx</p>\n</blockquote>"},{"title":"Spring学习02 - 常用注解","_content":"\nspring基础学习\n\n## Spring 基础及组件使用02\n\n\n### @Conditional条件注册Bean\n```java\n\t\tpackage com.enjoy.cap5.config;\n\n\t\timport org.springframework.beans.factory.config.ConfigurableListableBeanFactory;\n\t\timport org.springframework.context.annotation.Condition;\n\t\timport org.springframework.context.annotation.ConditionContext;\n\t\timport org.springframework.core.env.Environment;\n\t\timport org.springframework.core.type.AnnotatedTypeMetadata;\n\n\t\tpublic class LinCondition implements Condition{\n\t\t\t/*\n\t\t\t*ConditionContext: 判断条件可以使用的上下文(环境)\n\t\t\t*AnnotatedTypeMetadata: 注解的信息\n\t\t\t*\n\t\t\t*/\n\t\t\t@Override\n\t\t\tpublic boolean matches(ConditionContext context, AnnotatedTypeMetadata metadata) {\n\t\t\t\t// 业务逻辑\n\t\t\t\t//能获取到IOC容器正在使用的beanFactory\n\t\t\t\tConfigurableListableBeanFactory beanFactory = context.getBeanFactory();\n\t\t\t\t//获取当前环境变量(包括我们操作系统是WIN还是LINUX??)\n\t\t\t\tEnvironment environment = context.getEnvironment();\n\t\t\t\tString os_name = environment.getProperty(\"os.name\");\n\t\t\t\tif(os_name.contains(\"linux\")){\n\t\t\t\t\treturn true;\n\t\t\t\t}\n\t\t\t\treturn false;\n\t\t\t}\n\n\t\t}\n```\n\n定义Bean时加上注解\n```java\n\t@Conditional(WinCondition.class)\n\t@Bean(\"lison\")\n\tpublic Person lison(){\n\t\treturn new Person();\n\t}\n```\n\n\n\n### BeanFactory 和 FactoryBean 的区别\n\n\n- FactoryBean ： 把我们的JAVA实例Bean通过FactoryBean注入到容器中\n- BeanFactory ： 从容器中获取我们实例化的Bean\n\n<!-- more -->\n\n\n### 向IOC容器中注册Bean实例的方法\n\n- @Bean注解: [导入第三方的类或包的组件],比如Person为第三方的类, 需要在我们的IOC容器中使用\n- 包扫描+组件的标注注解(@ComponentScan:  @Controller, @Service  @Reponsitory  @ Componet),一般是针对 我们自己写的类,使用这个\n- @Import:[快速给容器导入一个组件]\n    * @Import(要导入到容器中的组件):容器会自动注册这个组件,bean 的 id为全类名\n    ```java\n\t@Import(value = { Dog.class,Cat.class})\n    ```\n    * 实现ImportSelector接口:返回需要导入到容器的组件的全类名数组 \n    ```java\n\timport org.springframework.context.annotation.ImportSelector;\n\timport org.springframework.core.type.AnnotationMetadata;\n\n\tpublic class CaiImportSelector implements ImportSelector{\n\t\t@Override\n\t\tpublic String[] selectImports(AnnotationMetadata importingClassMetadata){\n\t\t\t//返回全类名的bean\n\t\t\treturn new String[]{\"com.enjoy.cap6.bean.Fish\",\"com.enjoy.cap6.bean.Tiger\"};\n\t\t}\n\t}\n    ```\n    * 实现ImportBeanDefinitionRegistrar接口:可以手动添加组件到IOC容器\n    ```java\n\n\tpublic class CaiImportBeanDefinitionRegistrar implements ImportBeanDefinitionRegistrar {\n\n\t\t/*\n\t\t*AnnotationMetadata:当前类的注解信息\n\t\t*BeanDefinitionRegistry:BeanDefinition注册类\n\t\t*    把所有需要添加到容器中的bean加入;\n\t\t*    @Scope\n\t\t*/\n\t\t@Override\n\t\tpublic void registerBeanDefinitions(AnnotationMetadata importingClassMetadata, BeanDefinitionRegistry registry) {\n\t\t\tboolean bean1 = registry.containsBeanDefinition(\"com.enjoy.cap6.bean.Dog\");\n\t\t\tboolean bean2 = registry.containsBeanDefinition(\"com.enjoy.cap6.bean.Cat\");\n\t\t\t//如果Dog和Cat同时存在于我们IOC容器中,那么创建Pig类, 加入到容器\n\t\t\t//对于我们要注册的bean, 给bean进行封装,\n\t\t\tif(bean1 && bean2){\n\t\t\t\tRootBeanDefinition beanDefinition = new RootBeanDefinition(Pig.class);\n\t\t\t\tregistry.registerBeanDefinition(\"pig\", beanDefinition);\n\t\t\t}\n\t\t}\n\n\t}\n\n    ```\n\n- 使用Spring提供的FactoryBean(工厂bean)进行注册 实现FactoryBean接口\n\n```java\nimport org.springframework.beans.factory.FactoryBean;\n\n// 注入Monkey类\npublic class CaiFactoryBean implements FactoryBean<Monkey>{\n\n\t@Override\n\tpublic Monkey getObject() throws Exception {\n\t\treturn new Monkey();\n\t}\n\n\t@Override\n\tpublic Class<?> getObjectType() {\n\t\treturn Monkey.class;\n\t}\n\t\n\t@Override\n\tpublic boolean isSingleton() {\n\t\treturn true;\n\t}\n}\n```\n\n","source":"_posts/spring-02.md","raw":"---\ntitle: Spring学习02 - 常用注解\ntags:\n  - Java\n  - Spring\n---\n\nspring基础学习\n\n## Spring 基础及组件使用02\n\n\n### @Conditional条件注册Bean\n```java\n\t\tpackage com.enjoy.cap5.config;\n\n\t\timport org.springframework.beans.factory.config.ConfigurableListableBeanFactory;\n\t\timport org.springframework.context.annotation.Condition;\n\t\timport org.springframework.context.annotation.ConditionContext;\n\t\timport org.springframework.core.env.Environment;\n\t\timport org.springframework.core.type.AnnotatedTypeMetadata;\n\n\t\tpublic class LinCondition implements Condition{\n\t\t\t/*\n\t\t\t*ConditionContext: 判断条件可以使用的上下文(环境)\n\t\t\t*AnnotatedTypeMetadata: 注解的信息\n\t\t\t*\n\t\t\t*/\n\t\t\t@Override\n\t\t\tpublic boolean matches(ConditionContext context, AnnotatedTypeMetadata metadata) {\n\t\t\t\t// 业务逻辑\n\t\t\t\t//能获取到IOC容器正在使用的beanFactory\n\t\t\t\tConfigurableListableBeanFactory beanFactory = context.getBeanFactory();\n\t\t\t\t//获取当前环境变量(包括我们操作系统是WIN还是LINUX??)\n\t\t\t\tEnvironment environment = context.getEnvironment();\n\t\t\t\tString os_name = environment.getProperty(\"os.name\");\n\t\t\t\tif(os_name.contains(\"linux\")){\n\t\t\t\t\treturn true;\n\t\t\t\t}\n\t\t\t\treturn false;\n\t\t\t}\n\n\t\t}\n```\n\n定义Bean时加上注解\n```java\n\t@Conditional(WinCondition.class)\n\t@Bean(\"lison\")\n\tpublic Person lison(){\n\t\treturn new Person();\n\t}\n```\n\n\n\n### BeanFactory 和 FactoryBean 的区别\n\n\n- FactoryBean ： 把我们的JAVA实例Bean通过FactoryBean注入到容器中\n- BeanFactory ： 从容器中获取我们实例化的Bean\n\n<!-- more -->\n\n\n### 向IOC容器中注册Bean实例的方法\n\n- @Bean注解: [导入第三方的类或包的组件],比如Person为第三方的类, 需要在我们的IOC容器中使用\n- 包扫描+组件的标注注解(@ComponentScan:  @Controller, @Service  @Reponsitory  @ Componet),一般是针对 我们自己写的类,使用这个\n- @Import:[快速给容器导入一个组件]\n    * @Import(要导入到容器中的组件):容器会自动注册这个组件,bean 的 id为全类名\n    ```java\n\t@Import(value = { Dog.class,Cat.class})\n    ```\n    * 实现ImportSelector接口:返回需要导入到容器的组件的全类名数组 \n    ```java\n\timport org.springframework.context.annotation.ImportSelector;\n\timport org.springframework.core.type.AnnotationMetadata;\n\n\tpublic class CaiImportSelector implements ImportSelector{\n\t\t@Override\n\t\tpublic String[] selectImports(AnnotationMetadata importingClassMetadata){\n\t\t\t//返回全类名的bean\n\t\t\treturn new String[]{\"com.enjoy.cap6.bean.Fish\",\"com.enjoy.cap6.bean.Tiger\"};\n\t\t}\n\t}\n    ```\n    * 实现ImportBeanDefinitionRegistrar接口:可以手动添加组件到IOC容器\n    ```java\n\n\tpublic class CaiImportBeanDefinitionRegistrar implements ImportBeanDefinitionRegistrar {\n\n\t\t/*\n\t\t*AnnotationMetadata:当前类的注解信息\n\t\t*BeanDefinitionRegistry:BeanDefinition注册类\n\t\t*    把所有需要添加到容器中的bean加入;\n\t\t*    @Scope\n\t\t*/\n\t\t@Override\n\t\tpublic void registerBeanDefinitions(AnnotationMetadata importingClassMetadata, BeanDefinitionRegistry registry) {\n\t\t\tboolean bean1 = registry.containsBeanDefinition(\"com.enjoy.cap6.bean.Dog\");\n\t\t\tboolean bean2 = registry.containsBeanDefinition(\"com.enjoy.cap6.bean.Cat\");\n\t\t\t//如果Dog和Cat同时存在于我们IOC容器中,那么创建Pig类, 加入到容器\n\t\t\t//对于我们要注册的bean, 给bean进行封装,\n\t\t\tif(bean1 && bean2){\n\t\t\t\tRootBeanDefinition beanDefinition = new RootBeanDefinition(Pig.class);\n\t\t\t\tregistry.registerBeanDefinition(\"pig\", beanDefinition);\n\t\t\t}\n\t\t}\n\n\t}\n\n    ```\n\n- 使用Spring提供的FactoryBean(工厂bean)进行注册 实现FactoryBean接口\n\n```java\nimport org.springframework.beans.factory.FactoryBean;\n\n// 注入Monkey类\npublic class CaiFactoryBean implements FactoryBean<Monkey>{\n\n\t@Override\n\tpublic Monkey getObject() throws Exception {\n\t\treturn new Monkey();\n\t}\n\n\t@Override\n\tpublic Class<?> getObjectType() {\n\t\treturn Monkey.class;\n\t}\n\t\n\t@Override\n\tpublic boolean isSingleton() {\n\t\treturn true;\n\t}\n}\n```\n\n","slug":"spring-02","published":1,"date":"2018-10-21T14:26:32.259Z","updated":"2018-12-12T16:08:41.382Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjskls635000z745bj4gdb9cw","content":"<p>spring基础学习</p>\n<h2 id=\"Spring-基础及组件使用02\"><a href=\"#Spring-基础及组件使用02\" class=\"headerlink\" title=\"Spring 基础及组件使用02\"></a>Spring 基础及组件使用02</h2><h3 id=\"Conditional条件注册Bean\"><a href=\"#Conditional条件注册Bean\" class=\"headerlink\" title=\"@Conditional条件注册Bean\"></a>@Conditional条件注册Bean</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.enjoy.cap5.config;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.beans.factory.config.ConfigurableListableBeanFactory;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.context.annotation.Condition;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.context.annotation.ConditionContext;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.core.env.Environment;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.core.type.AnnotatedTypeMetadata;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">LinCondition</span> <span class=\"keyword\">implements</span> <span class=\"title\">Condition</span></span>&#123;</span><br><span class=\"line\">\t<span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">\t*ConditionContext: 判断条件可以使用的上下文(环境)</span></span><br><span class=\"line\"><span class=\"comment\">\t*AnnotatedTypeMetadata: 注解的信息</span></span><br><span class=\"line\"><span class=\"comment\">\t*</span></span><br><span class=\"line\"><span class=\"comment\">\t*/</span></span><br><span class=\"line\">\t<span class=\"meta\">@Override</span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">matches</span><span class=\"params\">(ConditionContext context, AnnotatedTypeMetadata metadata)</span> </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"comment\">// 业务逻辑</span></span><br><span class=\"line\">\t\t<span class=\"comment\">//能获取到IOC容器正在使用的beanFactory</span></span><br><span class=\"line\">\t\tConfigurableListableBeanFactory beanFactory = context.getBeanFactory();</span><br><span class=\"line\">\t\t<span class=\"comment\">//获取当前环境变量(包括我们操作系统是WIN还是LINUX??)</span></span><br><span class=\"line\">\t\tEnvironment environment = context.getEnvironment();</span><br><span class=\"line\">\t\tString os_name = environment.getProperty(<span class=\"string\">\"os.name\"</span>);</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span>(os_name.contains(<span class=\"string\">\"linux\"</span>))&#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">return</span> <span class=\"keyword\">true</span>;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"keyword\">false</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>定义Bean时加上注解<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Conditional</span>(WinCondition.class)</span><br><span class=\"line\"><span class=\"meta\">@Bean</span>(<span class=\"string\">\"lison\"</span>)</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> Person <span class=\"title\">lison</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"keyword\">new</span> Person();</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"BeanFactory-和-FactoryBean-的区别\"><a href=\"#BeanFactory-和-FactoryBean-的区别\" class=\"headerlink\" title=\"BeanFactory 和 FactoryBean 的区别\"></a>BeanFactory 和 FactoryBean 的区别</h3><ul>\n<li>FactoryBean ： 把我们的JAVA实例Bean通过FactoryBean注入到容器中</li>\n<li>BeanFactory ： 从容器中获取我们实例化的Bean</li>\n</ul>\n<a id=\"more\"></a>\n<h3 id=\"向IOC容器中注册Bean实例的方法\"><a href=\"#向IOC容器中注册Bean实例的方法\" class=\"headerlink\" title=\"向IOC容器中注册Bean实例的方法\"></a>向IOC容器中注册Bean实例的方法</h3><ul>\n<li>@Bean注解: [导入第三方的类或包的组件],比如Person为第三方的类, 需要在我们的IOC容器中使用</li>\n<li>包扫描+组件的标注注解(@ComponentScan:  @Controller, @Service  @Reponsitory  @ Componet),一般是针对 我们自己写的类,使用这个</li>\n<li><p>@Import:[快速给容器导入一个组件]</p>\n<ul>\n<li><p>@Import(要导入到容器中的组件):容器会自动注册这个组件,bean 的 id为全类名</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Import</span>(value = &#123; Dog.class,Cat.class&#125;)</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>实现ImportSelector接口:返回需要导入到容器的组件的全类名数组 </p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.context.annotation.ImportSelector;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.core.type.AnnotationMetadata;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">CaiImportSelector</span> <span class=\"keyword\">implements</span> <span class=\"title\">ImportSelector</span></span>&#123;</span><br><span class=\"line\">\t<span class=\"meta\">@Override</span></span><br><span class=\"line\">\t<span class=\"keyword\">public</span> String[] selectImports(AnnotationMetadata importingClassMetadata)&#123;</span><br><span class=\"line\">\t\t<span class=\"comment\">//返回全类名的bean</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"keyword\">new</span> String[]&#123;<span class=\"string\">\"com.enjoy.cap6.bean.Fish\"</span>,<span class=\"string\">\"com.enjoy.cap6.bean.Tiger\"</span>&#125;;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>实现ImportBeanDefinitionRegistrar接口:可以手动添加组件到IOC容器</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">CaiImportBeanDefinitionRegistrar</span> <span class=\"keyword\">implements</span> <span class=\"title\">ImportBeanDefinitionRegistrar</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">\t*AnnotationMetadata:当前类的注解信息</span></span><br><span class=\"line\"><span class=\"comment\">\t*BeanDefinitionRegistry:BeanDefinition注册类</span></span><br><span class=\"line\"><span class=\"comment\">\t*    把所有需要添加到容器中的bean加入;</span></span><br><span class=\"line\"><span class=\"comment\">\t*    @Scope</span></span><br><span class=\"line\"><span class=\"comment\">\t*/</span></span><br><span class=\"line\">\t<span class=\"meta\">@Override</span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">registerBeanDefinitions</span><span class=\"params\">(AnnotationMetadata importingClassMetadata, BeanDefinitionRegistry registry)</span> </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">boolean</span> bean1 = registry.containsBeanDefinition(<span class=\"string\">\"com.enjoy.cap6.bean.Dog\"</span>);</span><br><span class=\"line\">\t\t<span class=\"keyword\">boolean</span> bean2 = registry.containsBeanDefinition(<span class=\"string\">\"com.enjoy.cap6.bean.Cat\"</span>);</span><br><span class=\"line\">\t\t<span class=\"comment\">//如果Dog和Cat同时存在于我们IOC容器中,那么创建Pig类, 加入到容器</span></span><br><span class=\"line\">\t\t<span class=\"comment\">//对于我们要注册的bean, 给bean进行封装,</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span>(bean1 &amp;&amp; bean2)&#123;</span><br><span class=\"line\">\t\t\tRootBeanDefinition beanDefinition = <span class=\"keyword\">new</span> RootBeanDefinition(Pig.class);</span><br><span class=\"line\">\t\t\tregistry.registerBeanDefinition(<span class=\"string\">\"pig\"</span>, beanDefinition);</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n</li>\n<li><p>使用Spring提供的FactoryBean(工厂bean)进行注册 实现FactoryBean接口</p>\n</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.beans.factory.FactoryBean;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 注入Monkey类</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">CaiFactoryBean</span> <span class=\"keyword\">implements</span> <span class=\"title\">FactoryBean</span>&lt;<span class=\"title\">Monkey</span>&gt;</span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"meta\">@Override</span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> Monkey <span class=\"title\">getObject</span><span class=\"params\">()</span> <span class=\"keyword\">throws</span> Exception </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"keyword\">new</span> Monkey();</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"meta\">@Override</span></span><br><span class=\"line\">\t<span class=\"keyword\">public</span> Class&lt;?&gt; getObjectType() &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> Monkey.class;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"meta\">@Override</span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">isSingleton</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"keyword\">true</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"<p>spring基础学习</p>\n<h2 id=\"Spring-基础及组件使用02\"><a href=\"#Spring-基础及组件使用02\" class=\"headerlink\" title=\"Spring 基础及组件使用02\"></a>Spring 基础及组件使用02</h2><h3 id=\"Conditional条件注册Bean\"><a href=\"#Conditional条件注册Bean\" class=\"headerlink\" title=\"@Conditional条件注册Bean\"></a>@Conditional条件注册Bean</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.enjoy.cap5.config;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.beans.factory.config.ConfigurableListableBeanFactory;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.context.annotation.Condition;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.context.annotation.ConditionContext;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.core.env.Environment;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.core.type.AnnotatedTypeMetadata;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">LinCondition</span> <span class=\"keyword\">implements</span> <span class=\"title\">Condition</span></span>&#123;</span><br><span class=\"line\">\t<span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">\t*ConditionContext: 判断条件可以使用的上下文(环境)</span></span><br><span class=\"line\"><span class=\"comment\">\t*AnnotatedTypeMetadata: 注解的信息</span></span><br><span class=\"line\"><span class=\"comment\">\t*</span></span><br><span class=\"line\"><span class=\"comment\">\t*/</span></span><br><span class=\"line\">\t<span class=\"meta\">@Override</span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">matches</span><span class=\"params\">(ConditionContext context, AnnotatedTypeMetadata metadata)</span> </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"comment\">// 业务逻辑</span></span><br><span class=\"line\">\t\t<span class=\"comment\">//能获取到IOC容器正在使用的beanFactory</span></span><br><span class=\"line\">\t\tConfigurableListableBeanFactory beanFactory = context.getBeanFactory();</span><br><span class=\"line\">\t\t<span class=\"comment\">//获取当前环境变量(包括我们操作系统是WIN还是LINUX??)</span></span><br><span class=\"line\">\t\tEnvironment environment = context.getEnvironment();</span><br><span class=\"line\">\t\tString os_name = environment.getProperty(<span class=\"string\">\"os.name\"</span>);</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span>(os_name.contains(<span class=\"string\">\"linux\"</span>))&#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">return</span> <span class=\"keyword\">true</span>;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"keyword\">false</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>定义Bean时加上注解<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Conditional</span>(WinCondition.class)</span><br><span class=\"line\"><span class=\"meta\">@Bean</span>(<span class=\"string\">\"lison\"</span>)</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> Person <span class=\"title\">lison</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"keyword\">new</span> Person();</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"BeanFactory-和-FactoryBean-的区别\"><a href=\"#BeanFactory-和-FactoryBean-的区别\" class=\"headerlink\" title=\"BeanFactory 和 FactoryBean 的区别\"></a>BeanFactory 和 FactoryBean 的区别</h3><ul>\n<li>FactoryBean ： 把我们的JAVA实例Bean通过FactoryBean注入到容器中</li>\n<li>BeanFactory ： 从容器中获取我们实例化的Bean</li>\n</ul>","more":"<h3 id=\"向IOC容器中注册Bean实例的方法\"><a href=\"#向IOC容器中注册Bean实例的方法\" class=\"headerlink\" title=\"向IOC容器中注册Bean实例的方法\"></a>向IOC容器中注册Bean实例的方法</h3><ul>\n<li>@Bean注解: [导入第三方的类或包的组件],比如Person为第三方的类, 需要在我们的IOC容器中使用</li>\n<li>包扫描+组件的标注注解(@ComponentScan:  @Controller, @Service  @Reponsitory  @ Componet),一般是针对 我们自己写的类,使用这个</li>\n<li><p>@Import:[快速给容器导入一个组件]</p>\n<ul>\n<li><p>@Import(要导入到容器中的组件):容器会自动注册这个组件,bean 的 id为全类名</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Import</span>(value = &#123; Dog.class,Cat.class&#125;)</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>实现ImportSelector接口:返回需要导入到容器的组件的全类名数组 </p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.context.annotation.ImportSelector;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.core.type.AnnotationMetadata;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">CaiImportSelector</span> <span class=\"keyword\">implements</span> <span class=\"title\">ImportSelector</span></span>&#123;</span><br><span class=\"line\">\t<span class=\"meta\">@Override</span></span><br><span class=\"line\">\t<span class=\"keyword\">public</span> String[] selectImports(AnnotationMetadata importingClassMetadata)&#123;</span><br><span class=\"line\">\t\t<span class=\"comment\">//返回全类名的bean</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"keyword\">new</span> String[]&#123;<span class=\"string\">\"com.enjoy.cap6.bean.Fish\"</span>,<span class=\"string\">\"com.enjoy.cap6.bean.Tiger\"</span>&#125;;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>实现ImportBeanDefinitionRegistrar接口:可以手动添加组件到IOC容器</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">CaiImportBeanDefinitionRegistrar</span> <span class=\"keyword\">implements</span> <span class=\"title\">ImportBeanDefinitionRegistrar</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">\t*AnnotationMetadata:当前类的注解信息</span></span><br><span class=\"line\"><span class=\"comment\">\t*BeanDefinitionRegistry:BeanDefinition注册类</span></span><br><span class=\"line\"><span class=\"comment\">\t*    把所有需要添加到容器中的bean加入;</span></span><br><span class=\"line\"><span class=\"comment\">\t*    @Scope</span></span><br><span class=\"line\"><span class=\"comment\">\t*/</span></span><br><span class=\"line\">\t<span class=\"meta\">@Override</span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">registerBeanDefinitions</span><span class=\"params\">(AnnotationMetadata importingClassMetadata, BeanDefinitionRegistry registry)</span> </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">boolean</span> bean1 = registry.containsBeanDefinition(<span class=\"string\">\"com.enjoy.cap6.bean.Dog\"</span>);</span><br><span class=\"line\">\t\t<span class=\"keyword\">boolean</span> bean2 = registry.containsBeanDefinition(<span class=\"string\">\"com.enjoy.cap6.bean.Cat\"</span>);</span><br><span class=\"line\">\t\t<span class=\"comment\">//如果Dog和Cat同时存在于我们IOC容器中,那么创建Pig类, 加入到容器</span></span><br><span class=\"line\">\t\t<span class=\"comment\">//对于我们要注册的bean, 给bean进行封装,</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span>(bean1 &amp;&amp; bean2)&#123;</span><br><span class=\"line\">\t\t\tRootBeanDefinition beanDefinition = <span class=\"keyword\">new</span> RootBeanDefinition(Pig.class);</span><br><span class=\"line\">\t\t\tregistry.registerBeanDefinition(<span class=\"string\">\"pig\"</span>, beanDefinition);</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n</li>\n<li><p>使用Spring提供的FactoryBean(工厂bean)进行注册 实现FactoryBean接口</p>\n</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.beans.factory.FactoryBean;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 注入Monkey类</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">CaiFactoryBean</span> <span class=\"keyword\">implements</span> <span class=\"title\">FactoryBean</span>&lt;<span class=\"title\">Monkey</span>&gt;</span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"meta\">@Override</span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> Monkey <span class=\"title\">getObject</span><span class=\"params\">()</span> <span class=\"keyword\">throws</span> Exception </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"keyword\">new</span> Monkey();</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"meta\">@Override</span></span><br><span class=\"line\">\t<span class=\"keyword\">public</span> Class&lt;?&gt; getObjectType() &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> Monkey.class;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"meta\">@Override</span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">isSingleton</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"keyword\">true</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>"},{"title":"Spring学习01 - 工程从XML配置到注解","_content":"\nspring基础学习\n\n## Spring 基础及组件使用01\n\n\n### 工程从XML配置到注解\n\n- 创建配置类 加上@Configuration注解 加上@ComponentScan注解 扫描指定的包 加载到IOC容器\n\n```java\n\t@Configuration\n\t@ComponentScan(value = \"com.tupelo\",useDefaultFilters = true,excludeFilters = {\n\t        @ComponentScan.Filter(type = FilterType.ANNOTATION,classes = {Controller.class})\n\t})\n\t@EnableAspectJAutoProxy\n\tpublic class MainConfig {\n\n\t    @Bean\n\t    public Person person(){\n\t        return new Person(\"jack\",20);\n\t    }\n\n\t}\n```\n<!-- more -->\n\n- 启动时加载配置类\n\n```java\n\tpublic static void main(String[] args) {\n        AnnotationConfigApplicationContext applicationContext = new AnnotationConfigApplicationContext(MainConfig.class);\n    }\n```\n\n### scop扫描规则\n\n- prototype  多实例 IOC初始化的时候不会创建类 使用的时候才创建(懒加载也是 懒加载是针对单实例bean)\n- singleton  单实例\n- request    一次请求创建一个类\n- session    同一个session创建一个类\n\n```java\n\t@Lazy\n \t// @Scope(\"prototype\")\n\t@Bean\n    public Person person(){\n        return new Person(\"jack\",20);\n    }\n\n```\n\n\n\n","source":"_posts/spring-01.md","raw":"---\ntitle: Spring学习01 - 工程从XML配置到注解\ntags:\n  - Java\n  - Spring\n---\n\nspring基础学习\n\n## Spring 基础及组件使用01\n\n\n### 工程从XML配置到注解\n\n- 创建配置类 加上@Configuration注解 加上@ComponentScan注解 扫描指定的包 加载到IOC容器\n\n```java\n\t@Configuration\n\t@ComponentScan(value = \"com.tupelo\",useDefaultFilters = true,excludeFilters = {\n\t        @ComponentScan.Filter(type = FilterType.ANNOTATION,classes = {Controller.class})\n\t})\n\t@EnableAspectJAutoProxy\n\tpublic class MainConfig {\n\n\t    @Bean\n\t    public Person person(){\n\t        return new Person(\"jack\",20);\n\t    }\n\n\t}\n```\n<!-- more -->\n\n- 启动时加载配置类\n\n```java\n\tpublic static void main(String[] args) {\n        AnnotationConfigApplicationContext applicationContext = new AnnotationConfigApplicationContext(MainConfig.class);\n    }\n```\n\n### scop扫描规则\n\n- prototype  多实例 IOC初始化的时候不会创建类 使用的时候才创建(懒加载也是 懒加载是针对单实例bean)\n- singleton  单实例\n- request    一次请求创建一个类\n- session    同一个session创建一个类\n\n```java\n\t@Lazy\n \t// @Scope(\"prototype\")\n\t@Bean\n    public Person person(){\n        return new Person(\"jack\",20);\n    }\n\n```\n\n\n\n","slug":"spring-01","published":1,"date":"2018-10-21T14:46:12.484Z","updated":"2018-12-12T16:08:42.492Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjskls6360012745brqdtn4v3","content":"<p>spring基础学习</p>\n<h2 id=\"Spring-基础及组件使用01\"><a href=\"#Spring-基础及组件使用01\" class=\"headerlink\" title=\"Spring 基础及组件使用01\"></a>Spring 基础及组件使用01</h2><h3 id=\"工程从XML配置到注解\"><a href=\"#工程从XML配置到注解\" class=\"headerlink\" title=\"工程从XML配置到注解\"></a>工程从XML配置到注解</h3><ul>\n<li>创建配置类 加上@Configuration注解 加上@ComponentScan注解 扫描指定的包 加载到IOC容器</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Configuration</span></span><br><span class=\"line\"><span class=\"meta\">@ComponentScan</span>(value = <span class=\"string\">\"com.tupelo\"</span>,useDefaultFilters = <span class=\"keyword\">true</span>,excludeFilters = &#123;</span><br><span class=\"line\">        <span class=\"meta\">@ComponentScan</span>.Filter(type = FilterType.ANNOTATION,classes = &#123;Controller.class&#125;)</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"><span class=\"meta\">@EnableAspectJAutoProxy</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MainConfig</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Bean</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> Person <span class=\"title\">person</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> Person(<span class=\"string\">\"jack\"</span>,<span class=\"number\">20</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<a id=\"more\"></a>\n<ul>\n<li>启动时加载配置类</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">       AnnotationConfigApplicationContext applicationContext = <span class=\"keyword\">new</span> AnnotationConfigApplicationContext(MainConfig.class);</span><br><span class=\"line\">   &#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"scop扫描规则\"><a href=\"#scop扫描规则\" class=\"headerlink\" title=\"scop扫描规则\"></a>scop扫描规则</h3><ul>\n<li>prototype  多实例 IOC初始化的时候不会创建类 使用的时候才创建(懒加载也是 懒加载是针对单实例bean)</li>\n<li>singleton  单实例</li>\n<li>request    一次请求创建一个类</li>\n<li>session    同一个session创建一个类</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Lazy</span></span><br><span class=\"line\">\t<span class=\"comment\">// @Scope(\"prototype\")</span></span><br><span class=\"line\"><span class=\"meta\">@Bean</span></span><br><span class=\"line\">   <span class=\"function\"><span class=\"keyword\">public</span> Person <span class=\"title\">person</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">       <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> Person(<span class=\"string\">\"jack\"</span>,<span class=\"number\">20</span>);</span><br><span class=\"line\">   &#125;</span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"<p>spring基础学习</p>\n<h2 id=\"Spring-基础及组件使用01\"><a href=\"#Spring-基础及组件使用01\" class=\"headerlink\" title=\"Spring 基础及组件使用01\"></a>Spring 基础及组件使用01</h2><h3 id=\"工程从XML配置到注解\"><a href=\"#工程从XML配置到注解\" class=\"headerlink\" title=\"工程从XML配置到注解\"></a>工程从XML配置到注解</h3><ul>\n<li>创建配置类 加上@Configuration注解 加上@ComponentScan注解 扫描指定的包 加载到IOC容器</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Configuration</span></span><br><span class=\"line\"><span class=\"meta\">@ComponentScan</span>(value = <span class=\"string\">\"com.tupelo\"</span>,useDefaultFilters = <span class=\"keyword\">true</span>,excludeFilters = &#123;</span><br><span class=\"line\">        <span class=\"meta\">@ComponentScan</span>.Filter(type = FilterType.ANNOTATION,classes = &#123;Controller.class&#125;)</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"><span class=\"meta\">@EnableAspectJAutoProxy</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MainConfig</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Bean</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> Person <span class=\"title\">person</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> Person(<span class=\"string\">\"jack\"</span>,<span class=\"number\">20</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>","more":"<ul>\n<li>启动时加载配置类</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">       AnnotationConfigApplicationContext applicationContext = <span class=\"keyword\">new</span> AnnotationConfigApplicationContext(MainConfig.class);</span><br><span class=\"line\">   &#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"scop扫描规则\"><a href=\"#scop扫描规则\" class=\"headerlink\" title=\"scop扫描规则\"></a>scop扫描规则</h3><ul>\n<li>prototype  多实例 IOC初始化的时候不会创建类 使用的时候才创建(懒加载也是 懒加载是针对单实例bean)</li>\n<li>singleton  单实例</li>\n<li>request    一次请求创建一个类</li>\n<li>session    同一个session创建一个类</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Lazy</span></span><br><span class=\"line\">\t<span class=\"comment\">// @Scope(\"prototype\")</span></span><br><span class=\"line\"><span class=\"meta\">@Bean</span></span><br><span class=\"line\">   <span class=\"function\"><span class=\"keyword\">public</span> Person <span class=\"title\">person</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">       <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> Person(<span class=\"string\">\"jack\"</span>,<span class=\"number\">20</span>);</span><br><span class=\"line\">   &#125;</span><br></pre></td></tr></table></figure>"},{"title":"Spring学习03 - bean的生命周期","_content":"\nspring基础学习\n\n### bean的生命周期\n\nbean的生命周期:指   bean创建---初始化---销毁  的过程\n\nbean的生命周期是由容器进行管理的.我们可以自定义 bean初始化和销毁方法: 容器在bean进行到当前生命周期的时候, 来调用自定义的初始化和销毁方法\n\n#### 自定义 bean初始化和销毁方法\n\n\n- 指定初始化和销毁方法 init-method和destory-mothod\n\n```java\n\t@Bean(initMethod=\"init\",destoryMothod=\"destroy\")\n\tpublic Person lison(){\n\t\treturn new Person();\n\t}\n```\n\n容器关闭时，只有单实例Bean会调用distory方法，多实例容器只负责初始化,但不会管理bean, 容器关闭不会调用销毁方法。\n\n<!-- more -->\n\n- 让Bean实现 InitializingBean 和 DisposableBean接口\n\nafterPropertiesSet()方法:当beanFactory创建好对象,且把bean所有属性设置好之后,会调这个方法,相当于初始化方法\ndestory()方法,当bean销毁时,会把单实例bean进行销毁\n\n```java\n\t@Component\n\tpublic class People implements InitializingBean,DisposableBean {\n\t    @Override\n\t    public void destroy() throws Exception {\n\t        System.out.println(\"销毁\");\n\t    }\n\n\t    @Override\n\t    public void afterPropertiesSet() throws Exception {\n\t        System.out.println(\"初始化\");\n\t    }\n\t}\n```\n\n- JSR250规则定义的注解 @PostConstruct和@PreDestroy\n\n@PostConstruct: 在Bean创建完成,且属于赋值完成后进行初始化,属于JDK规范的注解\n@PreDestroy: 在bean将被移除之前进行通知, 在容器销毁之前进行清理工作\n\n```java\n\t@Component\n\tpublic class People {\n\t    @PostConstruct\n\t    public void init(){\n\t        System.out.println(\"初始化\");\n\t    }\n\t    @PreDestroy\n\t    public void distory(){\n\t        System.out.println(\"销毁\");\n\t    }\n\t}\n```\n\n- 后置处理器BeanPostProcessor,在bean初始化之前调用进行拦截\n\n\t- postProcessBeforeInitialization():在初始化之前进行后置处理工作(在init-method之前),    \n\t- postProcessAfterInitialization():在初始化之后进行后置处理工作\n\n```java\n\t@Component\n\tpublic class People implements BeanPostProcessor {\n\t    @Nullable\n\t    @Override\n\t    public Object postProcessBeforeInitialization(Object bean, String beanName) throws BeansException {\n\t        System.out.println(\"初始化\");\n\t        return null;\n\t    }\n\n\t    @Nullable\n\t    @Override\n\t    public Object postProcessAfterInitialization(Object bean, String beanName) throws BeansException {\n\t        System.out.println(\"销毁\");\n\t        return null;\n\t    }\n\t}\n```\n\n","source":"_posts/spring-03.md","raw":"---\ntitle: Spring学习03 - bean的生命周期\ntags:\n  - Java\n  - Spring\n---\n\nspring基础学习\n\n### bean的生命周期\n\nbean的生命周期:指   bean创建---初始化---销毁  的过程\n\nbean的生命周期是由容器进行管理的.我们可以自定义 bean初始化和销毁方法: 容器在bean进行到当前生命周期的时候, 来调用自定义的初始化和销毁方法\n\n#### 自定义 bean初始化和销毁方法\n\n\n- 指定初始化和销毁方法 init-method和destory-mothod\n\n```java\n\t@Bean(initMethod=\"init\",destoryMothod=\"destroy\")\n\tpublic Person lison(){\n\t\treturn new Person();\n\t}\n```\n\n容器关闭时，只有单实例Bean会调用distory方法，多实例容器只负责初始化,但不会管理bean, 容器关闭不会调用销毁方法。\n\n<!-- more -->\n\n- 让Bean实现 InitializingBean 和 DisposableBean接口\n\nafterPropertiesSet()方法:当beanFactory创建好对象,且把bean所有属性设置好之后,会调这个方法,相当于初始化方法\ndestory()方法,当bean销毁时,会把单实例bean进行销毁\n\n```java\n\t@Component\n\tpublic class People implements InitializingBean,DisposableBean {\n\t    @Override\n\t    public void destroy() throws Exception {\n\t        System.out.println(\"销毁\");\n\t    }\n\n\t    @Override\n\t    public void afterPropertiesSet() throws Exception {\n\t        System.out.println(\"初始化\");\n\t    }\n\t}\n```\n\n- JSR250规则定义的注解 @PostConstruct和@PreDestroy\n\n@PostConstruct: 在Bean创建完成,且属于赋值完成后进行初始化,属于JDK规范的注解\n@PreDestroy: 在bean将被移除之前进行通知, 在容器销毁之前进行清理工作\n\n```java\n\t@Component\n\tpublic class People {\n\t    @PostConstruct\n\t    public void init(){\n\t        System.out.println(\"初始化\");\n\t    }\n\t    @PreDestroy\n\t    public void distory(){\n\t        System.out.println(\"销毁\");\n\t    }\n\t}\n```\n\n- 后置处理器BeanPostProcessor,在bean初始化之前调用进行拦截\n\n\t- postProcessBeforeInitialization():在初始化之前进行后置处理工作(在init-method之前),    \n\t- postProcessAfterInitialization():在初始化之后进行后置处理工作\n\n```java\n\t@Component\n\tpublic class People implements BeanPostProcessor {\n\t    @Nullable\n\t    @Override\n\t    public Object postProcessBeforeInitialization(Object bean, String beanName) throws BeansException {\n\t        System.out.println(\"初始化\");\n\t        return null;\n\t    }\n\n\t    @Nullable\n\t    @Override\n\t    public Object postProcessAfterInitialization(Object bean, String beanName) throws BeansException {\n\t        System.out.println(\"销毁\");\n\t        return null;\n\t    }\n\t}\n```\n\n","slug":"spring-03","published":1,"date":"2018-11-18T14:58:45.059Z","updated":"2018-12-12T16:08:39.299Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjskls6370014745bczv3gf6m","content":"<p>spring基础学习</p>\n<h3 id=\"bean的生命周期\"><a href=\"#bean的生命周期\" class=\"headerlink\" title=\"bean的生命周期\"></a>bean的生命周期</h3><p>bean的生命周期:指   bean创建—初始化—销毁  的过程</p>\n<p>bean的生命周期是由容器进行管理的.我们可以自定义 bean初始化和销毁方法: 容器在bean进行到当前生命周期的时候, 来调用自定义的初始化和销毁方法</p>\n<h4 id=\"自定义-bean初始化和销毁方法\"><a href=\"#自定义-bean初始化和销毁方法\" class=\"headerlink\" title=\"自定义 bean初始化和销毁方法\"></a>自定义 bean初始化和销毁方法</h4><ul>\n<li>指定初始化和销毁方法 init-method和destory-mothod</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Bean</span>(initMethod=<span class=\"string\">\"init\"</span>,destoryMothod=<span class=\"string\">\"destroy\"</span>)</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> Person <span class=\"title\">lison</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"keyword\">new</span> Person();</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>容器关闭时，只有单实例Bean会调用distory方法，多实例容器只负责初始化,但不会管理bean, 容器关闭不会调用销毁方法。</p>\n<a id=\"more\"></a>\n<ul>\n<li>让Bean实现 InitializingBean 和 DisposableBean接口</li>\n</ul>\n<p>afterPropertiesSet()方法:当beanFactory创建好对象,且把bean所有属性设置好之后,会调这个方法,相当于初始化方法<br>destory()方法,当bean销毁时,会把单实例bean进行销毁</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Component</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">People</span> <span class=\"keyword\">implements</span> <span class=\"title\">InitializingBean</span>,<span class=\"title\">DisposableBean</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">destroy</span><span class=\"params\">()</span> <span class=\"keyword\">throws</span> Exception </span>&#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"销毁\"</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">afterPropertiesSet</span><span class=\"params\">()</span> <span class=\"keyword\">throws</span> Exception </span>&#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"初始化\"</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<ul>\n<li>JSR250规则定义的注解 @PostConstruct和@PreDestroy</li>\n</ul>\n<p>@PostConstruct: 在Bean创建完成,且属于赋值完成后进行初始化,属于JDK规范的注解<br>@PreDestroy: 在bean将被移除之前进行通知, 在容器销毁之前进行清理工作</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Component</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">People</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"meta\">@PostConstruct</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">init</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"初始化\"</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"meta\">@PreDestroy</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">distory</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"销毁\"</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<ul>\n<li><p>后置处理器BeanPostProcessor,在bean初始化之前调用进行拦截</p>\n<ul>\n<li>postProcessBeforeInitialization():在初始化之前进行后置处理工作(在init-method之前),    </li>\n<li>postProcessAfterInitialization():在初始化之后进行后置处理工作</li>\n</ul>\n</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Component</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">People</span> <span class=\"keyword\">implements</span> <span class=\"title\">BeanPostProcessor</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"meta\">@Nullable</span></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> Object <span class=\"title\">postProcessBeforeInitialization</span><span class=\"params\">(Object bean, String beanName)</span> <span class=\"keyword\">throws</span> BeansException </span>&#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"初始化\"</span>);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">null</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Nullable</span></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> Object <span class=\"title\">postProcessAfterInitialization</span><span class=\"params\">(Object bean, String beanName)</span> <span class=\"keyword\">throws</span> BeansException </span>&#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"销毁\"</span>);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">null</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"<p>spring基础学习</p>\n<h3 id=\"bean的生命周期\"><a href=\"#bean的生命周期\" class=\"headerlink\" title=\"bean的生命周期\"></a>bean的生命周期</h3><p>bean的生命周期:指   bean创建—初始化—销毁  的过程</p>\n<p>bean的生命周期是由容器进行管理的.我们可以自定义 bean初始化和销毁方法: 容器在bean进行到当前生命周期的时候, 来调用自定义的初始化和销毁方法</p>\n<h4 id=\"自定义-bean初始化和销毁方法\"><a href=\"#自定义-bean初始化和销毁方法\" class=\"headerlink\" title=\"自定义 bean初始化和销毁方法\"></a>自定义 bean初始化和销毁方法</h4><ul>\n<li>指定初始化和销毁方法 init-method和destory-mothod</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Bean</span>(initMethod=<span class=\"string\">\"init\"</span>,destoryMothod=<span class=\"string\">\"destroy\"</span>)</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> Person <span class=\"title\">lison</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"keyword\">new</span> Person();</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>容器关闭时，只有单实例Bean会调用distory方法，多实例容器只负责初始化,但不会管理bean, 容器关闭不会调用销毁方法。</p>","more":"<ul>\n<li>让Bean实现 InitializingBean 和 DisposableBean接口</li>\n</ul>\n<p>afterPropertiesSet()方法:当beanFactory创建好对象,且把bean所有属性设置好之后,会调这个方法,相当于初始化方法<br>destory()方法,当bean销毁时,会把单实例bean进行销毁</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Component</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">People</span> <span class=\"keyword\">implements</span> <span class=\"title\">InitializingBean</span>,<span class=\"title\">DisposableBean</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">destroy</span><span class=\"params\">()</span> <span class=\"keyword\">throws</span> Exception </span>&#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"销毁\"</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">afterPropertiesSet</span><span class=\"params\">()</span> <span class=\"keyword\">throws</span> Exception </span>&#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"初始化\"</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<ul>\n<li>JSR250规则定义的注解 @PostConstruct和@PreDestroy</li>\n</ul>\n<p>@PostConstruct: 在Bean创建完成,且属于赋值完成后进行初始化,属于JDK规范的注解<br>@PreDestroy: 在bean将被移除之前进行通知, 在容器销毁之前进行清理工作</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Component</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">People</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"meta\">@PostConstruct</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">init</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"初始化\"</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"meta\">@PreDestroy</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">distory</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"销毁\"</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<ul>\n<li><p>后置处理器BeanPostProcessor,在bean初始化之前调用进行拦截</p>\n<ul>\n<li>postProcessBeforeInitialization():在初始化之前进行后置处理工作(在init-method之前),    </li>\n<li>postProcessAfterInitialization():在初始化之后进行后置处理工作</li>\n</ul>\n</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Component</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">People</span> <span class=\"keyword\">implements</span> <span class=\"title\">BeanPostProcessor</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"meta\">@Nullable</span></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> Object <span class=\"title\">postProcessBeforeInitialization</span><span class=\"params\">(Object bean, String beanName)</span> <span class=\"keyword\">throws</span> BeansException </span>&#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"初始化\"</span>);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">null</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Nullable</span></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> Object <span class=\"title\">postProcessAfterInitialization</span><span class=\"params\">(Object bean, String beanName)</span> <span class=\"keyword\">throws</span> BeansException </span>&#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"销毁\"</span>);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">null</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>"},{"title":"Spring学习04 - BeanPostProcessor源码分析","_content":"\nspring基础学习\n\n### 容器启动及BeanPostProcessor源码分析\n\nBeanPostProcessor原理:\n可从容器类跟进顺序为:\n```\nAnnotationConfigApplicationContext-->refresh()-->\nfinishBeanFactoryInitialization(beanFactory)--->\nbeanFactory.preInstantiateSingletons()-->\n760行getBean(beanName)--->\n199行doGetBean(name, null, null, false)-->\n317行createBean(beanName, mbd, args)-->\n501行doCreateBean(beanName, mbdToUse, args)-->\n541行createBeanInstance(beanName, mbd, args)(完成bean创建)-->\n578行populateBean(beanName, mbd, instanceWrapper)(属性赋值)-->\n579行initializeBean(beanName, exposedObject, mbd)(Bean初始化)->\n1069行到1710行,后置处理器完成对init方法的前后处理.\n```\n\ninitializeBean方法 对方法前后做处理\n```java\n{\n  applyBeanPostProcessorsBeforeInitialization(wrappedBean, beanName);\n  invokeInitMethods(beanName, wrappedBean, mbd) //执行自定义初始化\n  applyBeanPostProcessorsAfterInitialization(wrappedBean, beanName)\n}\n```\n\n\n\n\n\n\n\n\n","source":"_posts/spring-04.md","raw":"---\ntitle: Spring学习04 - BeanPostProcessor源码分析\ntags:\n  - Java\n  - Spring\n---\n\nspring基础学习\n\n### 容器启动及BeanPostProcessor源码分析\n\nBeanPostProcessor原理:\n可从容器类跟进顺序为:\n```\nAnnotationConfigApplicationContext-->refresh()-->\nfinishBeanFactoryInitialization(beanFactory)--->\nbeanFactory.preInstantiateSingletons()-->\n760行getBean(beanName)--->\n199行doGetBean(name, null, null, false)-->\n317行createBean(beanName, mbd, args)-->\n501行doCreateBean(beanName, mbdToUse, args)-->\n541行createBeanInstance(beanName, mbd, args)(完成bean创建)-->\n578行populateBean(beanName, mbd, instanceWrapper)(属性赋值)-->\n579行initializeBean(beanName, exposedObject, mbd)(Bean初始化)->\n1069行到1710行,后置处理器完成对init方法的前后处理.\n```\n\ninitializeBean方法 对方法前后做处理\n```java\n{\n  applyBeanPostProcessorsBeforeInitialization(wrappedBean, beanName);\n  invokeInitMethods(beanName, wrappedBean, mbd) //执行自定义初始化\n  applyBeanPostProcessorsAfterInitialization(wrappedBean, beanName)\n}\n```\n\n\n\n\n\n\n\n\n","slug":"spring-04","published":1,"date":"2018-11-18T15:18:22.364Z","updated":"2019-02-16T16:48:54.631Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjskls6380015745bt7c8zs5n","content":"<p>spring基础学习</p>\n<h3 id=\"容器启动及BeanPostProcessor源码分析\"><a href=\"#容器启动及BeanPostProcessor源码分析\" class=\"headerlink\" title=\"容器启动及BeanPostProcessor源码分析\"></a>容器启动及BeanPostProcessor源码分析</h3><p>BeanPostProcessor原理:<br>可从容器类跟进顺序为:<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">AnnotationConfigApplicationContext--&gt;refresh()--&gt;</span><br><span class=\"line\">finishBeanFactoryInitialization(beanFactory)---&gt;</span><br><span class=\"line\">beanFactory.preInstantiateSingletons()--&gt;</span><br><span class=\"line\">760行getBean(beanName)---&gt;</span><br><span class=\"line\">199行doGetBean(name, null, null, false)--&gt;</span><br><span class=\"line\">317行createBean(beanName, mbd, args)--&gt;</span><br><span class=\"line\">501行doCreateBean(beanName, mbdToUse, args)--&gt;</span><br><span class=\"line\">541行createBeanInstance(beanName, mbd, args)(完成bean创建)--&gt;</span><br><span class=\"line\">578行populateBean(beanName, mbd, instanceWrapper)(属性赋值)--&gt;</span><br><span class=\"line\">579行initializeBean(beanName, exposedObject, mbd)(Bean初始化)-&gt;</span><br><span class=\"line\">1069行到1710行,后置处理器完成对init方法的前后处理.</span><br></pre></td></tr></table></figure></p>\n<p>initializeBean方法 对方法前后做处理<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">  applyBeanPostProcessorsBeforeInitialization(wrappedBean, beanName);</span><br><span class=\"line\">  invokeInitMethods(beanName, wrappedBean, mbd) <span class=\"comment\">//执行自定义初始化</span></span><br><span class=\"line\">  applyBeanPostProcessorsAfterInitialization(wrappedBean, beanName)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n","site":{"data":{}},"excerpt":"","more":"<p>spring基础学习</p>\n<h3 id=\"容器启动及BeanPostProcessor源码分析\"><a href=\"#容器启动及BeanPostProcessor源码分析\" class=\"headerlink\" title=\"容器启动及BeanPostProcessor源码分析\"></a>容器启动及BeanPostProcessor源码分析</h3><p>BeanPostProcessor原理:<br>可从容器类跟进顺序为:<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">AnnotationConfigApplicationContext--&gt;refresh()--&gt;</span><br><span class=\"line\">finishBeanFactoryInitialization(beanFactory)---&gt;</span><br><span class=\"line\">beanFactory.preInstantiateSingletons()--&gt;</span><br><span class=\"line\">760行getBean(beanName)---&gt;</span><br><span class=\"line\">199行doGetBean(name, null, null, false)--&gt;</span><br><span class=\"line\">317行createBean(beanName, mbd, args)--&gt;</span><br><span class=\"line\">501行doCreateBean(beanName, mbdToUse, args)--&gt;</span><br><span class=\"line\">541行createBeanInstance(beanName, mbd, args)(完成bean创建)--&gt;</span><br><span class=\"line\">578行populateBean(beanName, mbd, instanceWrapper)(属性赋值)--&gt;</span><br><span class=\"line\">579行initializeBean(beanName, exposedObject, mbd)(Bean初始化)-&gt;</span><br><span class=\"line\">1069行到1710行,后置处理器完成对init方法的前后处理.</span><br></pre></td></tr></table></figure></p>\n<p>initializeBean方法 对方法前后做处理<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">  applyBeanPostProcessorsBeforeInitialization(wrappedBean, beanName);</span><br><span class=\"line\">  invokeInitMethods(beanName, wrappedBean, mbd) <span class=\"comment\">//执行自定义初始化</span></span><br><span class=\"line\">  applyBeanPostProcessorsAfterInitialization(wrappedBean, beanName)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n"},{"title":"Zookeeper - 入门","_content":"\nZookeeper基础命令\n\n## Zookeeper基础命令\n\n临时节点 -e\n顺序节点 -s\n删除节点 delete\n递归删除 rmr\n\n\n权限ACL\n\nschema:id:premission\n授权策略:用户授权:权限\n\nworld 默认的 全部能访问\nauth 用户密码 明文密码\ndigest 用户密码 加密密码\nip  IP\n\n权限 cdrwa 增删改查权限\n\n日志文件 记录操作\n快照文件 记录各个节点的数据\n重启是恢复数据就是从快照文件中恢复\n\n\n问题:权限不足无法删除 只有r权限\n解决:添加超级管理员\n\n\n分布式事务 一致性问题\n\n\n\n\n2PC算法\n3PC算法\npaxos算法\n\n\n服务注册于发现  使用临时节点 为了断开了之后消失\n分布式锁\n多线程 lock synchronized\n多进程 \n\n集群选举\n配置中心\n\n\n\n\n\n\n\n\n\n","source":"_posts/zk-01.md","raw":"---\ntitle: Zookeeper - 入门\ntags:\n  - Zookeeper\n---\n\nZookeeper基础命令\n\n## Zookeeper基础命令\n\n临时节点 -e\n顺序节点 -s\n删除节点 delete\n递归删除 rmr\n\n\n权限ACL\n\nschema:id:premission\n授权策略:用户授权:权限\n\nworld 默认的 全部能访问\nauth 用户密码 明文密码\ndigest 用户密码 加密密码\nip  IP\n\n权限 cdrwa 增删改查权限\n\n日志文件 记录操作\n快照文件 记录各个节点的数据\n重启是恢复数据就是从快照文件中恢复\n\n\n问题:权限不足无法删除 只有r权限\n解决:添加超级管理员\n\n\n分布式事务 一致性问题\n\n\n\n\n2PC算法\n3PC算法\npaxos算法\n\n\n服务注册于发现  使用临时节点 为了断开了之后消失\n分布式锁\n多线程 lock synchronized\n多进程 \n\n集群选举\n配置中心\n\n\n\n\n\n\n\n\n\n","slug":"zk-01","published":1,"date":"2019-01-12T16:29:26.965Z","updated":"2019-02-16T16:48:49.871Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjskls6390018745bh8o9faoj","content":"<p>Zookeeper基础命令</p>\n<h2 id=\"Zookeeper基础命令\"><a href=\"#Zookeeper基础命令\" class=\"headerlink\" title=\"Zookeeper基础命令\"></a>Zookeeper基础命令</h2><p>临时节点 -e<br>顺序节点 -s<br>删除节点 delete<br>递归删除 rmr</p>\n<p>权限ACL</p>\n<p>schema:id:premission<br>授权策略:用户授权:权限</p>\n<p>world 默认的 全部能访问<br>auth 用户密码 明文密码<br>digest 用户密码 加密密码<br>ip  IP</p>\n<p>权限 cdrwa 增删改查权限</p>\n<p>日志文件 记录操作<br>快照文件 记录各个节点的数据<br>重启是恢复数据就是从快照文件中恢复</p>\n<p>问题:权限不足无法删除 只有r权限<br>解决:添加超级管理员</p>\n<p>分布式事务 一致性问题</p>\n<p>2PC算法<br>3PC算法<br>paxos算法</p>\n<p>服务注册于发现  使用临时节点 为了断开了之后消失<br>分布式锁<br>多线程 lock synchronized<br>多进程 </p>\n<p>集群选举<br>配置中心</p>\n","site":{"data":{}},"excerpt":"","more":"<p>Zookeeper基础命令</p>\n<h2 id=\"Zookeeper基础命令\"><a href=\"#Zookeeper基础命令\" class=\"headerlink\" title=\"Zookeeper基础命令\"></a>Zookeeper基础命令</h2><p>临时节点 -e<br>顺序节点 -s<br>删除节点 delete<br>递归删除 rmr</p>\n<p>权限ACL</p>\n<p>schema:id:premission<br>授权策略:用户授权:权限</p>\n<p>world 默认的 全部能访问<br>auth 用户密码 明文密码<br>digest 用户密码 加密密码<br>ip  IP</p>\n<p>权限 cdrwa 增删改查权限</p>\n<p>日志文件 记录操作<br>快照文件 记录各个节点的数据<br>重启是恢复数据就是从快照文件中恢复</p>\n<p>问题:权限不足无法删除 只有r权限<br>解决:添加超级管理员</p>\n<p>分布式事务 一致性问题</p>\n<p>2PC算法<br>3PC算法<br>paxos算法</p>\n<p>服务注册于发现  使用临时节点 为了断开了之后消失<br>分布式锁<br>多线程 lock synchronized<br>多进程 </p>\n<p>集群选举<br>配置中心</p>\n"},{"title":"并发编程 - 线程基础、线程之间的共享和协作","_content":"\n线程基础、线程之间的共享和协作\n\n## 线程基础\n\n#### 进程和线程\n\n- 进程：程序运行资源分配的最小单位,进程内部有多个线程,会共享这个进程的资源\n- 线程：CPU调度的最小单位,必须依赖进程而存在。\n\n#### 高并发编程的意义、好处和注意事项\n\n- 好处：充分利用cpu的资源、加快用户响应的时间,程序模块化,异步化\n- 问题：  \n\t- 线程共享资源,存在冲突；  \n\t- 容易导致死锁；  \n\t- 启用太多的线程,就有搞垮机器的可能\n\t\n<!-- more -->  \n\n#### 线程实现三种方式\n\n- 继承Thread\n\n```java\n/**\n * 继承Thread\n */\nprivate static class UseExtends extends Thread{\n\t@Override\n\tpublic void run() {\n\t\tSystem.out.println(\"I am extends Thread\");\n\t}\n}\n\n```\n- 实现Runnable 无返回值\n\n```java\n/**\n * 实现Runnable接口\n */\nprivate static class UseRun implements Runnable{\n\t@Override\n\tpublic void run() {\n\t\tSystem.out.println(\"I am implements Runnable\");\n\t}\n}\n\n```\n\n- 实现Callable 又返回值\n\n```java\n/**\n * 实现Callable接口,允许有返回值\n */\nprivate static class UseCall implements Callable<String>{\n\t@Override\n\tpublic String call() throws Exception {\n\t\tSystem.out.println(\"I am implements Callable\");\n\t\treturn \"CallResult\";\n\t}\n\t\n}\n```\n\n```java\n//运行\npublic static void main(String[] args) throws InterruptedException, ExecutionException {\n\t// extends\n\tUseExtends useExtends = new UseExtends();\n\tuseExtends.start();\n\n\t// Runable\n\tUseRun useRun = new UseRun();\n\tnew Thread(useRun).start();\n\n\t// Callable\n\tUseCall useCall = new UseCall();\n\tFutureTask<String> futureTask = new FutureTask<>(useCall);\n\tnew Thread(futureTask).start();\n\tSystem.out.println(futureTask.get());\n}\n```\n\n#### 线程停止\n\n> stop(),resume(),suspend() 不建议使用了 容易造成死锁 可以使用interrupt()对线程加上中断标志 如下：\n\n\tinterrupt() 将线程中断标志位置为true\n\tisInterrupted() 判定当前线程是否处于中断状态。\n\tinterrupted() 判定当前线程是否处于中断状态,同时中断标志位改为false。\n\t方法里如果抛出InterruptedException,线程的中断标志位会被复位成false,如果确实是需要中断线程,要求我们自己在catch语句块里再次调用interrupt()。\n\n#### 线程状态\n\n![线程状态](http://image.tupelo.top/thread_status.png)\n\n\trun()和start():run方法就是普通对象的普通方法,只有调用了start()后,Java才会将线程对象和操作系统中实际的线程进行映射,再来执行run方法。  \n\tyield():把CPU时间让出来,让其他或者自己的线程执行（也就是谁先抢到谁执行） \n\twait():线程会释放锁,进入阻塞状态  \n\tnotify/notifyAll():在获取锁的状态下,唤醒wait()的线程  \n\tjoin():用来插队,线程A,执行了线程B的join方法,线程A必须要等待B执行完成了以后,线程A才能继续自己的工作\n\n> 应该尽量使用notifyAll,使用notify 只会唤醒一个 有可能发生信号丢失的的情况\n\n```\nyield() 、sleep()、wait()、notify()的区别:  \n线程在执行yield()以后,持有的锁是不释放的  \nsleep()方法被调用以后,持有的锁是不释放的  \n调动方法之前,必须要持有锁。调用了wait()方法以后,锁就会被释放,当wait方法返回的时候,线程会重新持有锁  \n调动方法之前,必须要持有锁,调用notify()方法本身不会释放锁的  \n```\n\n#### 线程间的共享\n\n- synchronized内置锁\n- volatile关键字 一个写 多个读的情况\n- ThreadLocal 线程变量\n```java\n//可以理解为 一个map,类型 Map<Thread,Integer>\nstatic ThreadLocal<Integer> threadLaocl = new ThreadLocal<Integer>(){\n\t@Override\n\tprotected Integer initialValue() {\n\t\treturn 1;\n\t}\n};\n```\n\n\n\n\n\n\n\n\n\n\n\n","source":"_posts/多线程-01.md","raw":"---\ntitle: 并发编程 - 线程基础、线程之间的共享和协作\ntags:\n  - 并发编程\n---\n\n线程基础、线程之间的共享和协作\n\n## 线程基础\n\n#### 进程和线程\n\n- 进程：程序运行资源分配的最小单位,进程内部有多个线程,会共享这个进程的资源\n- 线程：CPU调度的最小单位,必须依赖进程而存在。\n\n#### 高并发编程的意义、好处和注意事项\n\n- 好处：充分利用cpu的资源、加快用户响应的时间,程序模块化,异步化\n- 问题：  \n\t- 线程共享资源,存在冲突；  \n\t- 容易导致死锁；  \n\t- 启用太多的线程,就有搞垮机器的可能\n\t\n<!-- more -->  \n\n#### 线程实现三种方式\n\n- 继承Thread\n\n```java\n/**\n * 继承Thread\n */\nprivate static class UseExtends extends Thread{\n\t@Override\n\tpublic void run() {\n\t\tSystem.out.println(\"I am extends Thread\");\n\t}\n}\n\n```\n- 实现Runnable 无返回值\n\n```java\n/**\n * 实现Runnable接口\n */\nprivate static class UseRun implements Runnable{\n\t@Override\n\tpublic void run() {\n\t\tSystem.out.println(\"I am implements Runnable\");\n\t}\n}\n\n```\n\n- 实现Callable 又返回值\n\n```java\n/**\n * 实现Callable接口,允许有返回值\n */\nprivate static class UseCall implements Callable<String>{\n\t@Override\n\tpublic String call() throws Exception {\n\t\tSystem.out.println(\"I am implements Callable\");\n\t\treturn \"CallResult\";\n\t}\n\t\n}\n```\n\n```java\n//运行\npublic static void main(String[] args) throws InterruptedException, ExecutionException {\n\t// extends\n\tUseExtends useExtends = new UseExtends();\n\tuseExtends.start();\n\n\t// Runable\n\tUseRun useRun = new UseRun();\n\tnew Thread(useRun).start();\n\n\t// Callable\n\tUseCall useCall = new UseCall();\n\tFutureTask<String> futureTask = new FutureTask<>(useCall);\n\tnew Thread(futureTask).start();\n\tSystem.out.println(futureTask.get());\n}\n```\n\n#### 线程停止\n\n> stop(),resume(),suspend() 不建议使用了 容易造成死锁 可以使用interrupt()对线程加上中断标志 如下：\n\n\tinterrupt() 将线程中断标志位置为true\n\tisInterrupted() 判定当前线程是否处于中断状态。\n\tinterrupted() 判定当前线程是否处于中断状态,同时中断标志位改为false。\n\t方法里如果抛出InterruptedException,线程的中断标志位会被复位成false,如果确实是需要中断线程,要求我们自己在catch语句块里再次调用interrupt()。\n\n#### 线程状态\n\n![线程状态](http://image.tupelo.top/thread_status.png)\n\n\trun()和start():run方法就是普通对象的普通方法,只有调用了start()后,Java才会将线程对象和操作系统中实际的线程进行映射,再来执行run方法。  \n\tyield():把CPU时间让出来,让其他或者自己的线程执行（也就是谁先抢到谁执行） \n\twait():线程会释放锁,进入阻塞状态  \n\tnotify/notifyAll():在获取锁的状态下,唤醒wait()的线程  \n\tjoin():用来插队,线程A,执行了线程B的join方法,线程A必须要等待B执行完成了以后,线程A才能继续自己的工作\n\n> 应该尽量使用notifyAll,使用notify 只会唤醒一个 有可能发生信号丢失的的情况\n\n```\nyield() 、sleep()、wait()、notify()的区别:  \n线程在执行yield()以后,持有的锁是不释放的  \nsleep()方法被调用以后,持有的锁是不释放的  \n调动方法之前,必须要持有锁。调用了wait()方法以后,锁就会被释放,当wait方法返回的时候,线程会重新持有锁  \n调动方法之前,必须要持有锁,调用notify()方法本身不会释放锁的  \n```\n\n#### 线程间的共享\n\n- synchronized内置锁\n- volatile关键字 一个写 多个读的情况\n- ThreadLocal 线程变量\n```java\n//可以理解为 一个map,类型 Map<Thread,Integer>\nstatic ThreadLocal<Integer> threadLaocl = new ThreadLocal<Integer>(){\n\t@Override\n\tprotected Integer initialValue() {\n\t\treturn 1;\n\t}\n};\n```\n\n\n\n\n\n\n\n\n\n\n\n","slug":"多线程-01","published":1,"date":"2019-02-15T14:17:57.836Z","updated":"2019-02-25T16:37:01.796Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjskls6390019745b1skjh01j","content":"<p>线程基础、线程之间的共享和协作</p>\n<h2 id=\"线程基础\"><a href=\"#线程基础\" class=\"headerlink\" title=\"线程基础\"></a>线程基础</h2><h4 id=\"进程和线程\"><a href=\"#进程和线程\" class=\"headerlink\" title=\"进程和线程\"></a>进程和线程</h4><ul>\n<li>进程：程序运行资源分配的最小单位,进程内部有多个线程,会共享这个进程的资源</li>\n<li>线程：CPU调度的最小单位,必须依赖进程而存在。</li>\n</ul>\n<h4 id=\"高并发编程的意义、好处和注意事项\"><a href=\"#高并发编程的意义、好处和注意事项\" class=\"headerlink\" title=\"高并发编程的意义、好处和注意事项\"></a>高并发编程的意义、好处和注意事项</h4><ul>\n<li>好处：充分利用cpu的资源、加快用户响应的时间,程序模块化,异步化</li>\n<li>问题：  <ul>\n<li>线程共享资源,存在冲突；  </li>\n<li>容易导致死锁；  </li>\n<li>启用太多的线程,就有搞垮机器的可能</li>\n</ul>\n</li>\n</ul>\n<a id=\"more\"></a>  \n<h4 id=\"线程实现三种方式\"><a href=\"#线程实现三种方式\" class=\"headerlink\" title=\"线程实现三种方式\"></a>线程实现三种方式</h4><ul>\n<li>继承Thread</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 继承Thread</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">UseExtends</span> <span class=\"keyword\">extends</span> <span class=\"title\">Thread</span></span>&#123;</span><br><span class=\"line\">\t<span class=\"meta\">@Override</span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">run</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\t\tSystem.out.println(<span class=\"string\">\"I am extends Thread\"</span>);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<ul>\n<li>实现Runnable 无返回值</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 实现Runnable接口</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">UseRun</span> <span class=\"keyword\">implements</span> <span class=\"title\">Runnable</span></span>&#123;</span><br><span class=\"line\">\t<span class=\"meta\">@Override</span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">run</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\t\tSystem.out.println(<span class=\"string\">\"I am implements Runnable\"</span>);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<ul>\n<li>实现Callable 又返回值</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 实现Callable接口,允许有返回值</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">UseCall</span> <span class=\"keyword\">implements</span> <span class=\"title\">Callable</span>&lt;<span class=\"title\">String</span>&gt;</span>&#123;</span><br><span class=\"line\">\t<span class=\"meta\">@Override</span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">call</span><span class=\"params\">()</span> <span class=\"keyword\">throws</span> Exception </span>&#123;</span><br><span class=\"line\">\t\tSystem.out.println(<span class=\"string\">\"I am implements Callable\"</span>);</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"string\">\"CallResult\"</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//运行</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> <span class=\"keyword\">throws</span> InterruptedException, ExecutionException </span>&#123;</span><br><span class=\"line\">\t<span class=\"comment\">// extends</span></span><br><span class=\"line\">\tUseExtends useExtends = <span class=\"keyword\">new</span> UseExtends();</span><br><span class=\"line\">\tuseExtends.start();</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">// Runable</span></span><br><span class=\"line\">\tUseRun useRun = <span class=\"keyword\">new</span> UseRun();</span><br><span class=\"line\">\t<span class=\"keyword\">new</span> Thread(useRun).start();</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">// Callable</span></span><br><span class=\"line\">\tUseCall useCall = <span class=\"keyword\">new</span> UseCall();</span><br><span class=\"line\">\tFutureTask&lt;String&gt; futureTask = <span class=\"keyword\">new</span> FutureTask&lt;&gt;(useCall);</span><br><span class=\"line\">\t<span class=\"keyword\">new</span> Thread(futureTask).start();</span><br><span class=\"line\">\tSystem.out.println(futureTask.get());</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"线程停止\"><a href=\"#线程停止\" class=\"headerlink\" title=\"线程停止\"></a>线程停止</h4><blockquote>\n<p>stop(),resume(),suspend() 不建议使用了 容易造成死锁 可以使用interrupt()对线程加上中断标志 如下：</p>\n</blockquote>\n<pre><code>interrupt() 将线程中断标志位置为true\nisInterrupted() 判定当前线程是否处于中断状态。\ninterrupted() 判定当前线程是否处于中断状态,同时中断标志位改为false。\n方法里如果抛出InterruptedException,线程的中断标志位会被复位成false,如果确实是需要中断线程,要求我们自己在catch语句块里再次调用interrupt()。\n</code></pre><h4 id=\"线程状态\"><a href=\"#线程状态\" class=\"headerlink\" title=\"线程状态\"></a>线程状态</h4><p><img src=\"http://image.tupelo.top/thread_status.png\" alt=\"线程状态\"></p>\n<pre><code>run()和start():run方法就是普通对象的普通方法,只有调用了start()后,Java才会将线程对象和操作系统中实际的线程进行映射,再来执行run方法。  \nyield():把CPU时间让出来,让其他或者自己的线程执行（也就是谁先抢到谁执行） \nwait():线程会释放锁,进入阻塞状态  \nnotify/notifyAll():在获取锁的状态下,唤醒wait()的线程  \njoin():用来插队,线程A,执行了线程B的join方法,线程A必须要等待B执行完成了以后,线程A才能继续自己的工作\n</code></pre><blockquote>\n<p>应该尽量使用notifyAll,使用notify 只会唤醒一个 有可能发生信号丢失的的情况</p>\n</blockquote>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">yield() 、sleep()、wait()、notify()的区别:  </span><br><span class=\"line\">线程在执行yield()以后,持有的锁是不释放的  </span><br><span class=\"line\">sleep()方法被调用以后,持有的锁是不释放的  </span><br><span class=\"line\">调动方法之前,必须要持有锁。调用了wait()方法以后,锁就会被释放,当wait方法返回的时候,线程会重新持有锁  </span><br><span class=\"line\">调动方法之前,必须要持有锁,调用notify()方法本身不会释放锁的</span><br></pre></td></tr></table></figure>\n<h4 id=\"线程间的共享\"><a href=\"#线程间的共享\" class=\"headerlink\" title=\"线程间的共享\"></a>线程间的共享</h4><ul>\n<li>synchronized内置锁</li>\n<li>volatile关键字 一个写 多个读的情况</li>\n<li>ThreadLocal 线程变量<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//可以理解为 一个map,类型 Map&lt;Thread,Integer&gt;</span></span><br><span class=\"line\"><span class=\"keyword\">static</span> ThreadLocal&lt;Integer&gt; threadLaocl = <span class=\"keyword\">new</span> ThreadLocal&lt;Integer&gt;()&#123;</span><br><span class=\"line\">\t<span class=\"meta\">@Override</span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">protected</span> Integer <span class=\"title\">initialValue</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"number\">1</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n","site":{"data":{}},"excerpt":"<p>线程基础、线程之间的共享和协作</p>\n<h2 id=\"线程基础\"><a href=\"#线程基础\" class=\"headerlink\" title=\"线程基础\"></a>线程基础</h2><h4 id=\"进程和线程\"><a href=\"#进程和线程\" class=\"headerlink\" title=\"进程和线程\"></a>进程和线程</h4><ul>\n<li>进程：程序运行资源分配的最小单位,进程内部有多个线程,会共享这个进程的资源</li>\n<li>线程：CPU调度的最小单位,必须依赖进程而存在。</li>\n</ul>\n<h4 id=\"高并发编程的意义、好处和注意事项\"><a href=\"#高并发编程的意义、好处和注意事项\" class=\"headerlink\" title=\"高并发编程的意义、好处和注意事项\"></a>高并发编程的意义、好处和注意事项</h4><ul>\n<li>好处：充分利用cpu的资源、加快用户响应的时间,程序模块化,异步化</li>\n<li>问题：  <ul>\n<li>线程共享资源,存在冲突；  </li>\n<li>容易导致死锁；  </li>\n<li>启用太多的线程,就有搞垮机器的可能</li>\n</ul>\n</li>\n</ul>","more":"<h4 id=\"线程实现三种方式\"><a href=\"#线程实现三种方式\" class=\"headerlink\" title=\"线程实现三种方式\"></a>线程实现三种方式</h4><ul>\n<li>继承Thread</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 继承Thread</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">UseExtends</span> <span class=\"keyword\">extends</span> <span class=\"title\">Thread</span></span>&#123;</span><br><span class=\"line\">\t<span class=\"meta\">@Override</span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">run</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\t\tSystem.out.println(<span class=\"string\">\"I am extends Thread\"</span>);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<ul>\n<li>实现Runnable 无返回值</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 实现Runnable接口</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">UseRun</span> <span class=\"keyword\">implements</span> <span class=\"title\">Runnable</span></span>&#123;</span><br><span class=\"line\">\t<span class=\"meta\">@Override</span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">run</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\t\tSystem.out.println(<span class=\"string\">\"I am implements Runnable\"</span>);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<ul>\n<li>实现Callable 又返回值</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 实现Callable接口,允许有返回值</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">UseCall</span> <span class=\"keyword\">implements</span> <span class=\"title\">Callable</span>&lt;<span class=\"title\">String</span>&gt;</span>&#123;</span><br><span class=\"line\">\t<span class=\"meta\">@Override</span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">call</span><span class=\"params\">()</span> <span class=\"keyword\">throws</span> Exception </span>&#123;</span><br><span class=\"line\">\t\tSystem.out.println(<span class=\"string\">\"I am implements Callable\"</span>);</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"string\">\"CallResult\"</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//运行</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> <span class=\"keyword\">throws</span> InterruptedException, ExecutionException </span>&#123;</span><br><span class=\"line\">\t<span class=\"comment\">// extends</span></span><br><span class=\"line\">\tUseExtends useExtends = <span class=\"keyword\">new</span> UseExtends();</span><br><span class=\"line\">\tuseExtends.start();</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">// Runable</span></span><br><span class=\"line\">\tUseRun useRun = <span class=\"keyword\">new</span> UseRun();</span><br><span class=\"line\">\t<span class=\"keyword\">new</span> Thread(useRun).start();</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">// Callable</span></span><br><span class=\"line\">\tUseCall useCall = <span class=\"keyword\">new</span> UseCall();</span><br><span class=\"line\">\tFutureTask&lt;String&gt; futureTask = <span class=\"keyword\">new</span> FutureTask&lt;&gt;(useCall);</span><br><span class=\"line\">\t<span class=\"keyword\">new</span> Thread(futureTask).start();</span><br><span class=\"line\">\tSystem.out.println(futureTask.get());</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"线程停止\"><a href=\"#线程停止\" class=\"headerlink\" title=\"线程停止\"></a>线程停止</h4><blockquote>\n<p>stop(),resume(),suspend() 不建议使用了 容易造成死锁 可以使用interrupt()对线程加上中断标志 如下：</p>\n</blockquote>\n<pre><code>interrupt() 将线程中断标志位置为true\nisInterrupted() 判定当前线程是否处于中断状态。\ninterrupted() 判定当前线程是否处于中断状态,同时中断标志位改为false。\n方法里如果抛出InterruptedException,线程的中断标志位会被复位成false,如果确实是需要中断线程,要求我们自己在catch语句块里再次调用interrupt()。\n</code></pre><h4 id=\"线程状态\"><a href=\"#线程状态\" class=\"headerlink\" title=\"线程状态\"></a>线程状态</h4><p><img src=\"http://image.tupelo.top/thread_status.png\" alt=\"线程状态\"></p>\n<pre><code>run()和start():run方法就是普通对象的普通方法,只有调用了start()后,Java才会将线程对象和操作系统中实际的线程进行映射,再来执行run方法。  \nyield():把CPU时间让出来,让其他或者自己的线程执行（也就是谁先抢到谁执行） \nwait():线程会释放锁,进入阻塞状态  \nnotify/notifyAll():在获取锁的状态下,唤醒wait()的线程  \njoin():用来插队,线程A,执行了线程B的join方法,线程A必须要等待B执行完成了以后,线程A才能继续自己的工作\n</code></pre><blockquote>\n<p>应该尽量使用notifyAll,使用notify 只会唤醒一个 有可能发生信号丢失的的情况</p>\n</blockquote>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">yield() 、sleep()、wait()、notify()的区别:  </span><br><span class=\"line\">线程在执行yield()以后,持有的锁是不释放的  </span><br><span class=\"line\">sleep()方法被调用以后,持有的锁是不释放的  </span><br><span class=\"line\">调动方法之前,必须要持有锁。调用了wait()方法以后,锁就会被释放,当wait方法返回的时候,线程会重新持有锁  </span><br><span class=\"line\">调动方法之前,必须要持有锁,调用notify()方法本身不会释放锁的</span><br></pre></td></tr></table></figure>\n<h4 id=\"线程间的共享\"><a href=\"#线程间的共享\" class=\"headerlink\" title=\"线程间的共享\"></a>线程间的共享</h4><ul>\n<li>synchronized内置锁</li>\n<li>volatile关键字 一个写 多个读的情况</li>\n<li>ThreadLocal 线程变量<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//可以理解为 一个map,类型 Map&lt;Thread,Integer&gt;</span></span><br><span class=\"line\"><span class=\"keyword\">static</span> ThreadLocal&lt;Integer&gt; threadLaocl = <span class=\"keyword\">new</span> ThreadLocal&lt;Integer&gt;()&#123;</span><br><span class=\"line\">\t<span class=\"meta\">@Override</span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">protected</span> Integer <span class=\"title\">initialValue</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"number\">1</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n</li>\n</ul>"},{"title":"并发编程 - 线程的并发工具类","_content":"\n线程的并发工具类\n\n## 线程的并发工具类\n\n- Fork-Join:分治思想\n- CountDownLatch:是一组线程等待其他的线程完成工作以后在执行,加强版join await用来等待,countDown负责计数器的减1\n- CyclicBarrier: 让一组线程达到某个屏障,被阻塞,一直到组内最后一个线程达到屏障时,屏障开放,所有被阻塞的线程会继续运行\n\t- countdownlatch放行由第三者控制,CyclicBarrier放行由一组线程本身控制\n\t- countdownlatch放行条件》=线程数,CyclicBarrier放行条件=线程数\n- Semaphore:信号量\n- Exchange:交换\n- Callable、Future和FutureTask \n\n<!-- more -->  \n\n#### Fork-Join\n\n> 继承 RecursiveAction/RecursiveTask/ForkJoinTask,重写compute方法\n\n![Fork-Join](http://image.tupelo.top/forkJoin.jpeg)\n\n```java\n/**\n *类说明：遍历指定目录（含子目录）找寻指定类型文件\n */\npublic class FindDirsFiles extends RecursiveAction{\n    private File path;//当前任务需要搜寻的目录\n    public FindDirsFiles(File path) {\n        this.path = path;\n    }\n\n    public static void main(String [] args){\n        try {\n            // 用一个 ForkJoinPool 实例调度总任务\n            ForkJoinPool pool = new ForkJoinPool();\n            FindDirsFiles task = new FindDirsFiles(new File(\"F:/\"));\n\n            pool.execute(task);//异步调用\n            // pool.invokeAll(task);\n            System.out.println(\"Task is Running......\");\n            Thread.sleep(1);\n            int otherWork = 0;\n            System.out.println(\"Main Thread done sth......,otherWork=\"+otherWork);\n            task.join();//阻塞的方法\n            System.out.println(\"Task end\");\n        } catch (Exception e) {\n            e.printStackTrace();\n        }\n    }\n\t@Override\n\tprotected void compute() {\n\t\tList<FindDirsFiles> subTasks = new ArrayList<>();\n\t\tFile[] files = path.listFiles();\n\t\tif(files!=null) {\n\t\t\tfor(File file:files) {\n\t\t\t\tif(file.isDirectory()) {\n\t\t\t\t\tsubTasks.add(new FindDirsFiles(file));\n\t\t\t\t}else {\n\t\t\t\t\t//遇到文件，检查\n\t\t\t\t\tif(file.getAbsolutePath().endsWith(\"txt\")) {\n\t\t\t\t\t\tSystem.out.println(\"文件：\"+file.getAbsolutePath());\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\tif(!subTasks.isEmpty()) {\n\t\t\t\tfor(FindDirsFiles subTask:invokeAll(subTasks)) {\n\t\t\t\t\tsubTask.join();//等待子任务执行完成\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n}\n```\n\n#### CountDownLatch\n\n```java\n// 设置等待次数\nCountDownLatch latch = new CountDownLatch(1);\n\n// 其他线程做完后次数减1\nlatch.countDown();\n\n// 阻塞 latch 次数为0时执行\nlatch.await();\n```\n\n#### CyclicBarrier \n\n```java\n// 设置放开次数\nCyclicBarrier barrier = new CyclicBarrier(4,new CollectThread());\n\n// 阻塞住 达到设置放开次数开放次数是会继续执行\nbarrier.await();\n```\n\n#### Semaphore\n\n```java\n//定义信号量\nSemaphore semaphore=new Semaphore(3);\n\n// 闸门 判断是否有信号量是否还有 没有就阻塞\nsemaphore.acquire();\n\n// 可用信号量\nsemaphore.availablePermits();\n\n// 释放信号量\nsemaphore.release();\n```\n\n#### Callable、Future和FutureTask\n\n![Callable、Future和FutureTask](http://image.tupelo.top/Callable.png)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n","source":"_posts/多线程-02.md","raw":"---\ntitle: 并发编程 - 线程的并发工具类\ntags:\n  - 并发编程\n---\n\n线程的并发工具类\n\n## 线程的并发工具类\n\n- Fork-Join:分治思想\n- CountDownLatch:是一组线程等待其他的线程完成工作以后在执行,加强版join await用来等待,countDown负责计数器的减1\n- CyclicBarrier: 让一组线程达到某个屏障,被阻塞,一直到组内最后一个线程达到屏障时,屏障开放,所有被阻塞的线程会继续运行\n\t- countdownlatch放行由第三者控制,CyclicBarrier放行由一组线程本身控制\n\t- countdownlatch放行条件》=线程数,CyclicBarrier放行条件=线程数\n- Semaphore:信号量\n- Exchange:交换\n- Callable、Future和FutureTask \n\n<!-- more -->  \n\n#### Fork-Join\n\n> 继承 RecursiveAction/RecursiveTask/ForkJoinTask,重写compute方法\n\n![Fork-Join](http://image.tupelo.top/forkJoin.jpeg)\n\n```java\n/**\n *类说明：遍历指定目录（含子目录）找寻指定类型文件\n */\npublic class FindDirsFiles extends RecursiveAction{\n    private File path;//当前任务需要搜寻的目录\n    public FindDirsFiles(File path) {\n        this.path = path;\n    }\n\n    public static void main(String [] args){\n        try {\n            // 用一个 ForkJoinPool 实例调度总任务\n            ForkJoinPool pool = new ForkJoinPool();\n            FindDirsFiles task = new FindDirsFiles(new File(\"F:/\"));\n\n            pool.execute(task);//异步调用\n            // pool.invokeAll(task);\n            System.out.println(\"Task is Running......\");\n            Thread.sleep(1);\n            int otherWork = 0;\n            System.out.println(\"Main Thread done sth......,otherWork=\"+otherWork);\n            task.join();//阻塞的方法\n            System.out.println(\"Task end\");\n        } catch (Exception e) {\n            e.printStackTrace();\n        }\n    }\n\t@Override\n\tprotected void compute() {\n\t\tList<FindDirsFiles> subTasks = new ArrayList<>();\n\t\tFile[] files = path.listFiles();\n\t\tif(files!=null) {\n\t\t\tfor(File file:files) {\n\t\t\t\tif(file.isDirectory()) {\n\t\t\t\t\tsubTasks.add(new FindDirsFiles(file));\n\t\t\t\t}else {\n\t\t\t\t\t//遇到文件，检查\n\t\t\t\t\tif(file.getAbsolutePath().endsWith(\"txt\")) {\n\t\t\t\t\t\tSystem.out.println(\"文件：\"+file.getAbsolutePath());\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\tif(!subTasks.isEmpty()) {\n\t\t\t\tfor(FindDirsFiles subTask:invokeAll(subTasks)) {\n\t\t\t\t\tsubTask.join();//等待子任务执行完成\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n}\n```\n\n#### CountDownLatch\n\n```java\n// 设置等待次数\nCountDownLatch latch = new CountDownLatch(1);\n\n// 其他线程做完后次数减1\nlatch.countDown();\n\n// 阻塞 latch 次数为0时执行\nlatch.await();\n```\n\n#### CyclicBarrier \n\n```java\n// 设置放开次数\nCyclicBarrier barrier = new CyclicBarrier(4,new CollectThread());\n\n// 阻塞住 达到设置放开次数开放次数是会继续执行\nbarrier.await();\n```\n\n#### Semaphore\n\n```java\n//定义信号量\nSemaphore semaphore=new Semaphore(3);\n\n// 闸门 判断是否有信号量是否还有 没有就阻塞\nsemaphore.acquire();\n\n// 可用信号量\nsemaphore.availablePermits();\n\n// 释放信号量\nsemaphore.release();\n```\n\n#### Callable、Future和FutureTask\n\n![Callable、Future和FutureTask](http://image.tupelo.top/Callable.png)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n","slug":"多线程-02","published":1,"date":"2019-02-25T16:33:28.959Z","updated":"2019-02-25T17:14:25.250Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjskls63b001c745b7tmdd3ej","content":"<p>线程的并发工具类</p>\n<h2 id=\"线程的并发工具类\"><a href=\"#线程的并发工具类\" class=\"headerlink\" title=\"线程的并发工具类\"></a>线程的并发工具类</h2><ul>\n<li>Fork-Join:分治思想</li>\n<li>CountDownLatch:是一组线程等待其他的线程完成工作以后在执行,加强版join await用来等待,countDown负责计数器的减1</li>\n<li>CyclicBarrier: 让一组线程达到某个屏障,被阻塞,一直到组内最后一个线程达到屏障时,屏障开放,所有被阻塞的线程会继续运行<ul>\n<li>countdownlatch放行由第三者控制,CyclicBarrier放行由一组线程本身控制</li>\n<li>countdownlatch放行条件》=线程数,CyclicBarrier放行条件=线程数</li>\n</ul>\n</li>\n<li>Semaphore:信号量</li>\n<li>Exchange:交换</li>\n<li>Callable、Future和FutureTask </li>\n</ul>\n<a id=\"more\"></a>  \n<h4 id=\"Fork-Join\"><a href=\"#Fork-Join\" class=\"headerlink\" title=\"Fork-Join\"></a>Fork-Join</h4><blockquote>\n<p>继承 RecursiveAction/RecursiveTask/ForkJoinTask,重写compute方法</p>\n</blockquote>\n<p><img src=\"http://image.tupelo.top/forkJoin.jpeg\" alt=\"Fork-Join\"></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> *类说明：遍历指定目录（含子目录）找寻指定类型文件</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">FindDirsFiles</span> <span class=\"keyword\">extends</span> <span class=\"title\">RecursiveAction</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> File path;<span class=\"comment\">//当前任务需要搜寻的目录</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">FindDirsFiles</span><span class=\"params\">(File path)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.path = path;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String [] args)</span></span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">            <span class=\"comment\">// 用一个 ForkJoinPool 实例调度总任务</span></span><br><span class=\"line\">            ForkJoinPool pool = <span class=\"keyword\">new</span> ForkJoinPool();</span><br><span class=\"line\">            FindDirsFiles task = <span class=\"keyword\">new</span> FindDirsFiles(<span class=\"keyword\">new</span> File(<span class=\"string\">\"F:/\"</span>));</span><br><span class=\"line\"></span><br><span class=\"line\">            pool.execute(task);<span class=\"comment\">//异步调用</span></span><br><span class=\"line\">            <span class=\"comment\">// pool.invokeAll(task);</span></span><br><span class=\"line\">            System.out.println(<span class=\"string\">\"Task is Running......\"</span>);</span><br><span class=\"line\">            Thread.sleep(<span class=\"number\">1</span>);</span><br><span class=\"line\">            <span class=\"keyword\">int</span> otherWork = <span class=\"number\">0</span>;</span><br><span class=\"line\">            System.out.println(<span class=\"string\">\"Main Thread done sth......,otherWork=\"</span>+otherWork);</span><br><span class=\"line\">            task.join();<span class=\"comment\">//阻塞的方法</span></span><br><span class=\"line\">            System.out.println(<span class=\"string\">\"Task end\"</span>);</span><br><span class=\"line\">        &#125; <span class=\"keyword\">catch</span> (Exception e) &#123;</span><br><span class=\"line\">            e.printStackTrace();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">\t<span class=\"meta\">@Override</span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title\">compute</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\t\tList&lt;FindDirsFiles&gt; subTasks = <span class=\"keyword\">new</span> ArrayList&lt;&gt;();</span><br><span class=\"line\">\t\tFile[] files = path.listFiles();</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span>(files!=<span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">for</span>(File file:files) &#123;</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">if</span>(file.isDirectory()) &#123;</span><br><span class=\"line\">\t\t\t\t\tsubTasks.add(<span class=\"keyword\">new</span> FindDirsFiles(file));</span><br><span class=\"line\">\t\t\t\t&#125;<span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">\t\t\t\t\t<span class=\"comment\">//遇到文件，检查</span></span><br><span class=\"line\">\t\t\t\t\t<span class=\"keyword\">if</span>(file.getAbsolutePath().endsWith(<span class=\"string\">\"txt\"</span>)) &#123;</span><br><span class=\"line\">\t\t\t\t\t\tSystem.out.println(<span class=\"string\">\"文件：\"</span>+file.getAbsolutePath());</span><br><span class=\"line\">\t\t\t\t\t&#125;</span><br><span class=\"line\">\t\t\t\t&#125;</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span>(!subTasks.isEmpty()) &#123;</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">for</span>(FindDirsFiles subTask:invokeAll(subTasks)) &#123;</span><br><span class=\"line\">\t\t\t\t\tsubTask.join();<span class=\"comment\">//等待子任务执行完成</span></span><br><span class=\"line\">\t\t\t\t&#125;</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"CountDownLatch\"><a href=\"#CountDownLatch\" class=\"headerlink\" title=\"CountDownLatch\"></a>CountDownLatch</h4><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 设置等待次数</span></span><br><span class=\"line\">CountDownLatch latch = <span class=\"keyword\">new</span> CountDownLatch(<span class=\"number\">1</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 其他线程做完后次数减1</span></span><br><span class=\"line\">latch.countDown();</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 阻塞 latch 次数为0时执行</span></span><br><span class=\"line\">latch.await();</span><br></pre></td></tr></table></figure>\n<h4 id=\"CyclicBarrier\"><a href=\"#CyclicBarrier\" class=\"headerlink\" title=\"CyclicBarrier\"></a>CyclicBarrier</h4><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 设置放开次数</span></span><br><span class=\"line\">CyclicBarrier barrier = <span class=\"keyword\">new</span> CyclicBarrier(<span class=\"number\">4</span>,<span class=\"keyword\">new</span> CollectThread());</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 阻塞住 达到设置放开次数开放次数是会继续执行</span></span><br><span class=\"line\">barrier.await();</span><br></pre></td></tr></table></figure>\n<h4 id=\"Semaphore\"><a href=\"#Semaphore\" class=\"headerlink\" title=\"Semaphore\"></a>Semaphore</h4><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//定义信号量</span></span><br><span class=\"line\">Semaphore semaphore=<span class=\"keyword\">new</span> Semaphore(<span class=\"number\">3</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 闸门 判断是否有信号量是否还有 没有就阻塞</span></span><br><span class=\"line\">semaphore.acquire();</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 可用信号量</span></span><br><span class=\"line\">semaphore.availablePermits();</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 释放信号量</span></span><br><span class=\"line\">semaphore.release();</span><br></pre></td></tr></table></figure>\n<h4 id=\"Callable、Future和FutureTask\"><a href=\"#Callable、Future和FutureTask\" class=\"headerlink\" title=\"Callable、Future和FutureTask\"></a>Callable、Future和FutureTask</h4><p><img src=\"http://image.tupelo.top/Callable.png\" alt=\"Callable、Future和FutureTask\"></p>\n","site":{"data":{}},"excerpt":"<p>线程的并发工具类</p>\n<h2 id=\"线程的并发工具类\"><a href=\"#线程的并发工具类\" class=\"headerlink\" title=\"线程的并发工具类\"></a>线程的并发工具类</h2><ul>\n<li>Fork-Join:分治思想</li>\n<li>CountDownLatch:是一组线程等待其他的线程完成工作以后在执行,加强版join await用来等待,countDown负责计数器的减1</li>\n<li>CyclicBarrier: 让一组线程达到某个屏障,被阻塞,一直到组内最后一个线程达到屏障时,屏障开放,所有被阻塞的线程会继续运行<ul>\n<li>countdownlatch放行由第三者控制,CyclicBarrier放行由一组线程本身控制</li>\n<li>countdownlatch放行条件》=线程数,CyclicBarrier放行条件=线程数</li>\n</ul>\n</li>\n<li>Semaphore:信号量</li>\n<li>Exchange:交换</li>\n<li>Callable、Future和FutureTask </li>\n</ul>","more":"<h4 id=\"Fork-Join\"><a href=\"#Fork-Join\" class=\"headerlink\" title=\"Fork-Join\"></a>Fork-Join</h4><blockquote>\n<p>继承 RecursiveAction/RecursiveTask/ForkJoinTask,重写compute方法</p>\n</blockquote>\n<p><img src=\"http://image.tupelo.top/forkJoin.jpeg\" alt=\"Fork-Join\"></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> *类说明：遍历指定目录（含子目录）找寻指定类型文件</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">FindDirsFiles</span> <span class=\"keyword\">extends</span> <span class=\"title\">RecursiveAction</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> File path;<span class=\"comment\">//当前任务需要搜寻的目录</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">FindDirsFiles</span><span class=\"params\">(File path)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.path = path;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String [] args)</span></span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">            <span class=\"comment\">// 用一个 ForkJoinPool 实例调度总任务</span></span><br><span class=\"line\">            ForkJoinPool pool = <span class=\"keyword\">new</span> ForkJoinPool();</span><br><span class=\"line\">            FindDirsFiles task = <span class=\"keyword\">new</span> FindDirsFiles(<span class=\"keyword\">new</span> File(<span class=\"string\">\"F:/\"</span>));</span><br><span class=\"line\"></span><br><span class=\"line\">            pool.execute(task);<span class=\"comment\">//异步调用</span></span><br><span class=\"line\">            <span class=\"comment\">// pool.invokeAll(task);</span></span><br><span class=\"line\">            System.out.println(<span class=\"string\">\"Task is Running......\"</span>);</span><br><span class=\"line\">            Thread.sleep(<span class=\"number\">1</span>);</span><br><span class=\"line\">            <span class=\"keyword\">int</span> otherWork = <span class=\"number\">0</span>;</span><br><span class=\"line\">            System.out.println(<span class=\"string\">\"Main Thread done sth......,otherWork=\"</span>+otherWork);</span><br><span class=\"line\">            task.join();<span class=\"comment\">//阻塞的方法</span></span><br><span class=\"line\">            System.out.println(<span class=\"string\">\"Task end\"</span>);</span><br><span class=\"line\">        &#125; <span class=\"keyword\">catch</span> (Exception e) &#123;</span><br><span class=\"line\">            e.printStackTrace();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">\t<span class=\"meta\">@Override</span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title\">compute</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\t\tList&lt;FindDirsFiles&gt; subTasks = <span class=\"keyword\">new</span> ArrayList&lt;&gt;();</span><br><span class=\"line\">\t\tFile[] files = path.listFiles();</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span>(files!=<span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">for</span>(File file:files) &#123;</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">if</span>(file.isDirectory()) &#123;</span><br><span class=\"line\">\t\t\t\t\tsubTasks.add(<span class=\"keyword\">new</span> FindDirsFiles(file));</span><br><span class=\"line\">\t\t\t\t&#125;<span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">\t\t\t\t\t<span class=\"comment\">//遇到文件，检查</span></span><br><span class=\"line\">\t\t\t\t\t<span class=\"keyword\">if</span>(file.getAbsolutePath().endsWith(<span class=\"string\">\"txt\"</span>)) &#123;</span><br><span class=\"line\">\t\t\t\t\t\tSystem.out.println(<span class=\"string\">\"文件：\"</span>+file.getAbsolutePath());</span><br><span class=\"line\">\t\t\t\t\t&#125;</span><br><span class=\"line\">\t\t\t\t&#125;</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span>(!subTasks.isEmpty()) &#123;</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">for</span>(FindDirsFiles subTask:invokeAll(subTasks)) &#123;</span><br><span class=\"line\">\t\t\t\t\tsubTask.join();<span class=\"comment\">//等待子任务执行完成</span></span><br><span class=\"line\">\t\t\t\t&#125;</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"CountDownLatch\"><a href=\"#CountDownLatch\" class=\"headerlink\" title=\"CountDownLatch\"></a>CountDownLatch</h4><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 设置等待次数</span></span><br><span class=\"line\">CountDownLatch latch = <span class=\"keyword\">new</span> CountDownLatch(<span class=\"number\">1</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 其他线程做完后次数减1</span></span><br><span class=\"line\">latch.countDown();</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 阻塞 latch 次数为0时执行</span></span><br><span class=\"line\">latch.await();</span><br></pre></td></tr></table></figure>\n<h4 id=\"CyclicBarrier\"><a href=\"#CyclicBarrier\" class=\"headerlink\" title=\"CyclicBarrier\"></a>CyclicBarrier</h4><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 设置放开次数</span></span><br><span class=\"line\">CyclicBarrier barrier = <span class=\"keyword\">new</span> CyclicBarrier(<span class=\"number\">4</span>,<span class=\"keyword\">new</span> CollectThread());</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 阻塞住 达到设置放开次数开放次数是会继续执行</span></span><br><span class=\"line\">barrier.await();</span><br></pre></td></tr></table></figure>\n<h4 id=\"Semaphore\"><a href=\"#Semaphore\" class=\"headerlink\" title=\"Semaphore\"></a>Semaphore</h4><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//定义信号量</span></span><br><span class=\"line\">Semaphore semaphore=<span class=\"keyword\">new</span> Semaphore(<span class=\"number\">3</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 闸门 判断是否有信号量是否还有 没有就阻塞</span></span><br><span class=\"line\">semaphore.acquire();</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 可用信号量</span></span><br><span class=\"line\">semaphore.availablePermits();</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 释放信号量</span></span><br><span class=\"line\">semaphore.release();</span><br></pre></td></tr></table></figure>\n<h4 id=\"Callable、Future和FutureTask\"><a href=\"#Callable、Future和FutureTask\" class=\"headerlink\" title=\"Callable、Future和FutureTask\"></a>Callable、Future和FutureTask</h4><p><img src=\"http://image.tupelo.top/Callable.png\" alt=\"Callable、Future和FutureTask\"></p>"},{"title":"深入理解通讯协议","_content":"\n通讯协议\n\n### 网络模型\n\n七层模型\n\n- OSI模型\n    - 应用层  为应用程序提供服务\n    - 表示层  数据格式转换\n    - 会话层  建立 管理 维护会话\n    - 传输层  最重要 端对端的连接 数据可靠性传输\n    - 网络层  ip 路由\n    - 链路层  交换机\n    - 物理层  物理介质 网线等等\n\n<!-- more -->\n\n- TCP/IP模型\n    - 应用层 \n    - 传输层\n    - 网路层\n    - 链路层\n\n### TCP的3次握手\n\n- 客户端请求建立连接\n- 服务端应答 服务端建立连接\n- 客户端应答\n\n### SYN洪泛攻击\n\n>定义\n\n    通过网络服务所在的端口发送大量伪造原地址的攻击报文，发送到服务端，造成服务端上的半开连接队列被占满，从而阻止其他用户进行访问。\n>原理\n\n    攻击者客户端利用伪造的IP地址向服务端发出请求(第一次握手)，而服务端的响应(第二次握手)的报文将永远发送不到真实的客户端，\n    服务端在等待客户端的第三次握手(永远都不会有的)，\n    服务端在等待这种半开的连接过程中消耗了资源，如果有成千上万的这种连接，主机资源将被耗尽，从而达到攻击的目的。\n\n>解决方案\n\n    无效连接监控释放\n    延缓TCB分配方法\n    防火墙\n\n\n\n### TCP的4次挥手\n\n- 客户端发送关闭请求\n- 服务端关闭请求\n- 服务端发送关闭请求\n- 客户端发送关闭\n\n\n#### TCP的通讯原理\n\n>Socket套接字\n\n    TCP用主机的IP地址加上主机上的端口号作为TCP连接的端点，这种端点就叫做套接字（socket）。\n\n>TCP缓冲区\n\n    每个TCP的Socket的内核中都有一个发送缓冲区和一个接收缓冲区。\n\n>阻塞模式\n\n    接收端缓冲区为空，接收端调用read方法的线程阻塞。\n    发送端缓冲区满了或者不够大，发送端调用write方法的线程阻塞。\n\n#### TCP中的滑动窗口协议——可靠和高效的结合\n\n- 滑动窗口\n    - 发送方和接收方都会维护一个数据帧的序列，这个序列被称作窗口。\n    - 发送方的窗口大小由接收方确认。\n\n- 目的\n    - 确保数据不丢失\n        - 如果发送的数据丢失了可以重新发。\n    - 控制发送速度\n        - 控制发送速度，以免接收方的缓存不够大导\n        - 致溢出，同时控制流量也可以避免网络拥塞。\n\n滑动演示:\n>https://media.pearsoncmg.com/aw/ecs_kurose_compnetwork_7/cw/content/interactiveanimations/selective-repeat-protocol/index.html\n\n### HTTP协议\n\n```java\n//服务端\npublic static void main(String[] args) throws IOException {\n        ServerSocket serverSocket = new ServerSocket(8888);\n        System.out.println(\"服务端启动 端口8888\");\n        while (true){\n            Socket socket = serverSocket.accept();\n            BufferedReader bufferedReader = new BufferedReader(new InputStreamReader(socket.getInputStream()));\n            String buffer = null;\n            while ((buffer=bufferedReader.readLine())!=null&&!buffer.equals(\"\")){\n                System.out.println(buffer);\n            }\n            BufferedWriter bufferedWriter = new BufferedWriter(new OutputStreamWriter(socket.getOutputStream()));\n            bufferedWriter.write(\"HTTP/1.1 200 OK \\r\\n Content-Type:text/json \\r\\n charset=UTF-8 \\r\\n \\r\\n\");\n            bufferedWriter.write(\"11\");\n            bufferedWriter.flush();\n            bufferedReader.close();\n            bufferedWriter.close();\n            socket.close();\n        }\n}\n\n//客户端\npublic static void main(String[] args) throws Exception {\n    String msg = \"hahahha\";\n    Socket socket = new Socket(\"127.0.0.1\",8888);\n    PrintWriter printWriter = new PrintWriter(socket.getOutputStream());\n    printWriter.println(msg);\n    printWriter.flush();\n    printWriter.close();\n    socket.close();\n}\n```\n\n#### UDP协议\n\n>UDP协议更快,但是容易丢包 只管发送,不管有没有送达 \n\n```java\n//服务端\npublic static void main(String[] args) throws Exception {\n        DatagramSocket datagramSocket = new DatagramSocket(10005);\n        byte[] bytes = new byte[1024];\n        DatagramPacket datagramPacket = new DatagramPacket(bytes,bytes.length);\n        while (true){\n            datagramSocket.receive(datagramPacket);\n            byte[] data = datagramPacket.getData();\n            String str = new String(data,0,datagramPacket.getLength());\n            if(\"88\".equals(str)){\n                break;\n            }\n            System.out.println(\"接收到的数据为：\"+str);\n        }\n        datagramSocket.close();\n}\n\n//客户端\npublic static void main(String[] args) throws Exception {\n        DatagramSocket datagramSocket = new DatagramSocket();\n        BufferedReader bufferedReader = new BufferedReader(new InputStreamReader(System.in));\n        String line = null;\n        while ((line=bufferedReader.readLine())!=null){\n         byte[] bytes = line.getBytes();\n            DatagramPacket datagramPacket = new DatagramPacket(bytes,bytes.length, InetAddress.getByName(\"127.0.0.1\"),10005);\n            datagramSocket.send(datagramPacket);\n            if(\"88\".equals(line)){\n                break;\n            }\n            System.out.println(\"发送的数据是：\"+line);\n        }\n        datagramSocket.close();\n}\n```\n\n\n","source":"_posts/通讯协议.md","raw":"---\ntitle: 深入理解通讯协议\ntags:\n  - 通讯协议\n---\n\n通讯协议\n\n### 网络模型\n\n七层模型\n\n- OSI模型\n    - 应用层  为应用程序提供服务\n    - 表示层  数据格式转换\n    - 会话层  建立 管理 维护会话\n    - 传输层  最重要 端对端的连接 数据可靠性传输\n    - 网络层  ip 路由\n    - 链路层  交换机\n    - 物理层  物理介质 网线等等\n\n<!-- more -->\n\n- TCP/IP模型\n    - 应用层 \n    - 传输层\n    - 网路层\n    - 链路层\n\n### TCP的3次握手\n\n- 客户端请求建立连接\n- 服务端应答 服务端建立连接\n- 客户端应答\n\n### SYN洪泛攻击\n\n>定义\n\n    通过网络服务所在的端口发送大量伪造原地址的攻击报文，发送到服务端，造成服务端上的半开连接队列被占满，从而阻止其他用户进行访问。\n>原理\n\n    攻击者客户端利用伪造的IP地址向服务端发出请求(第一次握手)，而服务端的响应(第二次握手)的报文将永远发送不到真实的客户端，\n    服务端在等待客户端的第三次握手(永远都不会有的)，\n    服务端在等待这种半开的连接过程中消耗了资源，如果有成千上万的这种连接，主机资源将被耗尽，从而达到攻击的目的。\n\n>解决方案\n\n    无效连接监控释放\n    延缓TCB分配方法\n    防火墙\n\n\n\n### TCP的4次挥手\n\n- 客户端发送关闭请求\n- 服务端关闭请求\n- 服务端发送关闭请求\n- 客户端发送关闭\n\n\n#### TCP的通讯原理\n\n>Socket套接字\n\n    TCP用主机的IP地址加上主机上的端口号作为TCP连接的端点，这种端点就叫做套接字（socket）。\n\n>TCP缓冲区\n\n    每个TCP的Socket的内核中都有一个发送缓冲区和一个接收缓冲区。\n\n>阻塞模式\n\n    接收端缓冲区为空，接收端调用read方法的线程阻塞。\n    发送端缓冲区满了或者不够大，发送端调用write方法的线程阻塞。\n\n#### TCP中的滑动窗口协议——可靠和高效的结合\n\n- 滑动窗口\n    - 发送方和接收方都会维护一个数据帧的序列，这个序列被称作窗口。\n    - 发送方的窗口大小由接收方确认。\n\n- 目的\n    - 确保数据不丢失\n        - 如果发送的数据丢失了可以重新发。\n    - 控制发送速度\n        - 控制发送速度，以免接收方的缓存不够大导\n        - 致溢出，同时控制流量也可以避免网络拥塞。\n\n滑动演示:\n>https://media.pearsoncmg.com/aw/ecs_kurose_compnetwork_7/cw/content/interactiveanimations/selective-repeat-protocol/index.html\n\n### HTTP协议\n\n```java\n//服务端\npublic static void main(String[] args) throws IOException {\n        ServerSocket serverSocket = new ServerSocket(8888);\n        System.out.println(\"服务端启动 端口8888\");\n        while (true){\n            Socket socket = serverSocket.accept();\n            BufferedReader bufferedReader = new BufferedReader(new InputStreamReader(socket.getInputStream()));\n            String buffer = null;\n            while ((buffer=bufferedReader.readLine())!=null&&!buffer.equals(\"\")){\n                System.out.println(buffer);\n            }\n            BufferedWriter bufferedWriter = new BufferedWriter(new OutputStreamWriter(socket.getOutputStream()));\n            bufferedWriter.write(\"HTTP/1.1 200 OK \\r\\n Content-Type:text/json \\r\\n charset=UTF-8 \\r\\n \\r\\n\");\n            bufferedWriter.write(\"11\");\n            bufferedWriter.flush();\n            bufferedReader.close();\n            bufferedWriter.close();\n            socket.close();\n        }\n}\n\n//客户端\npublic static void main(String[] args) throws Exception {\n    String msg = \"hahahha\";\n    Socket socket = new Socket(\"127.0.0.1\",8888);\n    PrintWriter printWriter = new PrintWriter(socket.getOutputStream());\n    printWriter.println(msg);\n    printWriter.flush();\n    printWriter.close();\n    socket.close();\n}\n```\n\n#### UDP协议\n\n>UDP协议更快,但是容易丢包 只管发送,不管有没有送达 \n\n```java\n//服务端\npublic static void main(String[] args) throws Exception {\n        DatagramSocket datagramSocket = new DatagramSocket(10005);\n        byte[] bytes = new byte[1024];\n        DatagramPacket datagramPacket = new DatagramPacket(bytes,bytes.length);\n        while (true){\n            datagramSocket.receive(datagramPacket);\n            byte[] data = datagramPacket.getData();\n            String str = new String(data,0,datagramPacket.getLength());\n            if(\"88\".equals(str)){\n                break;\n            }\n            System.out.println(\"接收到的数据为：\"+str);\n        }\n        datagramSocket.close();\n}\n\n//客户端\npublic static void main(String[] args) throws Exception {\n        DatagramSocket datagramSocket = new DatagramSocket();\n        BufferedReader bufferedReader = new BufferedReader(new InputStreamReader(System.in));\n        String line = null;\n        while ((line=bufferedReader.readLine())!=null){\n         byte[] bytes = line.getBytes();\n            DatagramPacket datagramPacket = new DatagramPacket(bytes,bytes.length, InetAddress.getByName(\"127.0.0.1\"),10005);\n            datagramSocket.send(datagramPacket);\n            if(\"88\".equals(line)){\n                break;\n            }\n            System.out.println(\"发送的数据是：\"+line);\n        }\n        datagramSocket.close();\n}\n```\n\n\n","slug":"通讯协议","published":1,"date":"2018-12-17T15:35:45.653Z","updated":"2018-12-18T16:27:10.090Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjskls63b001e745bkqu4wxjp","content":"<p>通讯协议</p>\n<h3 id=\"网络模型\"><a href=\"#网络模型\" class=\"headerlink\" title=\"网络模型\"></a>网络模型</h3><p>七层模型</p>\n<ul>\n<li>OSI模型<ul>\n<li>应用层  为应用程序提供服务</li>\n<li>表示层  数据格式转换</li>\n<li>会话层  建立 管理 维护会话</li>\n<li>传输层  最重要 端对端的连接 数据可靠性传输</li>\n<li>网络层  ip 路由</li>\n<li>链路层  交换机</li>\n<li>物理层  物理介质 网线等等</li>\n</ul>\n</li>\n</ul>\n<a id=\"more\"></a>\n<ul>\n<li>TCP/IP模型<ul>\n<li>应用层 </li>\n<li>传输层</li>\n<li>网路层</li>\n<li>链路层</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"TCP的3次握手\"><a href=\"#TCP的3次握手\" class=\"headerlink\" title=\"TCP的3次握手\"></a>TCP的3次握手</h3><ul>\n<li>客户端请求建立连接</li>\n<li>服务端应答 服务端建立连接</li>\n<li>客户端应答</li>\n</ul>\n<h3 id=\"SYN洪泛攻击\"><a href=\"#SYN洪泛攻击\" class=\"headerlink\" title=\"SYN洪泛攻击\"></a>SYN洪泛攻击</h3><blockquote>\n<p>定义</p>\n</blockquote>\n<pre><code>通过网络服务所在的端口发送大量伪造原地址的攻击报文，发送到服务端，造成服务端上的半开连接队列被占满，从而阻止其他用户进行访问。\n</code></pre><blockquote>\n<p>原理</p>\n</blockquote>\n<pre><code>攻击者客户端利用伪造的IP地址向服务端发出请求(第一次握手)，而服务端的响应(第二次握手)的报文将永远发送不到真实的客户端，\n服务端在等待客户端的第三次握手(永远都不会有的)，\n服务端在等待这种半开的连接过程中消耗了资源，如果有成千上万的这种连接，主机资源将被耗尽，从而达到攻击的目的。\n</code></pre><blockquote>\n<p>解决方案</p>\n</blockquote>\n<pre><code>无效连接监控释放\n延缓TCB分配方法\n防火墙\n</code></pre><h3 id=\"TCP的4次挥手\"><a href=\"#TCP的4次挥手\" class=\"headerlink\" title=\"TCP的4次挥手\"></a>TCP的4次挥手</h3><ul>\n<li>客户端发送关闭请求</li>\n<li>服务端关闭请求</li>\n<li>服务端发送关闭请求</li>\n<li>客户端发送关闭</li>\n</ul>\n<h4 id=\"TCP的通讯原理\"><a href=\"#TCP的通讯原理\" class=\"headerlink\" title=\"TCP的通讯原理\"></a>TCP的通讯原理</h4><blockquote>\n<p>Socket套接字</p>\n</blockquote>\n<pre><code>TCP用主机的IP地址加上主机上的端口号作为TCP连接的端点，这种端点就叫做套接字（socket）。\n</code></pre><blockquote>\n<p>TCP缓冲区</p>\n</blockquote>\n<pre><code>每个TCP的Socket的内核中都有一个发送缓冲区和一个接收缓冲区。\n</code></pre><blockquote>\n<p>阻塞模式</p>\n</blockquote>\n<pre><code>接收端缓冲区为空，接收端调用read方法的线程阻塞。\n发送端缓冲区满了或者不够大，发送端调用write方法的线程阻塞。\n</code></pre><h4 id=\"TCP中的滑动窗口协议——可靠和高效的结合\"><a href=\"#TCP中的滑动窗口协议——可靠和高效的结合\" class=\"headerlink\" title=\"TCP中的滑动窗口协议——可靠和高效的结合\"></a>TCP中的滑动窗口协议——可靠和高效的结合</h4><ul>\n<li><p>滑动窗口</p>\n<ul>\n<li>发送方和接收方都会维护一个数据帧的序列，这个序列被称作窗口。</li>\n<li>发送方的窗口大小由接收方确认。</li>\n</ul>\n</li>\n<li><p>目的</p>\n<ul>\n<li>确保数据不丢失<ul>\n<li>如果发送的数据丢失了可以重新发。</li>\n</ul>\n</li>\n<li>控制发送速度<ul>\n<li>控制发送速度，以免接收方的缓存不够大导</li>\n<li>致溢出，同时控制流量也可以避免网络拥塞。</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<p>滑动演示:</p>\n<blockquote>\n<p><a href=\"https://media.pearsoncmg.com/aw/ecs_kurose_compnetwork_7/cw/content/interactiveanimations/selective-repeat-protocol/index.html\" target=\"_blank\" rel=\"noopener\">https://media.pearsoncmg.com/aw/ecs_kurose_compnetwork_7/cw/content/interactiveanimations/selective-repeat-protocol/index.html</a></p>\n</blockquote>\n<h3 id=\"HTTP协议\"><a href=\"#HTTP协议\" class=\"headerlink\" title=\"HTTP协议\"></a>HTTP协议</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//服务端</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> <span class=\"keyword\">throws</span> IOException </span>&#123;</span><br><span class=\"line\">        ServerSocket serverSocket = <span class=\"keyword\">new</span> ServerSocket(<span class=\"number\">8888</span>);</span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"服务端启动 端口8888\"</span>);</span><br><span class=\"line\">        <span class=\"keyword\">while</span> (<span class=\"keyword\">true</span>)&#123;</span><br><span class=\"line\">            Socket socket = serverSocket.accept();</span><br><span class=\"line\">            BufferedReader bufferedReader = <span class=\"keyword\">new</span> BufferedReader(<span class=\"keyword\">new</span> InputStreamReader(socket.getInputStream()));</span><br><span class=\"line\">            String buffer = <span class=\"keyword\">null</span>;</span><br><span class=\"line\">            <span class=\"keyword\">while</span> ((buffer=bufferedReader.readLine())!=<span class=\"keyword\">null</span>&amp;&amp;!buffer.equals(<span class=\"string\">\"\"</span>))&#123;</span><br><span class=\"line\">                System.out.println(buffer);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            BufferedWriter bufferedWriter = <span class=\"keyword\">new</span> BufferedWriter(<span class=\"keyword\">new</span> OutputStreamWriter(socket.getOutputStream()));</span><br><span class=\"line\">            bufferedWriter.write(<span class=\"string\">\"HTTP/1.1 200 OK \\r\\n Content-Type:text/json \\r\\n charset=UTF-8 \\r\\n \\r\\n\"</span>);</span><br><span class=\"line\">            bufferedWriter.write(<span class=\"string\">\"11\"</span>);</span><br><span class=\"line\">            bufferedWriter.flush();</span><br><span class=\"line\">            bufferedReader.close();</span><br><span class=\"line\">            bufferedWriter.close();</span><br><span class=\"line\">            socket.close();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//客户端</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> <span class=\"keyword\">throws</span> Exception </span>&#123;</span><br><span class=\"line\">    String msg = <span class=\"string\">\"hahahha\"</span>;</span><br><span class=\"line\">    Socket socket = <span class=\"keyword\">new</span> Socket(<span class=\"string\">\"127.0.0.1\"</span>,<span class=\"number\">8888</span>);</span><br><span class=\"line\">    PrintWriter printWriter = <span class=\"keyword\">new</span> PrintWriter(socket.getOutputStream());</span><br><span class=\"line\">    printWriter.println(msg);</span><br><span class=\"line\">    printWriter.flush();</span><br><span class=\"line\">    printWriter.close();</span><br><span class=\"line\">    socket.close();</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"UDP协议\"><a href=\"#UDP协议\" class=\"headerlink\" title=\"UDP协议\"></a>UDP协议</h4><blockquote>\n<p>UDP协议更快,但是容易丢包 只管发送,不管有没有送达 </p>\n</blockquote>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//服务端</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> <span class=\"keyword\">throws</span> Exception </span>&#123;</span><br><span class=\"line\">        DatagramSocket datagramSocket = <span class=\"keyword\">new</span> DatagramSocket(<span class=\"number\">10005</span>);</span><br><span class=\"line\">        <span class=\"keyword\">byte</span>[] bytes = <span class=\"keyword\">new</span> <span class=\"keyword\">byte</span>[<span class=\"number\">1024</span>];</span><br><span class=\"line\">        DatagramPacket datagramPacket = <span class=\"keyword\">new</span> DatagramPacket(bytes,bytes.length);</span><br><span class=\"line\">        <span class=\"keyword\">while</span> (<span class=\"keyword\">true</span>)&#123;</span><br><span class=\"line\">            datagramSocket.receive(datagramPacket);</span><br><span class=\"line\">            <span class=\"keyword\">byte</span>[] data = datagramPacket.getData();</span><br><span class=\"line\">            String str = <span class=\"keyword\">new</span> String(data,<span class=\"number\">0</span>,datagramPacket.getLength());</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(<span class=\"string\">\"88\"</span>.equals(str))&#123;</span><br><span class=\"line\">                <span class=\"keyword\">break</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            System.out.println(<span class=\"string\">\"接收到的数据为：\"</span>+str);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        datagramSocket.close();</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//客户端</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> <span class=\"keyword\">throws</span> Exception </span>&#123;</span><br><span class=\"line\">        DatagramSocket datagramSocket = <span class=\"keyword\">new</span> DatagramSocket();</span><br><span class=\"line\">        BufferedReader bufferedReader = <span class=\"keyword\">new</span> BufferedReader(<span class=\"keyword\">new</span> InputStreamReader(System.in));</span><br><span class=\"line\">        String line = <span class=\"keyword\">null</span>;</span><br><span class=\"line\">        <span class=\"keyword\">while</span> ((line=bufferedReader.readLine())!=<span class=\"keyword\">null</span>)&#123;</span><br><span class=\"line\">         <span class=\"keyword\">byte</span>[] bytes = line.getBytes();</span><br><span class=\"line\">            DatagramPacket datagramPacket = <span class=\"keyword\">new</span> DatagramPacket(bytes,bytes.length, InetAddress.getByName(<span class=\"string\">\"127.0.0.1\"</span>),<span class=\"number\">10005</span>);</span><br><span class=\"line\">            datagramSocket.send(datagramPacket);</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(<span class=\"string\">\"88\"</span>.equals(line))&#123;</span><br><span class=\"line\">                <span class=\"keyword\">break</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            System.out.println(<span class=\"string\">\"发送的数据是：\"</span>+line);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        datagramSocket.close();</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"<p>通讯协议</p>\n<h3 id=\"网络模型\"><a href=\"#网络模型\" class=\"headerlink\" title=\"网络模型\"></a>网络模型</h3><p>七层模型</p>\n<ul>\n<li>OSI模型<ul>\n<li>应用层  为应用程序提供服务</li>\n<li>表示层  数据格式转换</li>\n<li>会话层  建立 管理 维护会话</li>\n<li>传输层  最重要 端对端的连接 数据可靠性传输</li>\n<li>网络层  ip 路由</li>\n<li>链路层  交换机</li>\n<li>物理层  物理介质 网线等等</li>\n</ul>\n</li>\n</ul>","more":"<ul>\n<li>TCP/IP模型<ul>\n<li>应用层 </li>\n<li>传输层</li>\n<li>网路层</li>\n<li>链路层</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"TCP的3次握手\"><a href=\"#TCP的3次握手\" class=\"headerlink\" title=\"TCP的3次握手\"></a>TCP的3次握手</h3><ul>\n<li>客户端请求建立连接</li>\n<li>服务端应答 服务端建立连接</li>\n<li>客户端应答</li>\n</ul>\n<h3 id=\"SYN洪泛攻击\"><a href=\"#SYN洪泛攻击\" class=\"headerlink\" title=\"SYN洪泛攻击\"></a>SYN洪泛攻击</h3><blockquote>\n<p>定义</p>\n</blockquote>\n<pre><code>通过网络服务所在的端口发送大量伪造原地址的攻击报文，发送到服务端，造成服务端上的半开连接队列被占满，从而阻止其他用户进行访问。\n</code></pre><blockquote>\n<p>原理</p>\n</blockquote>\n<pre><code>攻击者客户端利用伪造的IP地址向服务端发出请求(第一次握手)，而服务端的响应(第二次握手)的报文将永远发送不到真实的客户端，\n服务端在等待客户端的第三次握手(永远都不会有的)，\n服务端在等待这种半开的连接过程中消耗了资源，如果有成千上万的这种连接，主机资源将被耗尽，从而达到攻击的目的。\n</code></pre><blockquote>\n<p>解决方案</p>\n</blockquote>\n<pre><code>无效连接监控释放\n延缓TCB分配方法\n防火墙\n</code></pre><h3 id=\"TCP的4次挥手\"><a href=\"#TCP的4次挥手\" class=\"headerlink\" title=\"TCP的4次挥手\"></a>TCP的4次挥手</h3><ul>\n<li>客户端发送关闭请求</li>\n<li>服务端关闭请求</li>\n<li>服务端发送关闭请求</li>\n<li>客户端发送关闭</li>\n</ul>\n<h4 id=\"TCP的通讯原理\"><a href=\"#TCP的通讯原理\" class=\"headerlink\" title=\"TCP的通讯原理\"></a>TCP的通讯原理</h4><blockquote>\n<p>Socket套接字</p>\n</blockquote>\n<pre><code>TCP用主机的IP地址加上主机上的端口号作为TCP连接的端点，这种端点就叫做套接字（socket）。\n</code></pre><blockquote>\n<p>TCP缓冲区</p>\n</blockquote>\n<pre><code>每个TCP的Socket的内核中都有一个发送缓冲区和一个接收缓冲区。\n</code></pre><blockquote>\n<p>阻塞模式</p>\n</blockquote>\n<pre><code>接收端缓冲区为空，接收端调用read方法的线程阻塞。\n发送端缓冲区满了或者不够大，发送端调用write方法的线程阻塞。\n</code></pre><h4 id=\"TCP中的滑动窗口协议——可靠和高效的结合\"><a href=\"#TCP中的滑动窗口协议——可靠和高效的结合\" class=\"headerlink\" title=\"TCP中的滑动窗口协议——可靠和高效的结合\"></a>TCP中的滑动窗口协议——可靠和高效的结合</h4><ul>\n<li><p>滑动窗口</p>\n<ul>\n<li>发送方和接收方都会维护一个数据帧的序列，这个序列被称作窗口。</li>\n<li>发送方的窗口大小由接收方确认。</li>\n</ul>\n</li>\n<li><p>目的</p>\n<ul>\n<li>确保数据不丢失<ul>\n<li>如果发送的数据丢失了可以重新发。</li>\n</ul>\n</li>\n<li>控制发送速度<ul>\n<li>控制发送速度，以免接收方的缓存不够大导</li>\n<li>致溢出，同时控制流量也可以避免网络拥塞。</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<p>滑动演示:</p>\n<blockquote>\n<p><a href=\"https://media.pearsoncmg.com/aw/ecs_kurose_compnetwork_7/cw/content/interactiveanimations/selective-repeat-protocol/index.html\" target=\"_blank\" rel=\"noopener\">https://media.pearsoncmg.com/aw/ecs_kurose_compnetwork_7/cw/content/interactiveanimations/selective-repeat-protocol/index.html</a></p>\n</blockquote>\n<h3 id=\"HTTP协议\"><a href=\"#HTTP协议\" class=\"headerlink\" title=\"HTTP协议\"></a>HTTP协议</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//服务端</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> <span class=\"keyword\">throws</span> IOException </span>&#123;</span><br><span class=\"line\">        ServerSocket serverSocket = <span class=\"keyword\">new</span> ServerSocket(<span class=\"number\">8888</span>);</span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"服务端启动 端口8888\"</span>);</span><br><span class=\"line\">        <span class=\"keyword\">while</span> (<span class=\"keyword\">true</span>)&#123;</span><br><span class=\"line\">            Socket socket = serverSocket.accept();</span><br><span class=\"line\">            BufferedReader bufferedReader = <span class=\"keyword\">new</span> BufferedReader(<span class=\"keyword\">new</span> InputStreamReader(socket.getInputStream()));</span><br><span class=\"line\">            String buffer = <span class=\"keyword\">null</span>;</span><br><span class=\"line\">            <span class=\"keyword\">while</span> ((buffer=bufferedReader.readLine())!=<span class=\"keyword\">null</span>&amp;&amp;!buffer.equals(<span class=\"string\">\"\"</span>))&#123;</span><br><span class=\"line\">                System.out.println(buffer);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            BufferedWriter bufferedWriter = <span class=\"keyword\">new</span> BufferedWriter(<span class=\"keyword\">new</span> OutputStreamWriter(socket.getOutputStream()));</span><br><span class=\"line\">            bufferedWriter.write(<span class=\"string\">\"HTTP/1.1 200 OK \\r\\n Content-Type:text/json \\r\\n charset=UTF-8 \\r\\n \\r\\n\"</span>);</span><br><span class=\"line\">            bufferedWriter.write(<span class=\"string\">\"11\"</span>);</span><br><span class=\"line\">            bufferedWriter.flush();</span><br><span class=\"line\">            bufferedReader.close();</span><br><span class=\"line\">            bufferedWriter.close();</span><br><span class=\"line\">            socket.close();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//客户端</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> <span class=\"keyword\">throws</span> Exception </span>&#123;</span><br><span class=\"line\">    String msg = <span class=\"string\">\"hahahha\"</span>;</span><br><span class=\"line\">    Socket socket = <span class=\"keyword\">new</span> Socket(<span class=\"string\">\"127.0.0.1\"</span>,<span class=\"number\">8888</span>);</span><br><span class=\"line\">    PrintWriter printWriter = <span class=\"keyword\">new</span> PrintWriter(socket.getOutputStream());</span><br><span class=\"line\">    printWriter.println(msg);</span><br><span class=\"line\">    printWriter.flush();</span><br><span class=\"line\">    printWriter.close();</span><br><span class=\"line\">    socket.close();</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"UDP协议\"><a href=\"#UDP协议\" class=\"headerlink\" title=\"UDP协议\"></a>UDP协议</h4><blockquote>\n<p>UDP协议更快,但是容易丢包 只管发送,不管有没有送达 </p>\n</blockquote>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//服务端</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> <span class=\"keyword\">throws</span> Exception </span>&#123;</span><br><span class=\"line\">        DatagramSocket datagramSocket = <span class=\"keyword\">new</span> DatagramSocket(<span class=\"number\">10005</span>);</span><br><span class=\"line\">        <span class=\"keyword\">byte</span>[] bytes = <span class=\"keyword\">new</span> <span class=\"keyword\">byte</span>[<span class=\"number\">1024</span>];</span><br><span class=\"line\">        DatagramPacket datagramPacket = <span class=\"keyword\">new</span> DatagramPacket(bytes,bytes.length);</span><br><span class=\"line\">        <span class=\"keyword\">while</span> (<span class=\"keyword\">true</span>)&#123;</span><br><span class=\"line\">            datagramSocket.receive(datagramPacket);</span><br><span class=\"line\">            <span class=\"keyword\">byte</span>[] data = datagramPacket.getData();</span><br><span class=\"line\">            String str = <span class=\"keyword\">new</span> String(data,<span class=\"number\">0</span>,datagramPacket.getLength());</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(<span class=\"string\">\"88\"</span>.equals(str))&#123;</span><br><span class=\"line\">                <span class=\"keyword\">break</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            System.out.println(<span class=\"string\">\"接收到的数据为：\"</span>+str);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        datagramSocket.close();</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//客户端</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> <span class=\"keyword\">throws</span> Exception </span>&#123;</span><br><span class=\"line\">        DatagramSocket datagramSocket = <span class=\"keyword\">new</span> DatagramSocket();</span><br><span class=\"line\">        BufferedReader bufferedReader = <span class=\"keyword\">new</span> BufferedReader(<span class=\"keyword\">new</span> InputStreamReader(System.in));</span><br><span class=\"line\">        String line = <span class=\"keyword\">null</span>;</span><br><span class=\"line\">        <span class=\"keyword\">while</span> ((line=bufferedReader.readLine())!=<span class=\"keyword\">null</span>)&#123;</span><br><span class=\"line\">         <span class=\"keyword\">byte</span>[] bytes = line.getBytes();</span><br><span class=\"line\">            DatagramPacket datagramPacket = <span class=\"keyword\">new</span> DatagramPacket(bytes,bytes.length, InetAddress.getByName(<span class=\"string\">\"127.0.0.1\"</span>),<span class=\"number\">10005</span>);</span><br><span class=\"line\">            datagramSocket.send(datagramPacket);</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(<span class=\"string\">\"88\"</span>.equals(line))&#123;</span><br><span class=\"line\">                <span class=\"keyword\">break</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            System.out.println(<span class=\"string\">\"发送的数据是：\"</span>+line);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        datagramSocket.close();</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>"}],"PostAsset":[],"PostCategory":[{"post_id":"cjskls62w000h745bmtv41ymy","category_id":"cjskls62y000l745b56s5vgcm","_id":"cjskls634000v745by9v7qudf"}],"PostTag":[{"post_id":"cjskls62q000a745bzyai88p7","tag_id":"cjskls62m0006745bkbzhk6tu","_id":"cjskls62v000e745bgwrvohq7"},{"post_id":"cjskls62j0003745bb6tn9y3m","tag_id":"cjskls62m0006745bkbzhk6tu","_id":"cjskls62v000g745byxxay0gq"},{"post_id":"cjskls62s000c745b8yf6o5rn","tag_id":"cjskls62m0006745bkbzhk6tu","_id":"cjskls62x000j745byg874bwa"},{"post_id":"cjskls62l0005745blq32t15k","tag_id":"cjskls62m0006745bkbzhk6tu","_id":"cjskls62z000m745brjevr8w0"},{"post_id":"cjskls62o0008745baqzvo4a5","tag_id":"cjskls62m0006745bkbzhk6tu","_id":"cjskls630000p745bx2tydmrn"},{"post_id":"cjskls62v000f745b34kxursl","tag_id":"cjskls630000o745bnb2pgc6y","_id":"cjskls635000y745bka7jmlr8"},{"post_id":"cjskls62v000f745b34kxursl","tag_id":"cjskls632000s745by8fm5swm","_id":"cjskls6360010745bjjeu3ik1"},{"post_id":"cjskls62w000h745bmtv41ymy","tag_id":"cjskls634000w745bfclpbodv","_id":"cjskls6370013745bh4m1dj1i"},{"post_id":"cjskls62x000k745b1p8ep20e","tag_id":"cjskls6360011745blacg1cuk","_id":"cjskls6390017745bb6qfen69"},{"post_id":"cjskls6390018745bh8o9faoj","tag_id":"cjskls632000s745by8fm5swm","_id":"cjskls63a001b745buh1d06ge"},{"post_id":"cjskls62z000n745b075wk644","tag_id":"cjskls6380016745bzf1dluhh","_id":"cjskls63b001d745bl5wjihwr"},{"post_id":"cjskls630000q745bzxwma18e","tag_id":"cjskls6380016745bzf1dluhh","_id":"cjskls63c001g745bnv1empfl"},{"post_id":"cjskls631000r745bsrdoeluk","tag_id":"cjskls6380016745bzf1dluhh","_id":"cjskls63d001i745b1ggowrfr"},{"post_id":"cjskls632000t745bajawks4h","tag_id":"cjskls6380016745bzf1dluhh","_id":"cjskls63d001k745bjwa5fhlw"},{"post_id":"cjskls633000u745bdinhrnhb","tag_id":"cjskls6380016745bzf1dluhh","_id":"cjskls63e001m745b3rzyyiim"},{"post_id":"cjskls634000x745bq19veffm","tag_id":"cjskls6380016745bzf1dluhh","_id":"cjskls63e001o745bqfelqjde"},{"post_id":"cjskls635000z745bj4gdb9cw","tag_id":"cjskls63e001n745bvnmjp41u","_id":"cjskls63f001r745br510rcl9"},{"post_id":"cjskls635000z745bj4gdb9cw","tag_id":"cjskls63f001p745b01gvrghd","_id":"cjskls63f001s745bpp6kh3hx"},{"post_id":"cjskls6360012745brqdtn4v3","tag_id":"cjskls63e001n745bvnmjp41u","_id":"cjskls63g001v745b2umol0w4"},{"post_id":"cjskls6360012745brqdtn4v3","tag_id":"cjskls63f001p745b01gvrghd","_id":"cjskls63g001w745b5pdxetpk"},{"post_id":"cjskls6370014745bczv3gf6m","tag_id":"cjskls63e001n745bvnmjp41u","_id":"cjskls63h001z745b3yh1ut5o"},{"post_id":"cjskls6370014745bczv3gf6m","tag_id":"cjskls63f001p745b01gvrghd","_id":"cjskls63i0020745btc0yrwvm"},{"post_id":"cjskls6380015745bt7c8zs5n","tag_id":"cjskls63e001n745bvnmjp41u","_id":"cjskls63i0023745bhbnsumb1"},{"post_id":"cjskls6380015745bt7c8zs5n","tag_id":"cjskls63f001p745b01gvrghd","_id":"cjskls63j0024745bb6j7djxl"},{"post_id":"cjskls6390019745b1skjh01j","tag_id":"cjskls63i0022745b8svcbpce","_id":"cjskls63j0026745bbsum7yv5"},{"post_id":"cjskls63b001c745b7tmdd3ej","tag_id":"cjskls63i0022745b8svcbpce","_id":"cjskls63k0028745b18xswp3g"},{"post_id":"cjskls63b001e745bkqu4wxjp","tag_id":"cjskls63j0027745b73boyeqj","_id":"cjskls63k0029745b6klnvr4r"}],"Tag":[{"name":"Dubbo","_id":"cjskls62m0006745bkbzhk6tu"},{"name":"Kafka","_id":"cjskls630000o745bnb2pgc6y"},{"name":"Zookeeper","_id":"cjskls632000s745by8fm5swm"},{"name":"hexo","_id":"cjskls634000w745bfclpbodv"},{"name":"Maven","_id":"cjskls6360011745blacg1cuk"},{"name":"RabbitMq","_id":"cjskls6380016745bzf1dluhh"},{"name":"Java","_id":"cjskls63e001n745bvnmjp41u"},{"name":"Spring","_id":"cjskls63f001p745b01gvrghd"},{"name":"并发编程","_id":"cjskls63i0022745b8svcbpce"},{"name":"通讯协议","_id":"cjskls63j0027745b73boyeqj"}]}}